{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Toolkit_1 = require(\"../Toolkit\");\n/**\n * Base observer pattern class for working with listeners\n */\n\n\nclass BaseObserver {\n  constructor() {\n    this.listeners = {};\n  }\n\n  fireEventInternal(fire, k, event) {\n    this.iterateListeners(listener => {\n      // returning false here will instruct itteration to stop\n      if (!fire && !event.firing) {\n        return false;\n      } // fire selected listener\n\n\n      if (listener[k]) {\n        listener[k](event);\n      }\n    });\n  }\n\n  fireEvent(event, k) {\n    event = Object.assign({\n      firing: true,\n      stopPropagation: () => {\n        event.firing = false;\n      }\n    }, event); // fire pre\n\n    this.fireEventInternal(true, 'eventWillFire', Object.assign({}, event, {\n      function: k\n    })); // fire main event\n\n    this.fireEventInternal(false, k, event); // fire post\n\n    this.fireEventInternal(true, 'eventDidFire', Object.assign({}, event, {\n      function: k\n    }));\n  }\n\n  iterateListeners(cb) {\n    for (let id in this.listeners) {\n      const res = cb(this.listeners[id]); // cancel itteration on false\n\n      if (res === false) {\n        return;\n      }\n    }\n  }\n\n  getListenerHandle(listener) {\n    for (let id in this.listeners) {\n      if (this.listeners[id] === listener) {\n        return {\n          id: id,\n          listner: listener,\n          deregister: () => {\n            delete this.listeners[id];\n          }\n        };\n      }\n    }\n  }\n\n  registerListener(listener) {\n    const id = Toolkit_1.Toolkit.UID();\n    this.listeners[id] = listener;\n    return {\n      id: id,\n      listner: listener,\n      deregister: () => {\n        delete this.listeners[id];\n      }\n    };\n  }\n\n  deregisterListener(listener) {\n    if (typeof listener === 'object') {\n      listener.deregister();\n      return true;\n    }\n\n    const handle = this.getListenerHandle(listener);\n\n    if (handle) {\n      handle.deregister();\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexports.BaseObserver = BaseObserver;","map":{"version":3,"sources":["../../../src/core/BaseObserver.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Toolkit_1 = require(\"../Toolkit\");\n/**\n * Base observer pattern class for working with listeners\n */\nclass BaseObserver {\n    constructor() {\n        this.listeners = {};\n    }\n    fireEventInternal(fire, k, event) {\n        this.iterateListeners(listener => {\n            // returning false here will instruct itteration to stop\n            if (!fire && !event.firing) {\n                return false;\n            }\n            // fire selected listener\n            if (listener[k]) {\n                listener[k](event);\n            }\n        });\n    }\n    fireEvent(event, k) {\n        event = Object.assign({ firing: true, stopPropagation: () => {\n                event.firing = false;\n            } }, event);\n        // fire pre\n        this.fireEventInternal(true, 'eventWillFire', Object.assign({}, event, { function: k }));\n        // fire main event\n        this.fireEventInternal(false, k, event);\n        // fire post\n        this.fireEventInternal(true, 'eventDidFire', Object.assign({}, event, { function: k }));\n    }\n    iterateListeners(cb) {\n        for (let id in this.listeners) {\n            const res = cb(this.listeners[id]);\n            // cancel itteration on false\n            if (res === false) {\n                return;\n            }\n        }\n    }\n    getListenerHandle(listener) {\n        for (let id in this.listeners) {\n            if (this.listeners[id] === listener) {\n                return {\n                    id: id,\n                    listner: listener,\n                    deregister: () => {\n                        delete this.listeners[id];\n                    }\n                };\n            }\n        }\n    }\n    registerListener(listener) {\n        const id = Toolkit_1.Toolkit.UID();\n        this.listeners[id] = listener;\n        return {\n            id: id,\n            listner: listener,\n            deregister: () => {\n                delete this.listeners[id];\n            }\n        };\n    }\n    deregisterListener(listener) {\n        if (typeof listener === 'object') {\n            listener.deregister();\n            return true;\n        }\n        const handle = this.getListenerHandle(listener);\n        if (handle) {\n            handle.deregister();\n            return true;\n        }\n        return false;\n    }\n}\nexports.BaseObserver = BaseObserver;\n//# sourceMappingURL=BaseObserver.js.map"]},"metadata":{},"sourceType":"script"}