{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = require(\"react\");\n\nconst _ = require(\"lodash\");\n\nconst LabelWidget_1 = require(\"../label/LabelWidget\");\n\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\n\nclass LinkWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sourcePort: null,\n      targetPort: null\n    };\n  }\n\n  componentWillUnmount() {\n    if (this.sourceListener) {\n      this.sourceListener.deregister();\n    }\n\n    if (this.targetListener) {\n      this.targetListener.deregister();\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    return {\n      sourcePort: nextProps.link.getSourcePort(),\n      targetPort: nextProps.link.getTargetPort()\n    };\n  }\n\n  installTarget() {\n    this.targetListener && this.targetListener.deregister();\n    this.targetListener = this.props.link.getTargetPort().registerListener({\n      reportInitialPosition: event => {\n        this.forceUpdate();\n      }\n    });\n  }\n\n  installSource() {\n    this.sourceListener && this.sourceListener.deregister();\n    this.sourceListener = this.props.link.getSourcePort().registerListener({\n      reportInitialPosition: event => {\n        this.forceUpdate();\n      }\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.sourcePort !== this.state.sourcePort) {\n      this.installSource();\n    }\n\n    if (prevState.targetPort !== this.state.targetPort) {\n      this.installTarget();\n    }\n  }\n\n  static generateLinePath(firstPoint, lastPoint) {\n    return `M${firstPoint.getX()},${firstPoint.getY()} L ${lastPoint.getX()},${lastPoint.getY()}`;\n  }\n\n  componentDidMount() {\n    if (this.props.link.getSourcePort()) {\n      this.installSource();\n    }\n\n    if (this.props.link.getTargetPort()) {\n      this.installTarget();\n    }\n  }\n\n  render() {\n    const {\n      link\n    } = this.props; // only draw the link when we have reported positions\n\n    if (link.getSourcePort() && !link.getSourcePort().reportedPosition) {\n      return null;\n    }\n\n    if (link.getTargetPort() && !link.getTargetPort().reportedPosition) {\n      return null;\n    } //generate links\n\n\n    return React.createElement(react_canvas_core_1.PeformanceWidget, {\n      model: this.props.link,\n      serialized: this.props.link.serialize()\n    }, () => {\n      return React.createElement(\"g\", {\n        \"data-linkid\": this.props.link.getID()\n      }, this.props.diagramEngine.generateWidgetForLink(link), _.map(this.props.link.getLabels(), (labelModel, index) => {\n        return React.createElement(LabelWidget_1.LabelWidget, {\n          key: labelModel.getID(),\n          engine: this.props.diagramEngine,\n          label: labelModel,\n          index: index\n        });\n      }));\n    });\n  }\n\n}\n\nexports.LinkWidget = LinkWidget;","map":{"version":3,"sources":["../../../../src/entities/link/LinkWidget.tsx"],"names":[],"mappings":";;;;;;AAAA,MAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAIA,MAAA,CAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,MAAA,aAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,MAAA,mBAAA,GAAA,OAAA,CAAA,iCAAA,CAAA;;AAaA,MAAa,UAAb,SAAgC,KAAK,CAAC,SAAtC,CAAqE;AAIpE,EAAA,WAAA,CAAY,KAAZ,EAAiB;AAChB,UAAM,KAAN;AACA,SAAK,KAAL,GAAa;AACZ,MAAA,UAAU,EAAE,IADA;AAEZ,MAAA,UAAU,EAAE;AAFA,KAAb;AAIA;;AAED,EAAA,oBAAoB,GAAA;AACnB,QAAI,KAAK,cAAT,EAAyB;AACxB,WAAK,cAAL,CAAoB,UAApB;AACA;;AACD,QAAI,KAAK,cAAT,EAAyB;AACxB,WAAK,cAAL,CAAoB,UAApB;AACA;AACD;;AAED,SAAO,wBAAP,CAAgC,SAAhC,EAAsD,SAAtD,EAA0E;AACzE,WAAO;AACN,MAAA,UAAU,EAAE,SAAS,CAAC,IAAV,CAAe,aAAf,EADN;AAEN,MAAA,UAAU,EAAE,SAAS,CAAC,IAAV,CAAe,aAAf;AAFN,KAAP;AAIA;;AAED,EAAA,aAAa,GAAA;AACZ,SAAK,cAAL,IAAuB,KAAK,cAAL,CAAoB,UAApB,EAAvB;AACA,SAAK,cAAL,GAAsB,KAAK,KAAL,CAAW,IAAX,CAAgB,aAAhB,GAAgC,gBAAhC,CAAiD;AACtE,MAAA,qBAAqB,EAAG,KAAD,IAA8C;AACpE,aAAK,WAAL;AACA;AAHqE,KAAjD,CAAtB;AAKA;;AAED,EAAA,aAAa,GAAA;AACZ,SAAK,cAAL,IAAuB,KAAK,cAAL,CAAoB,UAApB,EAAvB;AACA,SAAK,cAAL,GAAsB,KAAK,KAAL,CAAW,IAAX,CAAgB,aAAhB,GAAgC,gBAAhC,CAAiD;AACtE,MAAA,qBAAqB,EAAG,KAAD,IAA8C;AACpE,aAAK,WAAL;AACA;AAHqE,KAAjD,CAAtB;AAKA;;AAED,EAAA,kBAAkB,CAAC,SAAD,EAAiC,SAAjC,EAAiE,QAAjE,EAAyE;AAC1F,QAAI,SAAS,CAAC,UAAV,KAAyB,KAAK,KAAL,CAAW,UAAxC,EAAoD;AACnD,WAAK,aAAL;AACA;;AACD,QAAI,SAAS,CAAC,UAAV,KAAyB,KAAK,KAAL,CAAW,UAAxC,EAAoD;AACnD,WAAK,aAAL;AACA;AACD;;AAEM,SAAO,gBAAP,CAAwB,UAAxB,EAAgD,SAAhD,EAAqE;AAC3E,WAAO,IAAI,UAAU,CAAC,IAAX,EAAiB,IAAI,UAAU,CAAC,IAAX,EAAiB,MAAM,SAAS,CAAC,IAAV,EAAgB,IAAI,SAAS,CAAC,IAAV,EAAgB,EAA3F;AACA;;AAED,EAAA,iBAAiB,GAAA;AAChB,QAAI,KAAK,KAAL,CAAW,IAAX,CAAgB,aAAhB,EAAJ,EAAqC;AACpC,WAAK,aAAL;AACA;;AACD,QAAI,KAAK,KAAL,CAAW,IAAX,CAAgB,aAAhB,EAAJ,EAAqC;AACpC,WAAK,aAAL;AACA;AACD;;AAED,EAAA,MAAM,GAAA;AACL,UAAM;AAAE,MAAA;AAAF,QAAW,KAAK,KAAtB,CADK,CAGL;;AACA,QAAI,IAAI,CAAC,aAAL,MAAwB,CAAC,IAAI,CAAC,aAAL,GAAqB,gBAAlD,EAAoE;AACnE,aAAO,IAAP;AACA;;AACD,QAAI,IAAI,CAAC,aAAL,MAAwB,CAAC,IAAI,CAAC,aAAL,GAAqB,gBAAlD,EAAoE;AACnE,aAAO,IAAP;AACA,KATI,CAWL;;;AACA,WACC,KAAA,CAAA,aAAA,CAAC,mBAAA,CAAA,gBAAD,EAAiB;AAAC,MAAA,KAAK,EAAE,KAAK,KAAL,CAAW,IAAnB;AAAyB,MAAA,UAAU,EAAE,KAAK,KAAL,CAAW,IAAX,CAAgB,SAAhB;AAArC,KAAjB,EACE,MAAK;AACL,aACC,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAA,uBAAgB,KAAK,KAAL,CAAW,IAAX,CAAgB,KAAhB;AAAhB,OAAA,EACE,KAAK,KAAL,CAAW,aAAX,CAAyB,qBAAzB,CAA+C,IAA/C,CADF,EAEE,CAAC,CAAC,GAAF,CAAM,KAAK,KAAL,CAAW,IAAX,CAAgB,SAAhB,EAAN,EAAmC,CAAC,UAAD,EAAa,KAAb,KAAsB;AACzD,eACC,KAAA,CAAA,aAAA,CAAC,aAAA,CAAA,WAAD,EAAY;AACX,UAAA,GAAG,EAAE,UAAU,CAAC,KAAX,EADM;AAEX,UAAA,MAAM,EAAE,KAAK,KAAL,CAAW,aAFR;AAGX,UAAA,KAAK,EAAE,UAHI;AAIX,UAAA,KAAK,EAAE;AAJI,SAAZ,CADD;AAQA,OATA,CAFF,CADD;AAeA,KAjBF,CADD;AAqBA;;AArGmE;;AAArE,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst React = require(\"react\");\nconst _ = require(\"lodash\");\nconst LabelWidget_1 = require(\"../label/LabelWidget\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nclass LinkWidget extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sourcePort: null,\n            targetPort: null\n        };\n    }\n    componentWillUnmount() {\n        if (this.sourceListener) {\n            this.sourceListener.deregister();\n        }\n        if (this.targetListener) {\n            this.targetListener.deregister();\n        }\n    }\n    static getDerivedStateFromProps(nextProps, prevState) {\n        return {\n            sourcePort: nextProps.link.getSourcePort(),\n            targetPort: nextProps.link.getTargetPort()\n        };\n    }\n    installTarget() {\n        this.targetListener && this.targetListener.deregister();\n        this.targetListener = this.props.link.getTargetPort().registerListener({\n            reportInitialPosition: (event) => {\n                this.forceUpdate();\n            }\n        });\n    }\n    installSource() {\n        this.sourceListener && this.sourceListener.deregister();\n        this.sourceListener = this.props.link.getSourcePort().registerListener({\n            reportInitialPosition: (event) => {\n                this.forceUpdate();\n            }\n        });\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.sourcePort !== this.state.sourcePort) {\n            this.installSource();\n        }\n        if (prevState.targetPort !== this.state.targetPort) {\n            this.installTarget();\n        }\n    }\n    static generateLinePath(firstPoint, lastPoint) {\n        return `M${firstPoint.getX()},${firstPoint.getY()} L ${lastPoint.getX()},${lastPoint.getY()}`;\n    }\n    componentDidMount() {\n        if (this.props.link.getSourcePort()) {\n            this.installSource();\n        }\n        if (this.props.link.getTargetPort()) {\n            this.installTarget();\n        }\n    }\n    render() {\n        const { link } = this.props;\n        // only draw the link when we have reported positions\n        if (link.getSourcePort() && !link.getSourcePort().reportedPosition) {\n            return null;\n        }\n        if (link.getTargetPort() && !link.getTargetPort().reportedPosition) {\n            return null;\n        }\n        //generate links\n        return (React.createElement(react_canvas_core_1.PeformanceWidget, { model: this.props.link, serialized: this.props.link.serialize() }, () => {\n            return (React.createElement(\"g\", { \"data-linkid\": this.props.link.getID() },\n                this.props.diagramEngine.generateWidgetForLink(link),\n                _.map(this.props.link.getLabels(), (labelModel, index) => {\n                    return (React.createElement(LabelWidget_1.LabelWidget, { key: labelModel.getID(), engine: this.props.diagramEngine, label: labelModel, index: index }));\n                })));\n        }));\n    }\n}\nexports.LinkWidget = LinkWidget;\n//# sourceMappingURL=LinkWidget.js.map"]},"metadata":{},"sourceType":"script"}