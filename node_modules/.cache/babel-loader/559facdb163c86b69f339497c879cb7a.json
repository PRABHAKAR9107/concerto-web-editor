{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst AbstractDisplacementState_1 = require(\"../core-state/AbstractDisplacementState\");\n\nclass DragCanvasState extends AbstractDisplacementState_1.AbstractDisplacementState {\n  constructor() {\n    super({\n      name: 'drag-canvas'\n    });\n  }\n\n  activated(prev) {\n    const _super = Object.create(null, {\n      activated: {\n        get: () => super.activated\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      _super.activated.call(this, prev);\n\n      this.engine.getModel().clearSelection();\n      yield this.engine.repaintCanvas(true); // we can block layer rendering because we are only targeting the transforms\n\n      for (let layer of this.engine.getModel().getLayers()) {\n        layer.allowRepaint(false);\n      }\n\n      this.initialCanvasX = this.engine.getModel().getOffsetX();\n      this.initialCanvasY = this.engine.getModel().getOffsetY();\n    });\n  }\n\n  deactivated(next) {\n    super.deactivated(next);\n\n    for (let layer of this.engine.getModel().getLayers()) {\n      layer.allowRepaint(true);\n    }\n  }\n\n  fireMouseMoved(event) {\n    this.engine.getModel().setOffset(this.initialCanvasX + event.displacementX, this.initialCanvasY + event.displacementY);\n    this.engine.repaintCanvas();\n  }\n\n}\n\nexports.DragCanvasState = DragCanvasState;","map":{"version":3,"sources":["../../../src/states/DragCanvasState.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,2BAAA,GAAA,OAAA,CAAA,yCAAA,CAAA;;AAGA,MAAa,eAAb,SAAqC,2BAAA,CAAA,yBAArC,CAA8D;AAK7D,EAAA,WAAA,GAAA;AACC,UAAM;AACL,MAAA,IAAI,EAAE;AADD,KAAN;AAGA;;AAEK,EAAA,SAAS,CAAC,IAAD,EAAK;;;;;;;;AACnB,MAAA,MAAA,CAAM,SAAN,CAAe,IAAf,CAAe,IAAf,EAAgB,IAAhB;;AACA,WAAK,MAAL,CAAY,QAAZ,GAAuB,cAAvB;AACA,YAAM,KAAK,MAAL,CAAY,aAAZ,CAA0B,IAA1B,CAAN,C,CAEA;;AACA,WAAK,IAAI,KAAT,IAAkB,KAAK,MAAL,CAAY,QAAZ,GAAuB,SAAvB,EAAlB,EAAsD;AACrD,QAAA,KAAK,CAAC,YAAN,CAAmB,KAAnB;AACA;;AAED,WAAK,cAAL,GAAsB,KAAK,MAAL,CAAY,QAAZ,GAAuB,UAAvB,EAAtB;AACA,WAAK,cAAL,GAAsB,KAAK,MAAL,CAAY,QAAZ,GAAuB,UAAvB,EAAtB;AACA,K;AAAA;;AAED,EAAA,WAAW,CAAC,IAAD,EAAY;AACtB,UAAM,WAAN,CAAkB,IAAlB;;AACA,SAAK,IAAI,KAAT,IAAkB,KAAK,MAAL,CAAY,QAAZ,GAAuB,SAAvB,EAAlB,EAAsD;AACrD,MAAA,KAAK,CAAC,YAAN,CAAmB,IAAnB;AACA;AACD;;AAED,EAAA,cAAc,CAAC,KAAD,EAAsC;AACnD,SAAK,MAAL,CACE,QADF,GAEE,SAFF,CAEY,KAAK,cAAL,GAAsB,KAAK,CAAC,aAFxC,EAEuD,KAAK,cAAL,GAAsB,KAAK,CAAC,aAFnF;AAGA,SAAK,MAAL,CAAY,aAAZ;AACA;;AArC4D;;AAA9D,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst AbstractDisplacementState_1 = require(\"../core-state/AbstractDisplacementState\");\nclass DragCanvasState extends AbstractDisplacementState_1.AbstractDisplacementState {\n    constructor() {\n        super({\n            name: 'drag-canvas'\n        });\n    }\n    activated(prev) {\n        const _super = Object.create(null, {\n            activated: { get: () => super.activated }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            _super.activated.call(this, prev);\n            this.engine.getModel().clearSelection();\n            yield this.engine.repaintCanvas(true);\n            // we can block layer rendering because we are only targeting the transforms\n            for (let layer of this.engine.getModel().getLayers()) {\n                layer.allowRepaint(false);\n            }\n            this.initialCanvasX = this.engine.getModel().getOffsetX();\n            this.initialCanvasY = this.engine.getModel().getOffsetY();\n        });\n    }\n    deactivated(next) {\n        super.deactivated(next);\n        for (let layer of this.engine.getModel().getLayers()) {\n            layer.allowRepaint(true);\n        }\n    }\n    fireMouseMoved(event) {\n        this.engine\n            .getModel()\n            .setOffset(this.initialCanvasX + event.displacementX, this.initialCanvasY + event.displacementY);\n        this.engine.repaintCanvas();\n    }\n}\nexports.DragCanvasState = DragCanvasState;\n//# sourceMappingURL=DragCanvasState.js.map"]},"metadata":{},"sourceType":"script"}