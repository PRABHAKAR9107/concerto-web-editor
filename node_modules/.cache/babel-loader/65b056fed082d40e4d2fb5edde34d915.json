{"ast":null,"code":"var _jsxFileName = \"/home/kanav/gsoc_/concerto-web-editor/src/components/DDArea.js\";\nimport React, { Component } from 'react';\nimport \"./Style.css\";\nimport { DefaultNodeModel, DefaultPortModel, DefaultNodeFactory, DefaultLinkFactory, DiagramEngine, DiagramModel } from '@projectstorm/react-diagrams';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport './graph/srd.css';\nexport default class DDArea extends Component {\n  constructor(props) {\n    super(props);\n    this.engine = new DiagramEngine(); //this.engine.getNodeFactories().registerFactory(new DefaultNodeFactory());\n    //this.engine.getLinkFactories().registerFactory(new DefaultLinkFactory());\n\n    this.model = new DiagramModel();\n    this.engine.setModel(this.model);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"diagram-layer\",\n      onDrop: event => {\n        var data = JSON.parse(event.dataTransfer.getData('storm-diagram-node')); //var nodesCount = Lodash.keys(this.engine.getDiagramModel().getNodes()).length; //this is used to get the number of nodes\n\n        var node = null; //alert(data.name);\n\n        node = new DefaultNodeModel(data.name, data.color);\n        node.addPort(new DefaultPortModel(true, 'in-1', 'In'));\n        node.addPort(new DefaultPortModel(false, 'out-1', 'Out'));\n        var points = this.engine.getRelativeMousePoint(event);\n        node.x = points.x;\n        node.y = points.y;\n        this.engine.getDiagramModel().addNode(node);\n        this.forceUpdate();\n      },\n      onDoubleClick: event => {\n        //!------------- SERIALIZING ------------------\n        const str = JSON.stringify(this.engine.getDiagramModel().serializeDiagram());\n        console.log(str); //!------------- DESERIALIZING ----------------\n        //we need this to help the system know what models to create form the JSON\n        //this.engine.registerInstanceFactory(new DefaultNodeInstanceFactory());\n        //this.engine.registerInstanceFactory(new DefaultPortInstanceFactory());\n        //this.engine.registerInstanceFactory(new LinkInstanceFactory());\n        //deserialize the model\n        //var model = new DiagramModel();\n        //model.deSerializeDiagram(JSON.parse(str), this.engine);\n        //this.engine.setDiagramModel(model);\n      },\n      onDragOver: event => {\n        event.preventDefault();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(CanvasWidget, {\n      className: \"srd-demo-canvas\",\n      engine: this.engine,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }));\n  }\n\n}\nDDArea.displayName = \"DDArea\";\nDDArea.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"DDArea\"\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/DDArea.js\"] = {\n    name: \"DDArea\",\n    docgenInfo: DDArea.__docgenInfo,\n    path: \"src/components/DDArea.js\"\n  };\n}","map":{"version":3,"sources":["/home/kanav/gsoc_/concerto-web-editor/src/components/DDArea.js"],"names":["React","Component","DefaultNodeModel","DefaultPortModel","DefaultNodeFactory","DefaultLinkFactory","DiagramEngine","DiagramModel","CanvasWidget","DDArea","constructor","props","engine","model","setModel","render","event","data","JSON","parse","dataTransfer","getData","node","name","color","addPort","points","getRelativeMousePoint","x","y","getDiagramModel","addNode","forceUpdate","str","stringify","serializeDiagram","console","log","preventDefault"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,aAAP;AAEA,SACCC,gBADD,EAECC,gBAFD,EAGCC,kBAHD,EAICC,kBAJD,EAKCC,aALD,EAMCC,YAND,QAMqB,8BANrB;AAOA,SAASC,YAAT,QAA6B,iCAA7B;AACA,OAAO,iBAAP;AAEA,eAAe,MAAMC,MAAN,SAAqBR,SAArB,CAA+B;AAC1CS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACN,SAAKC,MAAL,GAAc,IAAIN,aAAJ,EAAd,CAFqB,CAGrB;AACA;;AACA,SAAKO,KAAL,GAAa,IAAIN,YAAJ,EAAb;AACM,SAAKK,MAAL,CAAYE,QAAZ,CAAqB,KAAKD,KAA1B;AAEN;;AACEE,EAAAA,MAAM,GAAG;AACL,WACI;AACP,MAAA,SAAS,EAAC,eADH;AAEP,MAAA,MAAM,EAAEC,KAAK,IAAI;AAChB,YAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACI,YAAN,CAAmBC,OAAnB,CAA2B,oBAA3B,CAAX,CAAX,CADgB,CAEhB;;AACA,YAAIC,IAAI,GAAG,IAAX,CAHgB,CAIhB;;AAEAA,QAAAA,IAAI,GAAG,IAAIpB,gBAAJ,CAAqBe,IAAI,CAACM,IAA1B,EAAgCN,IAAI,CAACO,KAArC,CAAP;AACkBF,QAAAA,IAAI,CAACG,OAAL,CAAa,IAAItB,gBAAJ,CAAqB,IAArB,EAA2B,MAA3B,EAAmC,IAAnC,CAAb;AACAmB,QAAAA,IAAI,CAACG,OAAL,CAAa,IAAItB,gBAAJ,CAAqB,KAArB,EAA4B,OAA5B,EAAqC,KAArC,CAAb;AAElB,YAAIuB,MAAM,GAAG,KAAKd,MAAL,CAAYe,qBAAZ,CAAkCX,KAAlC,CAAb;AACAM,QAAAA,IAAI,CAACM,CAAL,GAASF,MAAM,CAACE,CAAhB;AACAN,QAAAA,IAAI,CAACO,CAAL,GAASH,MAAM,CAACG,CAAhB;AACA,aAAKjB,MAAL,CAAYkB,eAAZ,GAA8BC,OAA9B,CAAsCT,IAAtC;AACkB,aAAKU,WAAL;AAEH,OAlBT;AAmBQ,MAAA,aAAa,EAAEhB,KAAK,IAAE;AAClB;AACA,cAAMiB,GAAG,GAACf,IAAI,CAACgB,SAAL,CAAe,KAAKtB,MAAL,CAAYkB,eAAZ,GAA8BK,gBAA9B,EAAf,CAAV;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ,EAHkB,CAKlB;AACN;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACG,OAlCT;AAoCP,MAAA,UAAU,EAAEjB,KAAK,IAAI;AACpBA,QAAAA,KAAK,CAACsB,cAAN;AACA,OAtCM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAwCP,oBAAC,YAAD;AAAc,MAAA,SAAS,EAAC,iBAAxB;AAA2C,MAAA,MAAM,EAAE,KAAK1B,MAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxCO,CADJ;AA4CH;;AAvDyC;AAAzBH,M","sourcesContent":["import React, { Component } from 'react';\nimport \"./Style.css\";\n\nimport { \n\tDefaultNodeModel,\n\tDefaultPortModel,\n\tDefaultNodeFactory,\n\tDefaultLinkFactory,\n\tDiagramEngine,\n\tDiagramModel } from '@projectstorm/react-diagrams';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport './graph/srd.css';\n\nexport default class DDArea extends Component {\n    constructor(props) {\n        super(props);\n\t\tthis.engine = new DiagramEngine();\n\t\t//this.engine.getNodeFactories().registerFactory(new DefaultNodeFactory());\n\t\t//this.engine.getLinkFactories().registerFactory(new DefaultLinkFactory());\n\t\tthis.model = new DiagramModel();\n        this.engine.setModel(this.model); \n        \n\t}\n    render() {\n        return (\n            <div\n\t\t\t\t\tclassName=\"diagram-layer\"\n\t\t\t\t\tonDrop={event => {\n\t\t\t\t\t\tvar data = JSON.parse(event.dataTransfer.getData('storm-diagram-node'));\n\t\t\t\t\t\t//var nodesCount = Lodash.keys(this.engine.getDiagramModel().getNodes()).length; //this is used to get the number of nodes\n\t\t\t\t\t\tvar node = null;\n\t\t\t\t\t\t//alert(data.name);\n\t\t\t\t\t\t\n\t\t\t\t\t\tnode = new DefaultNodeModel(data.name, data.color);\n                        node.addPort(new DefaultPortModel(true, 'in-1', 'In'));\n                        node.addPort(new DefaultPortModel(false, 'out-1', 'Out'));\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar points = this.engine.getRelativeMousePoint(event);\n\t\t\t\t\t\tnode.x = points.x;\n\t\t\t\t\t\tnode.y = points.y;\n\t\t\t\t\t\tthis.engine.getDiagramModel().addNode(node);\n                        this.forceUpdate();\n                        \n                    }}\n                    onDoubleClick={event=>{\n                        //!------------- SERIALIZING ------------------\n                        const str=JSON.stringify(this.engine.getDiagramModel().serializeDiagram())\n                        console.log(str);\n\n                        //!------------- DESERIALIZING ----------------\n\t\t                //we need this to help the system know what models to create form the JSON\n\t\t                //this.engine.registerInstanceFactory(new DefaultNodeInstanceFactory());\n\t\t                //this.engine.registerInstanceFactory(new DefaultPortInstanceFactory());\n\t\t                //this.engine.registerInstanceFactory(new LinkInstanceFactory());\n\n\t\t                //deserialize the model\n\t\t                //var model = new DiagramModel();\n\t\t                //model.deSerializeDiagram(JSON.parse(str), this.engine);\n\t\t                //this.engine.setDiagramModel(model);\n                    }}\n\n\t\t\t\t\tonDragOver={event => {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<CanvasWidget className=\"srd-demo-canvas\"  engine={this.engine} />\n\t\t\t\t</div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}