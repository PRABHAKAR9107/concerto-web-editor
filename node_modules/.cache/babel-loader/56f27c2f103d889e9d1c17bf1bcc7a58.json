{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst geometry_1 = require(\"@projectstorm/geometry\");\n\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\n\nvar PortModelAlignment;\n\n(function (PortModelAlignment) {\n  PortModelAlignment[\"TOP\"] = \"top\";\n  PortModelAlignment[\"LEFT\"] = \"left\";\n  PortModelAlignment[\"BOTTOM\"] = \"bottom\";\n  PortModelAlignment[\"RIGHT\"] = \"right\";\n})(PortModelAlignment = exports.PortModelAlignment || (exports.PortModelAlignment = {}));\n\nclass PortModel extends react_canvas_core_1.BasePositionModel {\n  constructor(options) {\n    super(options);\n    this.links = {};\n    this.reportedPosition = false;\n  }\n\n  deserialize(event) {\n    super.deserialize(event);\n    this.reportedPosition = false;\n    this.options.name = event.data.name;\n    this.options.alignment = event.data.alignment;\n  }\n\n  serialize() {\n    return Object.assign({}, super.serialize(), {\n      name: this.options.name,\n      alignment: this.options.alignment,\n      parentNode: this.parent.getID(),\n      links: _.map(this.links, link => {\n        return link.getID();\n      })\n    });\n  }\n\n  setPosition(x, y) {\n    let old = this.position;\n    super.setPosition(x, y);\n\n    _.forEach(this.getLinks(), link => {\n      let point = link.getPointForPort(this);\n      point.setPosition(point.getX() + x - old.x, point.getY() + y - old.y);\n    });\n  }\n\n  doClone(lookupTable = {}, clone) {\n    clone.links = {};\n    clone.parentNode = this.getParent().clone(lookupTable);\n  }\n\n  getNode() {\n    return this.getParent();\n  }\n\n  getName() {\n    return this.options.name;\n  }\n\n  getMaximumLinks() {\n    return this.options.maximumLinks;\n  }\n\n  setMaximumLinks(maximumLinks) {\n    this.options.maximumLinks = maximumLinks;\n  }\n\n  removeLink(link) {\n    delete this.links[link.getID()];\n  }\n\n  addLink(link) {\n    this.links[link.getID()] = link;\n  }\n\n  getLinks() {\n    return this.links;\n  }\n\n  createLinkModel() {\n    if (_.isFinite(this.options.maximumLinks)) {\n      var numberOfLinks = _.size(this.links);\n\n      if (this.options.maximumLinks === 1 && numberOfLinks >= 1) {\n        return _.values(this.links)[0];\n      } else if (numberOfLinks >= this.options.maximumLinks) {\n        return null;\n      }\n    }\n\n    return null;\n  }\n\n  reportPosition() {\n    _.forEach(this.getLinks(), link => {\n      link.getPointForPort(this).setPosition(this.getCenter());\n    });\n\n    this.fireEvent({\n      entity: this\n    }, 'reportInitialPosition');\n  }\n\n  getCenter() {\n    return new geometry_1.Point(this.getX() + this.width / 2, this.getY() + this.height / 2);\n  }\n\n  updateCoords(coords) {\n    this.width = coords.getWidth();\n    this.height = coords.getHeight();\n    this.setPosition(coords.getTopLeft());\n    this.reportedPosition = true;\n    this.reportPosition();\n  }\n\n  canLinkToPort(port) {\n    return true;\n  }\n\n  isLocked() {\n    return super.isLocked() || this.getParent().isLocked();\n  }\n\n}\n\nexports.PortModel = PortModel;","map":{"version":3,"sources":["../../../../src/entities/port/PortModel.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst geometry_1 = require(\"@projectstorm/geometry\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nvar PortModelAlignment;\n(function (PortModelAlignment) {\n    PortModelAlignment[\"TOP\"] = \"top\";\n    PortModelAlignment[\"LEFT\"] = \"left\";\n    PortModelAlignment[\"BOTTOM\"] = \"bottom\";\n    PortModelAlignment[\"RIGHT\"] = \"right\";\n})(PortModelAlignment = exports.PortModelAlignment || (exports.PortModelAlignment = {}));\nclass PortModel extends react_canvas_core_1.BasePositionModel {\n    constructor(options) {\n        super(options);\n        this.links = {};\n        this.reportedPosition = false;\n    }\n    deserialize(event) {\n        super.deserialize(event);\n        this.reportedPosition = false;\n        this.options.name = event.data.name;\n        this.options.alignment = event.data.alignment;\n    }\n    serialize() {\n        return Object.assign({}, super.serialize(), { name: this.options.name, alignment: this.options.alignment, parentNode: this.parent.getID(), links: _.map(this.links, link => {\n                return link.getID();\n            }) });\n    }\n    setPosition(x, y) {\n        let old = this.position;\n        super.setPosition(x, y);\n        _.forEach(this.getLinks(), link => {\n            let point = link.getPointForPort(this);\n            point.setPosition(point.getX() + x - old.x, point.getY() + y - old.y);\n        });\n    }\n    doClone(lookupTable = {}, clone) {\n        clone.links = {};\n        clone.parentNode = this.getParent().clone(lookupTable);\n    }\n    getNode() {\n        return this.getParent();\n    }\n    getName() {\n        return this.options.name;\n    }\n    getMaximumLinks() {\n        return this.options.maximumLinks;\n    }\n    setMaximumLinks(maximumLinks) {\n        this.options.maximumLinks = maximumLinks;\n    }\n    removeLink(link) {\n        delete this.links[link.getID()];\n    }\n    addLink(link) {\n        this.links[link.getID()] = link;\n    }\n    getLinks() {\n        return this.links;\n    }\n    createLinkModel() {\n        if (_.isFinite(this.options.maximumLinks)) {\n            var numberOfLinks = _.size(this.links);\n            if (this.options.maximumLinks === 1 && numberOfLinks >= 1) {\n                return _.values(this.links)[0];\n            }\n            else if (numberOfLinks >= this.options.maximumLinks) {\n                return null;\n            }\n        }\n        return null;\n    }\n    reportPosition() {\n        _.forEach(this.getLinks(), link => {\n            link.getPointForPort(this).setPosition(this.getCenter());\n        });\n        this.fireEvent({\n            entity: this\n        }, 'reportInitialPosition');\n    }\n    getCenter() {\n        return new geometry_1.Point(this.getX() + this.width / 2, this.getY() + this.height / 2);\n    }\n    updateCoords(coords) {\n        this.width = coords.getWidth();\n        this.height = coords.getHeight();\n        this.setPosition(coords.getTopLeft());\n        this.reportedPosition = true;\n        this.reportPosition();\n    }\n    canLinkToPort(port) {\n        return true;\n    }\n    isLocked() {\n        return super.isLocked() || this.getParent().isLocked();\n    }\n}\nexports.PortModel = PortModel;\n//# sourceMappingURL=PortModel.js.map"]},"metadata":{},"sourceType":"script"}