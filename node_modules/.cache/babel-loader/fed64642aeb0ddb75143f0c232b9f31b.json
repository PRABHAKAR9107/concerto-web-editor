{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = require(\"react\");\n\nconst _ = require(\"lodash\");\n\nconst PathFinding_1 = require(\"../engine/PathFinding\");\n\nconst react_diagrams_defaults_1 = require(\"@projectstorm/react-diagrams-defaults\");\n\nclass PathFindingLinkWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.refPaths = [];\n    this.state = {\n      selected: false\n    };\n    this.pathFinding = new PathFinding_1.default(this.props.factory);\n  }\n\n  componentDidUpdate() {\n    this.props.link.setRenderedPaths(this.refPaths.map(ref => {\n      return ref.current;\n    }));\n  }\n\n  componentDidMount() {\n    this.props.link.setRenderedPaths(this.refPaths.map(ref => {\n      return ref.current;\n    }));\n  }\n\n  componentWillUnmount() {\n    this.props.link.setRenderedPaths([]);\n  }\n\n  generateLink(path, id) {\n    const ref = React.createRef();\n    this.refPaths.push(ref);\n    return React.createElement(react_diagrams_defaults_1.DefaultLinkSegmentWidget, {\n      key: `link-${id}`,\n      path: path,\n      selected: this.state.selected,\n      diagramEngine: this.props.diagramEngine,\n      factory: this.props.diagramEngine.getFactoryForLink(this.props.link),\n      link: this.props.link,\n      forwardRef: ref,\n      onSelection: selected => {\n        this.setState({\n          selected: selected\n        });\n      },\n      extras: {}\n    });\n  }\n\n  render() {\n    this.refPaths = []; //ensure id is present for all points on the path\n\n    var points = this.props.link.getPoints();\n    var paths = []; // first step: calculate a direct path between the points being linked\n\n    const directPathCoords = this.pathFinding.calculateDirectPath(_.first(points), _.last(points));\n    const routingMatrix = this.props.factory.getRoutingMatrix(); // now we need to extract, from the routing matrix, the very first walkable points\n    // so they can be used as origin and destination of the link to be created\n\n    const smartLink = this.pathFinding.calculateLinkStartEndCoords(routingMatrix, directPathCoords);\n\n    if (smartLink) {\n      const {\n        start,\n        end,\n        pathToStart,\n        pathToEnd\n      } = smartLink; // second step: calculate a path avoiding hitting other elements\n\n      const simplifiedPath = this.pathFinding.calculateDynamicPath(routingMatrix, start, end, pathToStart, pathToEnd);\n      paths.push( //smooth: boolean, extraProps: any, id: string | number, firstPoint: PointModel, lastPoint: PointModel\n      this.generateLink(this.props.factory.generateDynamicPath(simplifiedPath), '0'));\n    }\n\n    return React.createElement(React.Fragment, null, paths);\n  }\n\n}\n\nexports.PathFindingLinkWidget = PathFindingLinkWidget;","map":{"version":3,"sources":["../../../src/link/PathFindingLinkWidget.tsx"],"names":[],"mappings":";;;;;;AAAA,MAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,MAAA,CAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,MAAA,aAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAGA,MAAA,yBAAA,GAAA,OAAA,CAAA,uCAAA,CAAA;;AAeA,MAAa,qBAAb,SAA2C,KAAK,CAAC,SAAjD,CAAkH;AAIjH,EAAA,WAAA,CAAY,KAAZ,EAA6C;AAC5C,UAAM,KAAN;AACA,SAAK,QAAL,GAAgB,EAAhB;AACA,SAAK,KAAL,GAAa;AACZ,MAAA,QAAQ,EAAE;AADE,KAAb;AAGA,SAAK,WAAL,GAAmB,IAAI,aAAA,CAAA,OAAJ,CAAgB,KAAK,KAAL,CAAW,OAA3B,CAAnB;AACA;;AAED,EAAA,kBAAkB,GAAA;AACjB,SAAK,KAAL,CAAW,IAAX,CAAgB,gBAAhB,CACC,KAAK,QAAL,CAAc,GAAd,CAAkB,GAAG,IAAG;AACvB,aAAO,GAAG,CAAC,OAAX;AACA,KAFD,CADD;AAKA;;AAED,EAAA,iBAAiB,GAAA;AAChB,SAAK,KAAL,CAAW,IAAX,CAAgB,gBAAhB,CACC,KAAK,QAAL,CAAc,GAAd,CAAkB,GAAG,IAAG;AACvB,aAAO,GAAG,CAAC,OAAX;AACA,KAFD,CADD;AAKA;;AAED,EAAA,oBAAoB,GAAA;AACnB,SAAK,KAAL,CAAW,IAAX,CAAgB,gBAAhB,CAAiC,EAAjC;AACA;;AAED,EAAA,YAAY,CAAC,IAAD,EAAe,EAAf,EAAkC;AAC7C,UAAM,GAAG,GAAG,KAAK,CAAC,SAAN,EAAZ;AACA,SAAK,QAAL,CAAc,IAAd,CAAmB,GAAnB;AACA,WACC,KAAA,CAAA,aAAA,CAAC,yBAAA,CAAA,wBAAD,EAAyB;AACxB,MAAA,GAAG,EAAE,QAAQ,EAAE,EADS;AAExB,MAAA,IAAI,EAAE,IAFkB;AAGxB,MAAA,QAAQ,EAAE,KAAK,KAAL,CAAW,QAHG;AAIxB,MAAA,aAAa,EAAE,KAAK,KAAL,CAAW,aAJF;AAKxB,MAAA,OAAO,EAAE,KAAK,KAAL,CAAW,aAAX,CAAyB,iBAAzB,CAA2C,KAAK,KAAL,CAAW,IAAtD,CALe;AAMxB,MAAA,IAAI,EAAE,KAAK,KAAL,CAAW,IANO;AAOxB,MAAA,UAAU,EAAE,GAPY;AAQxB,MAAA,WAAW,EAAE,QAAQ,IAAG;AACvB,aAAK,QAAL,CAAc;AAAE,UAAA,QAAQ,EAAE;AAAZ,SAAd;AACA,OAVuB;AAWxB,MAAA,MAAM,EAAE;AAXgB,KAAzB,CADD;AAeA;;AAED,EAAA,MAAM,GAAA;AACL,SAAK,QAAL,GAAgB,EAAhB,CADK,CAEL;;AACA,QAAI,MAAM,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,SAAhB,EAAb;AACA,QAAI,KAAK,GAAG,EAAZ,CAJK,CAML;;AACA,UAAM,gBAAgB,GAAG,KAAK,WAAL,CAAiB,mBAAjB,CAAqC,CAAC,CAAC,KAAF,CAAQ,MAAR,CAArC,EAAsD,CAAC,CAAC,IAAF,CAAO,MAAP,CAAtD,CAAzB;AAEA,UAAM,aAAa,GAAG,KAAK,KAAL,CAAW,OAAX,CAAmB,gBAAnB,EAAtB,CATK,CAUL;AACA;;AACA,UAAM,SAAS,GAAG,KAAK,WAAL,CAAiB,2BAAjB,CAA6C,aAA7C,EAA4D,gBAA5D,CAAlB;;AACA,QAAI,SAAJ,EAAe;AACd,YAAM;AAAE,QAAA,KAAF;AAAS,QAAA,GAAT;AAAc,QAAA,WAAd;AAA2B,QAAA;AAA3B,UAAyC,SAA/C,CADc,CAGd;;AACA,YAAM,cAAc,GAAG,KAAK,WAAL,CAAiB,oBAAjB,CAAsC,aAAtC,EAAqD,KAArD,EAA4D,GAA5D,EAAiE,WAAjE,EAA8E,SAA9E,CAAvB;AAEA,MAAA,KAAK,CAAC,IAAN,EACC;AACA,WAAK,YAAL,CAAkB,KAAK,KAAL,CAAW,OAAX,CAAmB,mBAAnB,CAAuC,cAAvC,CAAlB,EAA0E,GAA1E,CAFD;AAIA;;AACD,WAAO,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EAAG,KAAH,CAAP;AACA;;AA9EgH;;AAAlH,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst React = require(\"react\");\nconst _ = require(\"lodash\");\nconst PathFinding_1 = require(\"../engine/PathFinding\");\nconst react_diagrams_defaults_1 = require(\"@projectstorm/react-diagrams-defaults\");\nclass PathFindingLinkWidget extends React.Component {\n    constructor(props) {\n        super(props);\n        this.refPaths = [];\n        this.state = {\n            selected: false\n        };\n        this.pathFinding = new PathFinding_1.default(this.props.factory);\n    }\n    componentDidUpdate() {\n        this.props.link.setRenderedPaths(this.refPaths.map(ref => {\n            return ref.current;\n        }));\n    }\n    componentDidMount() {\n        this.props.link.setRenderedPaths(this.refPaths.map(ref => {\n            return ref.current;\n        }));\n    }\n    componentWillUnmount() {\n        this.props.link.setRenderedPaths([]);\n    }\n    generateLink(path, id) {\n        const ref = React.createRef();\n        this.refPaths.push(ref);\n        return (React.createElement(react_diagrams_defaults_1.DefaultLinkSegmentWidget, { key: `link-${id}`, path: path, selected: this.state.selected, diagramEngine: this.props.diagramEngine, factory: this.props.diagramEngine.getFactoryForLink(this.props.link), link: this.props.link, forwardRef: ref, onSelection: selected => {\n                this.setState({ selected: selected });\n            }, extras: {} }));\n    }\n    render() {\n        this.refPaths = [];\n        //ensure id is present for all points on the path\n        var points = this.props.link.getPoints();\n        var paths = [];\n        // first step: calculate a direct path between the points being linked\n        const directPathCoords = this.pathFinding.calculateDirectPath(_.first(points), _.last(points));\n        const routingMatrix = this.props.factory.getRoutingMatrix();\n        // now we need to extract, from the routing matrix, the very first walkable points\n        // so they can be used as origin and destination of the link to be created\n        const smartLink = this.pathFinding.calculateLinkStartEndCoords(routingMatrix, directPathCoords);\n        if (smartLink) {\n            const { start, end, pathToStart, pathToEnd } = smartLink;\n            // second step: calculate a path avoiding hitting other elements\n            const simplifiedPath = this.pathFinding.calculateDynamicPath(routingMatrix, start, end, pathToStart, pathToEnd);\n            paths.push(\n            //smooth: boolean, extraProps: any, id: string | number, firstPoint: PointModel, lastPoint: PointModel\n            this.generateLink(this.props.factory.generateDynamicPath(simplifiedPath), '0'));\n        }\n        return React.createElement(React.Fragment, null, paths);\n    }\n}\nexports.PathFindingLinkWidget = PathFindingLinkWidget;\n//# sourceMappingURL=PathFindingLinkWidget.js.map"]},"metadata":{},"sourceType":"script"}