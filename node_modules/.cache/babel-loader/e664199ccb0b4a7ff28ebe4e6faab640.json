{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst LinkModel_1 = require(\"../entities/link/LinkModel\");\n\nconst NodeModel_1 = require(\"../entities/node/NodeModel\");\n\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\n\nconst NodeLayerModel_1 = require(\"../entities/node-layer/NodeLayerModel\");\n\nconst LinkLayerModel_1 = require(\"../entities/link-layer/LinkLayerModel\");\n\nclass DiagramModel extends react_canvas_core_1.CanvasModel {\n  constructor(options = {}) {\n    super(options);\n    this.addLayer(new LinkLayerModel_1.LinkLayerModel());\n    this.addLayer(new NodeLayerModel_1.NodeLayerModel());\n  }\n\n  deserialize(event) {\n    this.layers = [];\n    super.deserialize(event);\n  }\n\n  addLayer(layer) {\n    super.addLayer(layer);\n\n    if (layer instanceof NodeLayerModel_1.NodeLayerModel) {\n      this.activeNodeLayer = layer;\n    }\n\n    if (layer instanceof LinkLayerModel_1.LinkLayerModel) {\n      this.activeLinkLayer = layer;\n    }\n  }\n\n  getLinkLayers() {\n    return _.filter(this.layers, layer => {\n      return layer instanceof LinkLayerModel_1.LinkLayerModel;\n    });\n  }\n\n  getNodeLayers() {\n    return _.filter(this.layers, layer => {\n      return layer instanceof NodeLayerModel_1.NodeLayerModel;\n    });\n  }\n\n  getActiveNodeLayer() {\n    if (!this.activeNodeLayer) {\n      const layers = this.getNodeLayers();\n\n      if (layers.length === 0) {\n        this.addLayer(new NodeLayerModel_1.NodeLayerModel());\n      } else {\n        this.activeNodeLayer = layers[0];\n      }\n    }\n\n    return this.activeNodeLayer;\n  }\n\n  getActiveLinkLayer() {\n    if (!this.activeLinkLayer) {\n      const layers = this.getLinkLayers();\n\n      if (layers.length === 0) {\n        this.addLayer(new NodeLayerModel_1.NodeLayerModel());\n      } else {\n        this.activeLinkLayer = layers[0];\n      }\n    }\n\n    return this.activeLinkLayer;\n  }\n\n  getNode(node) {\n    for (const layer of this.getNodeLayers()) {\n      const model = layer.getModel(node);\n\n      if (model) {\n        return model;\n      }\n    }\n  }\n\n  getLink(link) {\n    for (const layer of this.getLinkLayers()) {\n      const model = layer.getModel(link);\n\n      if (model) {\n        return model;\n      }\n    }\n  }\n\n  addAll(...models) {\n    _.forEach(models, model => {\n      if (model instanceof LinkModel_1.LinkModel) {\n        this.addLink(model);\n      } else if (model instanceof NodeModel_1.NodeModel) {\n        this.addNode(model);\n      }\n    });\n\n    return models;\n  }\n\n  addLink(link) {\n    this.getActiveLinkLayer().addModel(link);\n    this.fireEvent({\n      link,\n      isCreated: true\n    }, 'linksUpdated');\n    return link;\n  }\n\n  addNode(node) {\n    this.getActiveNodeLayer().addModel(node);\n    this.fireEvent({\n      node,\n      isCreated: true\n    }, 'nodesUpdated');\n    return node;\n  }\n\n  removeLink(link) {\n    const removed = _.some(this.getLinkLayers(), layer => {\n      return layer.removeModel(link);\n    });\n\n    if (removed) {\n      this.fireEvent({\n        link,\n        isCreated: false\n      }, 'linksUpdated');\n    }\n  }\n\n  removeNode(node) {\n    const removed = _.some(this.getNodeLayers(), layer => {\n      return layer.removeModel(node);\n    });\n\n    if (removed) {\n      this.fireEvent({\n        node,\n        isCreated: false\n      }, 'nodesUpdated');\n    }\n  }\n\n  getLinks() {\n    return _.flatMap(this.getLinkLayers(), layer => {\n      return _.values(layer.getModels());\n    });\n  }\n\n  getNodes() {\n    return _.flatMap(this.getNodeLayers(), layer => {\n      return _.values(layer.getModels());\n    });\n  }\n\n}\n\nexports.DiagramModel = DiagramModel;","map":{"version":3,"sources":["../../../src/models/DiagramModel.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst LinkModel_1 = require(\"../entities/link/LinkModel\");\nconst NodeModel_1 = require(\"../entities/node/NodeModel\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nconst NodeLayerModel_1 = require(\"../entities/node-layer/NodeLayerModel\");\nconst LinkLayerModel_1 = require(\"../entities/link-layer/LinkLayerModel\");\nclass DiagramModel extends react_canvas_core_1.CanvasModel {\n    constructor(options = {}) {\n        super(options);\n        this.addLayer(new LinkLayerModel_1.LinkLayerModel());\n        this.addLayer(new NodeLayerModel_1.NodeLayerModel());\n    }\n    deserialize(event) {\n        this.layers = [];\n        super.deserialize(event);\n    }\n    addLayer(layer) {\n        super.addLayer(layer);\n        if (layer instanceof NodeLayerModel_1.NodeLayerModel) {\n            this.activeNodeLayer = layer;\n        }\n        if (layer instanceof LinkLayerModel_1.LinkLayerModel) {\n            this.activeLinkLayer = layer;\n        }\n    }\n    getLinkLayers() {\n        return _.filter(this.layers, layer => {\n            return layer instanceof LinkLayerModel_1.LinkLayerModel;\n        });\n    }\n    getNodeLayers() {\n        return _.filter(this.layers, layer => {\n            return layer instanceof NodeLayerModel_1.NodeLayerModel;\n        });\n    }\n    getActiveNodeLayer() {\n        if (!this.activeNodeLayer) {\n            const layers = this.getNodeLayers();\n            if (layers.length === 0) {\n                this.addLayer(new NodeLayerModel_1.NodeLayerModel());\n            }\n            else {\n                this.activeNodeLayer = layers[0];\n            }\n        }\n        return this.activeNodeLayer;\n    }\n    getActiveLinkLayer() {\n        if (!this.activeLinkLayer) {\n            const layers = this.getLinkLayers();\n            if (layers.length === 0) {\n                this.addLayer(new NodeLayerModel_1.NodeLayerModel());\n            }\n            else {\n                this.activeLinkLayer = layers[0];\n            }\n        }\n        return this.activeLinkLayer;\n    }\n    getNode(node) {\n        for (const layer of this.getNodeLayers()) {\n            const model = layer.getModel(node);\n            if (model) {\n                return model;\n            }\n        }\n    }\n    getLink(link) {\n        for (const layer of this.getLinkLayers()) {\n            const model = layer.getModel(link);\n            if (model) {\n                return model;\n            }\n        }\n    }\n    addAll(...models) {\n        _.forEach(models, model => {\n            if (model instanceof LinkModel_1.LinkModel) {\n                this.addLink(model);\n            }\n            else if (model instanceof NodeModel_1.NodeModel) {\n                this.addNode(model);\n            }\n        });\n        return models;\n    }\n    addLink(link) {\n        this.getActiveLinkLayer().addModel(link);\n        this.fireEvent({\n            link,\n            isCreated: true\n        }, 'linksUpdated');\n        return link;\n    }\n    addNode(node) {\n        this.getActiveNodeLayer().addModel(node);\n        this.fireEvent({ node, isCreated: true }, 'nodesUpdated');\n        return node;\n    }\n    removeLink(link) {\n        const removed = _.some(this.getLinkLayers(), layer => {\n            return layer.removeModel(link);\n        });\n        if (removed) {\n            this.fireEvent({ link, isCreated: false }, 'linksUpdated');\n        }\n    }\n    removeNode(node) {\n        const removed = _.some(this.getNodeLayers(), layer => {\n            return layer.removeModel(node);\n        });\n        if (removed) {\n            this.fireEvent({ node, isCreated: false }, 'nodesUpdated');\n        }\n    }\n    getLinks() {\n        return _.flatMap(this.getLinkLayers(), layer => {\n            return _.values(layer.getModels());\n        });\n    }\n    getNodes() {\n        return _.flatMap(this.getNodeLayers(), layer => {\n            return _.values(layer.getModels());\n        });\n    }\n}\nexports.DiagramModel = DiagramModel;\n//# sourceMappingURL=DiagramModel.js.map"]},"metadata":{},"sourceType":"script"}