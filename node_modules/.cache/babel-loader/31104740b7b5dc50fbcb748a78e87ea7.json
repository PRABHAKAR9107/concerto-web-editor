{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\n\nconst PortModel_1 = require(\"../entities/port/PortModel\");\n\nclass DragNewLinkState extends react_canvas_core_1.AbstractDisplacementState {\n  constructor(options = {}) {\n    super({\n      name: 'drag-new-link'\n    });\n    this.config = Object.assign({\n      allowLooseLinks: true,\n      allowLinksFromLockedPorts: false\n    }, options);\n    this.registerAction(new react_canvas_core_1.Action({\n      type: react_canvas_core_1.InputType.MOUSE_DOWN,\n      fire: event => {\n        this.port = this.engine.getMouseElement(event.event);\n\n        if (!this.config.allowLinksFromLockedPorts && this.port.isLocked()) {\n          this.eject();\n          return;\n        }\n\n        this.link = this.port.createLinkModel(); // if no link is given, just eject the state\n\n        if (!this.link) {\n          this.eject();\n          return;\n        }\n\n        this.link.setSelected(true);\n        this.link.setSourcePort(this.port);\n        this.engine.getModel().addLink(this.link);\n        this.port.reportPosition();\n      }\n    }));\n    this.registerAction(new react_canvas_core_1.Action({\n      type: react_canvas_core_1.InputType.MOUSE_UP,\n      fire: event => {\n        const model = this.engine.getMouseElement(event.event); // check to see if we connected to a new port\n\n        if (model instanceof PortModel_1.PortModel) {\n          if (this.port.canLinkToPort(model)) {\n            this.link.setTargetPort(model);\n            model.reportPosition();\n            this.engine.repaintCanvas();\n            return;\n          }\n        }\n\n        if (this.isNearbySourcePort(event.event) || !this.config.allowLooseLinks) {\n          this.link.remove();\n          this.engine.repaintCanvas();\n        }\n      }\n    }));\n  }\n  /**\n   * Checks whether the mouse event appears to happen in proximity of the link's source port\n   * @param event\n   */\n\n\n  isNearbySourcePort({\n    clientX,\n    clientY\n  }) {\n    const sourcePort = this.link.getSourcePort();\n    const sourcePortPosition = this.link.getSourcePort().getPosition();\n    return clientX >= sourcePortPosition.x && clientX <= sourcePortPosition.x + sourcePort.width && clientY >= sourcePortPosition.y && clientY <= sourcePortPosition.y + sourcePort.height;\n  }\n  /**\n   * Calculates the link's far-end point position on mouse move.\n   * In order to be as precise as possible the mouse initialXRelative & initialYRelative are taken into account as well\n   * as the possible engine offset\n   */\n\n\n  fireMouseMoved(event) {\n    const portPos = this.port.getPosition();\n    const zoomLevelPercentage = this.engine.getModel().getZoomLevel() / 100;\n    const engineOffsetX = this.engine.getModel().getOffsetX() / zoomLevelPercentage;\n    const engineOffsetY = this.engine.getModel().getOffsetY() / zoomLevelPercentage;\n    const initialXRelative = this.initialXRelative / zoomLevelPercentage;\n    const initialYRelative = this.initialYRelative / zoomLevelPercentage;\n    const linkNextX = portPos.x - engineOffsetX + (initialXRelative - portPos.x) + event.virtualDisplacementX;\n    const linkNextY = portPos.y - engineOffsetY + (initialYRelative - portPos.y) + event.virtualDisplacementY;\n    this.link.getLastPoint().setPosition(linkNextX, linkNextY);\n    this.engine.repaintCanvas();\n  }\n\n}\n\nexports.DragNewLinkState = DragNewLinkState;","map":{"version":3,"sources":["../../../src/states/DragNewLinkState.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nconst PortModel_1 = require(\"../entities/port/PortModel\");\nclass DragNewLinkState extends react_canvas_core_1.AbstractDisplacementState {\n    constructor(options = {}) {\n        super({ name: 'drag-new-link' });\n        this.config = Object.assign({ allowLooseLinks: true, allowLinksFromLockedPorts: false }, options);\n        this.registerAction(new react_canvas_core_1.Action({\n            type: react_canvas_core_1.InputType.MOUSE_DOWN,\n            fire: (event) => {\n                this.port = this.engine.getMouseElement(event.event);\n                if (!this.config.allowLinksFromLockedPorts && this.port.isLocked()) {\n                    this.eject();\n                    return;\n                }\n                this.link = this.port.createLinkModel();\n                // if no link is given, just eject the state\n                if (!this.link) {\n                    this.eject();\n                    return;\n                }\n                this.link.setSelected(true);\n                this.link.setSourcePort(this.port);\n                this.engine.getModel().addLink(this.link);\n                this.port.reportPosition();\n            }\n        }));\n        this.registerAction(new react_canvas_core_1.Action({\n            type: react_canvas_core_1.InputType.MOUSE_UP,\n            fire: (event) => {\n                const model = this.engine.getMouseElement(event.event);\n                // check to see if we connected to a new port\n                if (model instanceof PortModel_1.PortModel) {\n                    if (this.port.canLinkToPort(model)) {\n                        this.link.setTargetPort(model);\n                        model.reportPosition();\n                        this.engine.repaintCanvas();\n                        return;\n                    }\n                }\n                if (this.isNearbySourcePort(event.event) || !this.config.allowLooseLinks) {\n                    this.link.remove();\n                    this.engine.repaintCanvas();\n                }\n            }\n        }));\n    }\n    /**\n     * Checks whether the mouse event appears to happen in proximity of the link's source port\n     * @param event\n     */\n    isNearbySourcePort({ clientX, clientY }) {\n        const sourcePort = this.link.getSourcePort();\n        const sourcePortPosition = this.link.getSourcePort().getPosition();\n        return (clientX >= sourcePortPosition.x &&\n            clientX <= sourcePortPosition.x + sourcePort.width &&\n            (clientY >= sourcePortPosition.y && clientY <= sourcePortPosition.y + sourcePort.height));\n    }\n    /**\n     * Calculates the link's far-end point position on mouse move.\n     * In order to be as precise as possible the mouse initialXRelative & initialYRelative are taken into account as well\n     * as the possible engine offset\n     */\n    fireMouseMoved(event) {\n        const portPos = this.port.getPosition();\n        const zoomLevelPercentage = this.engine.getModel().getZoomLevel() / 100;\n        const engineOffsetX = this.engine.getModel().getOffsetX() / zoomLevelPercentage;\n        const engineOffsetY = this.engine.getModel().getOffsetY() / zoomLevelPercentage;\n        const initialXRelative = this.initialXRelative / zoomLevelPercentage;\n        const initialYRelative = this.initialYRelative / zoomLevelPercentage;\n        const linkNextX = portPos.x - engineOffsetX + (initialXRelative - portPos.x) + event.virtualDisplacementX;\n        const linkNextY = portPos.y - engineOffsetY + (initialYRelative - portPos.y) + event.virtualDisplacementY;\n        this.link.getLastPoint().setPosition(linkNextX, linkNextY);\n        this.engine.repaintCanvas();\n    }\n}\nexports.DragNewLinkState = DragNewLinkState;\n//# sourceMappingURL=DragNewLinkState.js.map"]},"metadata":{},"sourceType":"script"}