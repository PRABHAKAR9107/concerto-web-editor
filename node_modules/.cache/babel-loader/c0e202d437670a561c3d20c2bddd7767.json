{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = require(\"react\");\n\nconst react_diagrams_core_1 = require(\"@projectstorm/react-diagrams-core\");\n\nconst react_diagrams_defaults_1 = require(\"@projectstorm/react-diagrams-defaults\");\n\nconst geometry_1 = require(\"@projectstorm/geometry\");\n\nclass RightAngleLinkWidget extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleMove = function (event) {\n      this.draggingEvent(event, this.dragging_index);\n    }.bind(this);\n\n    this.handleUp = function (event) {\n      // Unregister handlers to avoid multiple event handlers for other links\n      this.setState({\n        canDrag: false,\n        selected: false\n      });\n      window.removeEventListener('mousemove', this.handleMove);\n      window.removeEventListener('mouseup', this.handleUp);\n    }.bind(this);\n\n    this.refPaths = [];\n    this.state = {\n      selected: false,\n      canDrag: false\n    };\n    this.dragging_index = 0;\n  }\n\n  componentDidUpdate() {\n    this.props.link.setRenderedPaths(this.refPaths.map(ref => {\n      return ref.current;\n    }));\n  }\n\n  componentDidMount() {\n    this.props.link.setRenderedPaths(this.refPaths.map(ref => {\n      return ref.current;\n    }));\n  }\n\n  componentWillUnmount() {\n    this.props.link.setRenderedPaths([]);\n  }\n\n  generateLink(path, extraProps, id) {\n    const ref = React.createRef();\n    this.refPaths.push(ref);\n    return React.createElement(react_diagrams_defaults_1.DefaultLinkSegmentWidget, {\n      key: `link-${id}`,\n      path: path,\n      selected: this.state.selected,\n      diagramEngine: this.props.diagramEngine,\n      factory: this.props.diagramEngine.getFactoryForLink(this.props.link),\n      link: this.props.link,\n      forwardRef: ref,\n      onSelection: selected => {\n        this.setState({\n          selected: selected\n        });\n      },\n      extras: extraProps\n    });\n  }\n\n  calculatePositions(points, event, index, coordinate) {\n    // If path is first or last add another point to keep node port on its position\n    if (index === 0) {\n      let point = new react_diagrams_core_1.PointModel({\n        link: this.props.link,\n        position: new geometry_1.Point(points[index].getX(), points[index].getY())\n      });\n      this.props.link.addPoint(point, index);\n      this.dragging_index++;\n      return;\n    } else if (index === points.length - 2) {\n      let point = new react_diagrams_core_1.PointModel({\n        link: this.props.link,\n        position: new geometry_1.Point(points[index + 1].getX(), points[index + 1].getY())\n      });\n      this.props.link.addPoint(point, index + 1);\n      return;\n    } // Merge two points if it is not close to node port and close to each other\n\n\n    if (index - 2 > 0) {\n      let _points = {\n        [index - 2]: points[index - 2].getPosition(),\n        [index + 1]: points[index + 1].getPosition(),\n        [index - 1]: points[index - 1].getPosition()\n      };\n\n      if (Math.abs(_points[index - 1][coordinate] - _points[index + 1][coordinate]) < 5) {\n        _points[index - 2][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n        _points[index + 1][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n        points[index - 2].setPosition(_points[index - 2]);\n        points[index + 1].setPosition(_points[index + 1]);\n        points[index - 1].remove();\n        points[index - 1].remove();\n        this.dragging_index--;\n        this.dragging_index--;\n        return;\n      }\n    } // Merge two points if it is not close to node port\n\n\n    if (index + 2 < points.length - 2) {\n      let _points = {\n        [index + 3]: points[index + 3].getPosition(),\n        [index + 2]: points[index + 2].getPosition(),\n        [index + 1]: points[index + 1].getPosition(),\n        [index]: points[index].getPosition()\n      };\n\n      if (Math.abs(_points[index + 1][coordinate] - _points[index + 2][coordinate]) < 5) {\n        _points[index][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n        _points[index + 3][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n        points[index].setPosition(_points[index]);\n        points[index + 3].setPosition(_points[index + 3]);\n        points[index + 1].remove();\n        points[index + 1].remove();\n        return;\n      }\n    } // If no condition above handled then just update path points position\n\n\n    let _points = {\n      [index]: points[index].getPosition(),\n      [index + 1]: points[index + 1].getPosition()\n    };\n    _points[index][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n    _points[index + 1][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n    points[index].setPosition(_points[index]);\n    points[index + 1].setPosition(_points[index + 1]);\n  }\n\n  draggingEvent(event, index) {\n    let points = this.props.link.getPoints(); // get moving difference. Index + 1 will work because links indexes has\n    // length = points.lenght - 1\n\n    let dx = Math.abs(points[index].getX() - points[index + 1].getX());\n    let dy = Math.abs(points[index].getY() - points[index + 1].getY()); // moving with y direction\n\n    if (dx === 0) {\n      this.calculatePositions(points, event, index, 'x');\n    } else if (dy === 0) {\n      this.calculatePositions(points, event, index, 'y');\n    }\n\n    this.props.link.setFirstAndLastPathsDirection();\n  }\n\n  render() {\n    //ensure id is present for all points on the path\n    let points = this.props.link.getPoints();\n    let paths = []; // Get points based on link orientation\n\n    let pointLeft = points[0];\n    let pointRight = points[points.length - 1];\n    let hadToSwitch = false;\n\n    if (pointLeft.getX() > pointRight.getX()) {\n      pointLeft = points[points.length - 1];\n      pointRight = points[0];\n      hadToSwitch = true;\n    }\n\n    let dy = Math.abs(points[0].getY() - points[points.length - 1].getY()); // When new link add one middle point to get everywhere 90° angle\n\n    if (this.props.link.getTargetPort() === null && points.length === 2) {\n      [...Array(2)].forEach(item => {\n        this.props.link.addPoint(new react_diagrams_core_1.PointModel({\n          link: this.props.link,\n          position: new geometry_1.Point(pointLeft.getX(), pointRight.getY())\n        }), 1);\n      });\n      this.props.link.setManuallyFirstAndLastPathsDirection(true, true);\n    } // When new link is moving and not connected to target port move with middle point\n    // TODO: @DanielLazarLDAPPS This will be better to update in DragNewLinkState\n    //  in function fireMouseMoved to avoid calling this unexpectedly e.g. after Deserialize\n    else if (this.props.link.getTargetPort() === null && this.props.link.getSourcePort() !== null) {\n        points[1].setPosition(pointRight.getX() + (pointLeft.getX() - pointRight.getX()) / 2, !hadToSwitch ? pointLeft.getY() : pointRight.getY());\n        points[2].setPosition(pointRight.getX() + (pointLeft.getX() - pointRight.getX()) / 2, !hadToSwitch ? pointRight.getY() : pointLeft.getY());\n      } // Render was called but link is not moved but user.\n      // Node is moved and in this case fix coordinates to get 90° angle.\n      // For loop just for first and last path\n      else if (!this.state.canDrag && points.length > 2) {\n          // Those points and its position only will be moved\n          for (let i = 1; i < points.length; i += points.length - 2) {\n            if (i - 1 === 0) {\n              if (this.props.link.getFirstPathXdirection()) {\n                points[i].setPosition(points[i].getX(), points[i - 1].getY());\n              } else {\n                points[i].setPosition(points[i - 1].getX(), points[i].getY());\n              }\n            } else {\n              if (this.props.link.getLastPathXdirection()) {\n                points[i - 1].setPosition(points[i - 1].getX(), points[i].getY());\n              } else {\n                points[i - 1].setPosition(points[i].getX(), points[i - 1].getY());\n              }\n            }\n          }\n        } // If there is existing link which has two points add one\n    // NOTE: It doesn't matter if check is for dy or dx\n\n\n    if (points.length === 2 && dy !== 0 && !this.state.canDrag) {\n      this.props.link.addPoint(new react_diagrams_core_1.PointModel({\n        link: this.props.link,\n        position: new geometry_1.Point(pointLeft.getX(), pointRight.getY())\n      }));\n    }\n\n    for (let j = 0; j < points.length - 1; j++) {\n      paths.push(this.generateLink(react_diagrams_core_1.LinkWidget.generateLinePath(points[j], points[j + 1]), {\n        'data-linkid': this.props.link.getID(),\n        'data-point': j,\n        onMouseDown: event => {\n          if (event.button === 0) {\n            this.setState({\n              canDrag: true\n            });\n            this.dragging_index = j; // Register mouse move event to track mouse position\n            // On mouse up these events are unregistered check \"this.handleUp\"\n\n            window.addEventListener('mousemove', this.handleMove);\n            window.addEventListener('mouseup', this.handleUp);\n          }\n        },\n        onMouseEnter: event => {\n          this.setState({\n            selected: true\n          });\n          this.props.link.lastHoverIndexOfPath = j;\n        }\n      }, j));\n    }\n\n    this.refPaths = [];\n    return React.createElement(\"g\", {\n      \"data-default-link-test\": this.props.link.getOptions().testName\n    }, paths);\n  }\n\n}\n\nRightAngleLinkWidget.defaultProps = {\n  color: 'red',\n  width: 3,\n  link: null,\n  smooth: false,\n  diagramEngine: null,\n  factory: null\n};\nexports.RightAngleLinkWidget = RightAngleLinkWidget;","map":{"version":3,"sources":["../../../src/link/RightAngleLinkWidget.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst React = require(\"react\");\nconst react_diagrams_core_1 = require(\"@projectstorm/react-diagrams-core\");\nconst react_diagrams_defaults_1 = require(\"@projectstorm/react-diagrams-defaults\");\nconst geometry_1 = require(\"@projectstorm/geometry\");\nclass RightAngleLinkWidget extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleMove = function (event) {\n            this.draggingEvent(event, this.dragging_index);\n        }.bind(this);\n        this.handleUp = function (event) {\n            // Unregister handlers to avoid multiple event handlers for other links\n            this.setState({ canDrag: false, selected: false });\n            window.removeEventListener('mousemove', this.handleMove);\n            window.removeEventListener('mouseup', this.handleUp);\n        }.bind(this);\n        this.refPaths = [];\n        this.state = {\n            selected: false,\n            canDrag: false\n        };\n        this.dragging_index = 0;\n    }\n    componentDidUpdate() {\n        this.props.link.setRenderedPaths(this.refPaths.map(ref => {\n            return ref.current;\n        }));\n    }\n    componentDidMount() {\n        this.props.link.setRenderedPaths(this.refPaths.map(ref => {\n            return ref.current;\n        }));\n    }\n    componentWillUnmount() {\n        this.props.link.setRenderedPaths([]);\n    }\n    generateLink(path, extraProps, id) {\n        const ref = React.createRef();\n        this.refPaths.push(ref);\n        return (React.createElement(react_diagrams_defaults_1.DefaultLinkSegmentWidget, { key: `link-${id}`, path: path, selected: this.state.selected, diagramEngine: this.props.diagramEngine, factory: this.props.diagramEngine.getFactoryForLink(this.props.link), link: this.props.link, forwardRef: ref, onSelection: selected => {\n                this.setState({ selected: selected });\n            }, extras: extraProps }));\n    }\n    calculatePositions(points, event, index, coordinate) {\n        // If path is first or last add another point to keep node port on its position\n        if (index === 0) {\n            let point = new react_diagrams_core_1.PointModel({\n                link: this.props.link,\n                position: new geometry_1.Point(points[index].getX(), points[index].getY())\n            });\n            this.props.link.addPoint(point, index);\n            this.dragging_index++;\n            return;\n        }\n        else if (index === points.length - 2) {\n            let point = new react_diagrams_core_1.PointModel({\n                link: this.props.link,\n                position: new geometry_1.Point(points[index + 1].getX(), points[index + 1].getY())\n            });\n            this.props.link.addPoint(point, index + 1);\n            return;\n        }\n        // Merge two points if it is not close to node port and close to each other\n        if (index - 2 > 0) {\n            let _points = {\n                [index - 2]: points[index - 2].getPosition(),\n                [index + 1]: points[index + 1].getPosition(),\n                [index - 1]: points[index - 1].getPosition()\n            };\n            if (Math.abs(_points[index - 1][coordinate] - _points[index + 1][coordinate]) < 5) {\n                _points[index - 2][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n                _points[index + 1][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n                points[index - 2].setPosition(_points[index - 2]);\n                points[index + 1].setPosition(_points[index + 1]);\n                points[index - 1].remove();\n                points[index - 1].remove();\n                this.dragging_index--;\n                this.dragging_index--;\n                return;\n            }\n        }\n        // Merge two points if it is not close to node port\n        if (index + 2 < points.length - 2) {\n            let _points = {\n                [index + 3]: points[index + 3].getPosition(),\n                [index + 2]: points[index + 2].getPosition(),\n                [index + 1]: points[index + 1].getPosition(),\n                [index]: points[index].getPosition()\n            };\n            if (Math.abs(_points[index + 1][coordinate] - _points[index + 2][coordinate]) < 5) {\n                _points[index][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n                _points[index + 3][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n                points[index].setPosition(_points[index]);\n                points[index + 3].setPosition(_points[index + 3]);\n                points[index + 1].remove();\n                points[index + 1].remove();\n                return;\n            }\n        }\n        // If no condition above handled then just update path points position\n        let _points = {\n            [index]: points[index].getPosition(),\n            [index + 1]: points[index + 1].getPosition()\n        };\n        _points[index][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n        _points[index + 1][coordinate] = this.props.diagramEngine.getRelativeMousePoint(event)[coordinate];\n        points[index].setPosition(_points[index]);\n        points[index + 1].setPosition(_points[index + 1]);\n    }\n    draggingEvent(event, index) {\n        let points = this.props.link.getPoints();\n        // get moving difference. Index + 1 will work because links indexes has\n        // length = points.lenght - 1\n        let dx = Math.abs(points[index].getX() - points[index + 1].getX());\n        let dy = Math.abs(points[index].getY() - points[index + 1].getY());\n        // moving with y direction\n        if (dx === 0) {\n            this.calculatePositions(points, event, index, 'x');\n        }\n        else if (dy === 0) {\n            this.calculatePositions(points, event, index, 'y');\n        }\n        this.props.link.setFirstAndLastPathsDirection();\n    }\n    render() {\n        //ensure id is present for all points on the path\n        let points = this.props.link.getPoints();\n        let paths = [];\n        // Get points based on link orientation\n        let pointLeft = points[0];\n        let pointRight = points[points.length - 1];\n        let hadToSwitch = false;\n        if (pointLeft.getX() > pointRight.getX()) {\n            pointLeft = points[points.length - 1];\n            pointRight = points[0];\n            hadToSwitch = true;\n        }\n        let dy = Math.abs(points[0].getY() - points[points.length - 1].getY());\n        // When new link add one middle point to get everywhere 90° angle\n        if (this.props.link.getTargetPort() === null && points.length === 2) {\n            [...Array(2)].forEach(item => {\n                this.props.link.addPoint(new react_diagrams_core_1.PointModel({\n                    link: this.props.link,\n                    position: new geometry_1.Point(pointLeft.getX(), pointRight.getY())\n                }), 1);\n            });\n            this.props.link.setManuallyFirstAndLastPathsDirection(true, true);\n        }\n        // When new link is moving and not connected to target port move with middle point\n        // TODO: @DanielLazarLDAPPS This will be better to update in DragNewLinkState\n        //  in function fireMouseMoved to avoid calling this unexpectedly e.g. after Deserialize\n        else if (this.props.link.getTargetPort() === null && this.props.link.getSourcePort() !== null) {\n            points[1].setPosition(pointRight.getX() + (pointLeft.getX() - pointRight.getX()) / 2, !hadToSwitch ? pointLeft.getY() : pointRight.getY());\n            points[2].setPosition(pointRight.getX() + (pointLeft.getX() - pointRight.getX()) / 2, !hadToSwitch ? pointRight.getY() : pointLeft.getY());\n        }\n        // Render was called but link is not moved but user.\n        // Node is moved and in this case fix coordinates to get 90° angle.\n        // For loop just for first and last path\n        else if (!this.state.canDrag && points.length > 2) {\n            // Those points and its position only will be moved\n            for (let i = 1; i < points.length; i += points.length - 2) {\n                if (i - 1 === 0) {\n                    if (this.props.link.getFirstPathXdirection()) {\n                        points[i].setPosition(points[i].getX(), points[i - 1].getY());\n                    }\n                    else {\n                        points[i].setPosition(points[i - 1].getX(), points[i].getY());\n                    }\n                }\n                else {\n                    if (this.props.link.getLastPathXdirection()) {\n                        points[i - 1].setPosition(points[i - 1].getX(), points[i].getY());\n                    }\n                    else {\n                        points[i - 1].setPosition(points[i].getX(), points[i - 1].getY());\n                    }\n                }\n            }\n        }\n        // If there is existing link which has two points add one\n        // NOTE: It doesn't matter if check is for dy or dx\n        if (points.length === 2 && dy !== 0 && !this.state.canDrag) {\n            this.props.link.addPoint(new react_diagrams_core_1.PointModel({\n                link: this.props.link,\n                position: new geometry_1.Point(pointLeft.getX(), pointRight.getY())\n            }));\n        }\n        for (let j = 0; j < points.length - 1; j++) {\n            paths.push(this.generateLink(react_diagrams_core_1.LinkWidget.generateLinePath(points[j], points[j + 1]), {\n                'data-linkid': this.props.link.getID(),\n                'data-point': j,\n                onMouseDown: (event) => {\n                    if (event.button === 0) {\n                        this.setState({ canDrag: true });\n                        this.dragging_index = j;\n                        // Register mouse move event to track mouse position\n                        // On mouse up these events are unregistered check \"this.handleUp\"\n                        window.addEventListener('mousemove', this.handleMove);\n                        window.addEventListener('mouseup', this.handleUp);\n                    }\n                },\n                onMouseEnter: (event) => {\n                    this.setState({ selected: true });\n                    this.props.link.lastHoverIndexOfPath = j;\n                }\n            }, j));\n        }\n        this.refPaths = [];\n        return React.createElement(\"g\", { \"data-default-link-test\": this.props.link.getOptions().testName }, paths);\n    }\n}\nRightAngleLinkWidget.defaultProps = {\n    color: 'red',\n    width: 3,\n    link: null,\n    smooth: false,\n    diagramEngine: null,\n    factory: null\n};\nexports.RightAngleLinkWidget = RightAngleLinkWidget;\n//# sourceMappingURL=RightAngleLinkWidget.js.map"]},"metadata":{},"sourceType":"script"}