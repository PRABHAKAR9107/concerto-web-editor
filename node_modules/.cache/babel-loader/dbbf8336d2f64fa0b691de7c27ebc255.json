{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst lodash_1 = require(\"lodash\");\n\nconst FactoryBank_1 = require(\"./core/FactoryBank\");\n\nconst BaseObserver_1 = require(\"./core/BaseObserver\");\n\nconst geometry_1 = require(\"@projectstorm/geometry\");\n\nconst ActionEventBus_1 = require(\"./core-actions/ActionEventBus\");\n\nconst ZoomCanvasAction_1 = require(\"./actions/ZoomCanvasAction\");\n\nconst DeleteItemsAction_1 = require(\"./actions/DeleteItemsAction\");\n\nconst StateMachine_1 = require(\"./core-state/StateMachine\");\n\nclass CanvasEngine extends BaseObserver_1.BaseObserver {\n  constructor(options = {}) {\n    super();\n    this.model = null;\n    this.eventBus = new ActionEventBus_1.ActionEventBus(this);\n    this.stateMachine = new StateMachine_1.StateMachine(this);\n    this.layerFactories = new FactoryBank_1.FactoryBank();\n    this.registerFactoryBank(this.layerFactories);\n    /**\n     * Overrides the standard options with the possible given options\n     */\n\n    this.options = Object.assign({\n      registerDefaultDeleteItemsAction: true,\n      registerDefaultZoomCanvasAction: true,\n      repaintDebounceMs: 0\n    }, options);\n\n    if (this.options.registerDefaultZoomCanvasAction === true) {\n      this.eventBus.registerAction(new ZoomCanvasAction_1.ZoomCanvasAction());\n    }\n\n    if (this.options.registerDefaultDeleteItemsAction === true) {\n      this.eventBus.registerAction(new DeleteItemsAction_1.DeleteItemsAction());\n    }\n  }\n\n  getStateMachine() {\n    return this.stateMachine;\n  }\n\n  getRelativeMousePoint(event) {\n    const point = this.getRelativePoint(event.clientX, event.clientY);\n    return new geometry_1.Point((point.x - this.model.getOffsetX()) / (this.model.getZoomLevel() / 100.0), (point.y - this.model.getOffsetY()) / (this.model.getZoomLevel() / 100.0));\n  }\n\n  getRelativePoint(x, y) {\n    const canvasRect = this.canvas.getBoundingClientRect();\n    return new geometry_1.Point(x - canvasRect.left, y - canvasRect.top);\n  }\n\n  registerFactoryBank(factory) {\n    factory.registerListener({\n      factoryAdded: event => {\n        event.factory.setDiagramEngine(this);\n      },\n      factoryRemoved: event => {\n        event.factory.setDiagramEngine(null);\n      }\n    });\n  }\n\n  getActionEventBus() {\n    return this.eventBus;\n  }\n\n  getLayerFactories() {\n    return this.layerFactories;\n  }\n\n  getFactoryForLayer(layer) {\n    if (typeof layer === 'string') {\n      return this.layerFactories.getFactory(layer);\n    }\n\n    return this.layerFactories.getFactory(layer.getType());\n  }\n\n  setModel(model) {\n    this.model = model;\n\n    if (this.canvas) {\n      requestAnimationFrame(() => {\n        this.repaintCanvas();\n      });\n    }\n  }\n\n  getModel() {\n    return this.model;\n  }\n\n  repaintCanvas(promise) {\n    const {\n      repaintDebounceMs\n    } = this.options;\n    /**\n     * The actual repaint function\n     */\n\n    const repaint = () => {\n      this.iterateListeners(listener => {\n        if (listener.repaintCanvas) {\n          listener.repaintCanvas();\n        }\n      });\n    }; // if the `repaintDebounceMs` option is > 0, then apply the debounce\n\n\n    let repaintFn = repaint;\n\n    if (repaintDebounceMs > 0) {\n      repaintFn = lodash_1.debounce(repaint, repaintDebounceMs);\n    }\n\n    if (promise) {\n      return new Promise(resolve => {\n        const l = this.registerListener({\n          rendered: () => {\n            resolve();\n            l.deregister();\n          }\n        });\n        repaintFn();\n      });\n    }\n\n    repaintFn();\n  }\n\n  setCanvas(canvas) {\n    if (this.canvas !== canvas) {\n      this.canvas = canvas;\n\n      if (canvas) {\n        this.fireEvent({}, 'canvasReady');\n      }\n    }\n  }\n\n  getCanvas() {\n    return this.canvas;\n  }\n\n  getMouseElement(event) {\n    return null;\n  }\n\n  zoomToFit() {\n    const xFactor = this.canvas.clientWidth / this.canvas.scrollWidth;\n    const yFactor = this.canvas.clientHeight / this.canvas.scrollHeight;\n    const zoomFactor = xFactor < yFactor ? xFactor : yFactor;\n    this.model.setZoomLevel(this.model.getZoomLevel() * zoomFactor);\n    this.model.setOffset(0, 0);\n    this.repaintCanvas();\n  }\n\n}\n\nexports.CanvasEngine = CanvasEngine;","map":{"version":3,"sources":["../../src/CanvasEngine.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lodash_1 = require(\"lodash\");\nconst FactoryBank_1 = require(\"./core/FactoryBank\");\nconst BaseObserver_1 = require(\"./core/BaseObserver\");\nconst geometry_1 = require(\"@projectstorm/geometry\");\nconst ActionEventBus_1 = require(\"./core-actions/ActionEventBus\");\nconst ZoomCanvasAction_1 = require(\"./actions/ZoomCanvasAction\");\nconst DeleteItemsAction_1 = require(\"./actions/DeleteItemsAction\");\nconst StateMachine_1 = require(\"./core-state/StateMachine\");\nclass CanvasEngine extends BaseObserver_1.BaseObserver {\n    constructor(options = {}) {\n        super();\n        this.model = null;\n        this.eventBus = new ActionEventBus_1.ActionEventBus(this);\n        this.stateMachine = new StateMachine_1.StateMachine(this);\n        this.layerFactories = new FactoryBank_1.FactoryBank();\n        this.registerFactoryBank(this.layerFactories);\n        /**\n         * Overrides the standard options with the possible given options\n         */\n        this.options = Object.assign({ registerDefaultDeleteItemsAction: true, registerDefaultZoomCanvasAction: true, repaintDebounceMs: 0 }, options);\n        if (this.options.registerDefaultZoomCanvasAction === true) {\n            this.eventBus.registerAction(new ZoomCanvasAction_1.ZoomCanvasAction());\n        }\n        if (this.options.registerDefaultDeleteItemsAction === true) {\n            this.eventBus.registerAction(new DeleteItemsAction_1.DeleteItemsAction());\n        }\n    }\n    getStateMachine() {\n        return this.stateMachine;\n    }\n    getRelativeMousePoint(event) {\n        const point = this.getRelativePoint(event.clientX, event.clientY);\n        return new geometry_1.Point((point.x - this.model.getOffsetX()) / (this.model.getZoomLevel() / 100.0), (point.y - this.model.getOffsetY()) / (this.model.getZoomLevel() / 100.0));\n    }\n    getRelativePoint(x, y) {\n        const canvasRect = this.canvas.getBoundingClientRect();\n        return new geometry_1.Point(x - canvasRect.left, y - canvasRect.top);\n    }\n    registerFactoryBank(factory) {\n        factory.registerListener({\n            factoryAdded: event => {\n                event.factory.setDiagramEngine(this);\n            },\n            factoryRemoved: event => {\n                event.factory.setDiagramEngine(null);\n            }\n        });\n    }\n    getActionEventBus() {\n        return this.eventBus;\n    }\n    getLayerFactories() {\n        return this.layerFactories;\n    }\n    getFactoryForLayer(layer) {\n        if (typeof layer === 'string') {\n            return this.layerFactories.getFactory(layer);\n        }\n        return this.layerFactories.getFactory(layer.getType());\n    }\n    setModel(model) {\n        this.model = model;\n        if (this.canvas) {\n            requestAnimationFrame(() => {\n                this.repaintCanvas();\n            });\n        }\n    }\n    getModel() {\n        return this.model;\n    }\n    repaintCanvas(promise) {\n        const { repaintDebounceMs } = this.options;\n        /**\n         * The actual repaint function\n         */\n        const repaint = () => {\n            this.iterateListeners(listener => {\n                if (listener.repaintCanvas) {\n                    listener.repaintCanvas();\n                }\n            });\n        };\n        // if the `repaintDebounceMs` option is > 0, then apply the debounce\n        let repaintFn = repaint;\n        if (repaintDebounceMs > 0) {\n            repaintFn = lodash_1.debounce(repaint, repaintDebounceMs);\n        }\n        if (promise) {\n            return new Promise(resolve => {\n                const l = this.registerListener({\n                    rendered: () => {\n                        resolve();\n                        l.deregister();\n                    }\n                });\n                repaintFn();\n            });\n        }\n        repaintFn();\n    }\n    setCanvas(canvas) {\n        if (this.canvas !== canvas) {\n            this.canvas = canvas;\n            if (canvas) {\n                this.fireEvent({}, 'canvasReady');\n            }\n        }\n    }\n    getCanvas() {\n        return this.canvas;\n    }\n    getMouseElement(event) {\n        return null;\n    }\n    zoomToFit() {\n        const xFactor = this.canvas.clientWidth / this.canvas.scrollWidth;\n        const yFactor = this.canvas.clientHeight / this.canvas.scrollHeight;\n        const zoomFactor = xFactor < yFactor ? xFactor : yFactor;\n        this.model.setZoomLevel(this.model.getZoomLevel() * zoomFactor);\n        this.model.setOffset(0, 0);\n        this.repaintCanvas();\n    }\n}\nexports.CanvasEngine = CanvasEngine;\n//# sourceMappingURL=CanvasEngine.js.map"]},"metadata":{},"sourceType":"script"}