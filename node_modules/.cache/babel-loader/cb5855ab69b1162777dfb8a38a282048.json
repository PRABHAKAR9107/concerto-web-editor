{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst PointModel_1 = require(\"./PointModel\");\n\nconst _ = require(\"lodash\");\n\nconst geometry_1 = require(\"@projectstorm/geometry\");\n\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\n\nclass LinkModel extends react_canvas_core_1.BaseModel {\n  constructor(options) {\n    super(options);\n    this.points = [new PointModel_1.PointModel({\n      link: this\n    }), new PointModel_1.PointModel({\n      link: this\n    })];\n    this.sourcePort = null;\n    this.targetPort = null;\n    this.renderedPaths = [];\n    this.labels = [];\n  }\n\n  getBoundingBox() {\n    return geometry_1.Polygon.boundingBoxFromPoints(_.map(this.points, point => {\n      return point.getPosition();\n    }));\n  }\n\n  getSelectionEntities() {\n    if (this.getTargetPort() && this.getSourcePort()) {\n      return super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length - 1));\n    } // allow selection of the first point\n\n\n    if (!this.getSourcePort()) {\n      return super.getSelectionEntities().concat(_.slice(this.points, 0, this.points.length - 1));\n    } // allow selection of the last point\n\n\n    if (!this.getTargetPort()) {\n      return super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length));\n    }\n\n    return super.getSelectionEntities().concat(this.points);\n  }\n\n  deserialize(event) {\n    super.deserialize(event);\n    this.points = _.map(event.data.points || [], point => {\n      var p = new PointModel_1.PointModel({\n        link: this,\n        position: new geometry_1.Point(point.x, point.y)\n      });\n      p.deserialize(Object.assign({}, event, {\n        data: point\n      }));\n      return p;\n    }); //deserialize labels\n\n    _.forEach(event.data.labels || [], label => {\n      let labelOb = event.engine.getFactoryForLabel(label.type).generateModel({});\n      labelOb.deserialize(Object.assign({}, event, {\n        data: label\n      }));\n      this.addLabel(labelOb);\n    }); // these happen async, so we use the promises for these (they need to be done like this without the async keyword\n    // because we need the deserailize method to finish for other methods while this happen\n\n\n    if (event.data.target) {\n      event.getModel(event.data.targetPort).then(model => {\n        this.setTargetPort(model);\n      });\n    }\n\n    if (event.data.source) {\n      event.getModel(event.data.sourcePort).then(model => {\n        this.setSourcePort(model);\n      });\n    }\n  }\n\n  getRenderedPath() {\n    return this.renderedPaths;\n  }\n\n  setRenderedPaths(paths) {\n    this.renderedPaths = paths;\n  }\n\n  serialize() {\n    return Object.assign({}, super.serialize(), {\n      source: this.sourcePort ? this.sourcePort.getParent().getID() : null,\n      sourcePort: this.sourcePort ? this.sourcePort.getID() : null,\n      target: this.targetPort ? this.targetPort.getParent().getID() : null,\n      targetPort: this.targetPort ? this.targetPort.getID() : null,\n      points: _.map(this.points, point => {\n        return point.serialize();\n      }),\n      labels: _.map(this.labels, label => {\n        return label.serialize();\n      })\n    });\n  }\n\n  doClone(lookupTable = {}, clone) {\n    clone.setPoints(_.map(this.getPoints(), point => {\n      return point.clone(lookupTable);\n    }));\n\n    if (this.sourcePort) {\n      clone.setSourcePort(this.sourcePort.clone(lookupTable));\n    }\n\n    if (this.targetPort) {\n      clone.setTargetPort(this.targetPort.clone(lookupTable));\n    }\n  }\n\n  clearPort(port) {\n    if (this.sourcePort === port) {\n      this.setSourcePort(null);\n    } else if (this.targetPort === port) {\n      this.setTargetPort(null);\n    }\n  }\n\n  remove() {\n    if (this.sourcePort) {\n      this.sourcePort.removeLink(this);\n    }\n\n    if (this.targetPort) {\n      this.targetPort.removeLink(this);\n    }\n\n    super.remove();\n  }\n\n  isLastPoint(point) {\n    var index = this.getPointIndex(point);\n    return index === this.points.length - 1;\n  }\n\n  getPointIndex(point) {\n    return this.points.indexOf(point);\n  }\n\n  getPointModel(id) {\n    for (var i = 0; i < this.points.length; i++) {\n      if (this.points[i].getID() === id) {\n        return this.points[i];\n      }\n    }\n\n    return null;\n  }\n\n  getPortForPoint(point) {\n    if (this.sourcePort !== null && this.getFirstPoint().getID() === point.getID()) {\n      return this.sourcePort;\n    }\n\n    if (this.targetPort !== null && this.getLastPoint().getID() === point.getID()) {\n      return this.targetPort;\n    }\n\n    return null;\n  }\n\n  getPointForPort(port) {\n    if (this.sourcePort !== null && this.sourcePort.getID() === port.getID()) {\n      return this.getFirstPoint();\n    }\n\n    if (this.targetPort !== null && this.targetPort.getID() === port.getID()) {\n      return this.getLastPoint();\n    }\n\n    return null;\n  }\n\n  getFirstPoint() {\n    return this.points[0];\n  }\n\n  getLastPoint() {\n    return this.points[this.points.length - 1];\n  }\n\n  setSourcePort(port) {\n    if (port !== null) {\n      port.addLink(this);\n    }\n\n    if (this.sourcePort !== null) {\n      this.sourcePort.removeLink(this);\n    }\n\n    this.sourcePort = port;\n    this.fireEvent({\n      port\n    }, 'sourcePortChanged');\n  }\n\n  getSourcePort() {\n    return this.sourcePort;\n  }\n\n  getTargetPort() {\n    return this.targetPort;\n  }\n\n  setTargetPort(port) {\n    if (port !== null) {\n      port.addLink(this);\n    }\n\n    if (this.targetPort !== null) {\n      this.targetPort.removeLink(this);\n    }\n\n    this.targetPort = port;\n    this.fireEvent({\n      port\n    }, 'targetPortChanged');\n  }\n\n  point(x, y, index = 1) {\n    return this.addPoint(this.generatePoint(x, y), index);\n  }\n\n  addLabel(label) {\n    label.setParent(this);\n    this.labels.push(label);\n  }\n\n  getPoints() {\n    return this.points;\n  }\n\n  getLabels() {\n    return this.labels;\n  }\n\n  setPoints(points) {\n    _.forEach(points, point => {\n      point.setParent(this);\n    });\n\n    this.points = points;\n  }\n\n  removePoint(pointModel) {\n    this.points.splice(this.getPointIndex(pointModel), 1);\n  }\n\n  removePointsBefore(pointModel) {\n    this.points.splice(0, this.getPointIndex(pointModel));\n  }\n\n  removePointsAfter(pointModel) {\n    this.points.splice(this.getPointIndex(pointModel) + 1);\n  }\n\n  removeMiddlePoints() {\n    if (this.points.length > 2) {\n      this.points.splice(0, this.points.length - 2);\n    }\n  }\n\n  addPoint(pointModel, index = 1) {\n    pointModel.setParent(this);\n    this.points.splice(index, 0, pointModel);\n    return pointModel;\n  }\n\n  generatePoint(x = 0, y = 0) {\n    return new PointModel_1.PointModel({\n      link: this,\n      position: new geometry_1.Point(x, y)\n    });\n  }\n\n}\n\nexports.LinkModel = LinkModel;","map":{"version":3,"sources":["../../../../src/entities/link/LinkModel.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst PointModel_1 = require(\"./PointModel\");\nconst _ = require(\"lodash\");\nconst geometry_1 = require(\"@projectstorm/geometry\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nclass LinkModel extends react_canvas_core_1.BaseModel {\n    constructor(options) {\n        super(options);\n        this.points = [\n            new PointModel_1.PointModel({\n                link: this\n            }),\n            new PointModel_1.PointModel({\n                link: this\n            })\n        ];\n        this.sourcePort = null;\n        this.targetPort = null;\n        this.renderedPaths = [];\n        this.labels = [];\n    }\n    getBoundingBox() {\n        return geometry_1.Polygon.boundingBoxFromPoints(_.map(this.points, (point) => {\n            return point.getPosition();\n        }));\n    }\n    getSelectionEntities() {\n        if (this.getTargetPort() && this.getSourcePort()) {\n            return super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length - 1));\n        }\n        // allow selection of the first point\n        if (!this.getSourcePort()) {\n            return super.getSelectionEntities().concat(_.slice(this.points, 0, this.points.length - 1));\n        }\n        // allow selection of the last point\n        if (!this.getTargetPort()) {\n            return super.getSelectionEntities().concat(_.slice(this.points, 1, this.points.length));\n        }\n        return super.getSelectionEntities().concat(this.points);\n    }\n    deserialize(event) {\n        super.deserialize(event);\n        this.points = _.map(event.data.points || [], point => {\n            var p = new PointModel_1.PointModel({\n                link: this,\n                position: new geometry_1.Point(point.x, point.y)\n            });\n            p.deserialize(Object.assign({}, event, { data: point }));\n            return p;\n        });\n        //deserialize labels\n        _.forEach(event.data.labels || [], (label) => {\n            let labelOb = event.engine.getFactoryForLabel(label.type).generateModel({});\n            labelOb.deserialize(Object.assign({}, event, { data: label }));\n            this.addLabel(labelOb);\n        });\n        // these happen async, so we use the promises for these (they need to be done like this without the async keyword\n        // because we need the deserailize method to finish for other methods while this happen\n        if (event.data.target) {\n            event.getModel(event.data.targetPort).then((model) => {\n                this.setTargetPort(model);\n            });\n        }\n        if (event.data.source) {\n            event.getModel(event.data.sourcePort).then((model) => {\n                this.setSourcePort(model);\n            });\n        }\n    }\n    getRenderedPath() {\n        return this.renderedPaths;\n    }\n    setRenderedPaths(paths) {\n        this.renderedPaths = paths;\n    }\n    serialize() {\n        return Object.assign({}, super.serialize(), { source: this.sourcePort ? this.sourcePort.getParent().getID() : null, sourcePort: this.sourcePort ? this.sourcePort.getID() : null, target: this.targetPort ? this.targetPort.getParent().getID() : null, targetPort: this.targetPort ? this.targetPort.getID() : null, points: _.map(this.points, point => {\n                return point.serialize();\n            }), labels: _.map(this.labels, label => {\n                return label.serialize();\n            }) });\n    }\n    doClone(lookupTable = {}, clone) {\n        clone.setPoints(_.map(this.getPoints(), (point) => {\n            return point.clone(lookupTable);\n        }));\n        if (this.sourcePort) {\n            clone.setSourcePort(this.sourcePort.clone(lookupTable));\n        }\n        if (this.targetPort) {\n            clone.setTargetPort(this.targetPort.clone(lookupTable));\n        }\n    }\n    clearPort(port) {\n        if (this.sourcePort === port) {\n            this.setSourcePort(null);\n        }\n        else if (this.targetPort === port) {\n            this.setTargetPort(null);\n        }\n    }\n    remove() {\n        if (this.sourcePort) {\n            this.sourcePort.removeLink(this);\n        }\n        if (this.targetPort) {\n            this.targetPort.removeLink(this);\n        }\n        super.remove();\n    }\n    isLastPoint(point) {\n        var index = this.getPointIndex(point);\n        return index === this.points.length - 1;\n    }\n    getPointIndex(point) {\n        return this.points.indexOf(point);\n    }\n    getPointModel(id) {\n        for (var i = 0; i < this.points.length; i++) {\n            if (this.points[i].getID() === id) {\n                return this.points[i];\n            }\n        }\n        return null;\n    }\n    getPortForPoint(point) {\n        if (this.sourcePort !== null && this.getFirstPoint().getID() === point.getID()) {\n            return this.sourcePort;\n        }\n        if (this.targetPort !== null && this.getLastPoint().getID() === point.getID()) {\n            return this.targetPort;\n        }\n        return null;\n    }\n    getPointForPort(port) {\n        if (this.sourcePort !== null && this.sourcePort.getID() === port.getID()) {\n            return this.getFirstPoint();\n        }\n        if (this.targetPort !== null && this.targetPort.getID() === port.getID()) {\n            return this.getLastPoint();\n        }\n        return null;\n    }\n    getFirstPoint() {\n        return this.points[0];\n    }\n    getLastPoint() {\n        return this.points[this.points.length - 1];\n    }\n    setSourcePort(port) {\n        if (port !== null) {\n            port.addLink(this);\n        }\n        if (this.sourcePort !== null) {\n            this.sourcePort.removeLink(this);\n        }\n        this.sourcePort = port;\n        this.fireEvent({ port }, 'sourcePortChanged');\n    }\n    getSourcePort() {\n        return this.sourcePort;\n    }\n    getTargetPort() {\n        return this.targetPort;\n    }\n    setTargetPort(port) {\n        if (port !== null) {\n            port.addLink(this);\n        }\n        if (this.targetPort !== null) {\n            this.targetPort.removeLink(this);\n        }\n        this.targetPort = port;\n        this.fireEvent({ port }, 'targetPortChanged');\n    }\n    point(x, y, index = 1) {\n        return this.addPoint(this.generatePoint(x, y), index);\n    }\n    addLabel(label) {\n        label.setParent(this);\n        this.labels.push(label);\n    }\n    getPoints() {\n        return this.points;\n    }\n    getLabels() {\n        return this.labels;\n    }\n    setPoints(points) {\n        _.forEach(points, point => {\n            point.setParent(this);\n        });\n        this.points = points;\n    }\n    removePoint(pointModel) {\n        this.points.splice(this.getPointIndex(pointModel), 1);\n    }\n    removePointsBefore(pointModel) {\n        this.points.splice(0, this.getPointIndex(pointModel));\n    }\n    removePointsAfter(pointModel) {\n        this.points.splice(this.getPointIndex(pointModel) + 1);\n    }\n    removeMiddlePoints() {\n        if (this.points.length > 2) {\n            this.points.splice(0, this.points.length - 2);\n        }\n    }\n    addPoint(pointModel, index = 1) {\n        pointModel.setParent(this);\n        this.points.splice(index, 0, pointModel);\n        return pointModel;\n    }\n    generatePoint(x = 0, y = 0) {\n        return new PointModel_1.PointModel({\n            link: this,\n            position: new geometry_1.Point(x, y)\n        });\n    }\n}\nexports.LinkModel = LinkModel;\n//# sourceMappingURL=LinkModel.js.map"]},"metadata":{},"sourceType":"script"}