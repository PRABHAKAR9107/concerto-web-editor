{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst geometry_1 = require(\"@projectstorm/geometry\");\n\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\n\nclass NodeModel extends react_canvas_core_1.BasePositionModel {\n  constructor(options) {\n    super(options);\n    this.ports = {};\n    this.width = 0;\n    this.height = 0;\n  }\n\n  getBoundingBox() {\n    return new geometry_1.Rectangle(this.getPosition(), this.width, this.height);\n  }\n\n  setPosition(x, y) {\n    let old = this.position;\n    super.setPosition(x, y); //also update the port co-ordinates (for make glorious speed)\n\n    _.forEach(this.ports, port => {\n      port.setPosition(port.getX() + x - old.x, port.getY() + y - old.y);\n    });\n  }\n\n  deserialize(event) {\n    super.deserialize(event); //deserialize ports\n\n    _.forEach(event.data.ports, port => {\n      let portOb = event.engine.getFactoryForPort(port.type).generateModel({});\n      portOb.deserialize(Object.assign({}, event, {\n        data: port\n      })); // the links need these\n\n      event.registerModel(portOb);\n      this.addPort(portOb);\n    });\n  }\n\n  serialize() {\n    return Object.assign({}, super.serialize(), {\n      ports: _.map(this.ports, port => {\n        return port.serialize();\n      })\n    });\n  }\n\n  doClone(lookupTable = {}, clone) {\n    // also clone the ports\n    clone.ports = {};\n\n    _.forEach(this.ports, port => {\n      clone.addPort(port.clone(lookupTable));\n    });\n  }\n\n  remove() {\n    super.remove();\n\n    _.forEach(this.ports, port => {\n      _.forEach(port.getLinks(), link => {\n        link.remove();\n      });\n    });\n  }\n\n  getPortFromID(id) {\n    for (var i in this.ports) {\n      if (this.ports[i].getID() === id) {\n        return this.ports[i];\n      }\n    }\n\n    return null;\n  }\n\n  getLink(id) {\n    for (let portID in this.ports) {\n      const links = this.ports[portID].getLinks();\n\n      if (links[id]) {\n        return links[id];\n      }\n    }\n  }\n\n  getPort(name) {\n    return this.ports[name];\n  }\n\n  getPorts() {\n    return this.ports;\n  }\n\n  removePort(port) {\n    // clear the port from the links\n    for (let link of _.values(port.getLinks())) {\n      link.clearPort(port);\n    } //clear the parent node reference\n\n\n    if (this.ports[port.getName()]) {\n      this.ports[port.getName()].setParent(null);\n      delete this.ports[port.getName()];\n    }\n  }\n\n  addPort(port) {\n    port.setParent(this);\n    this.ports[port.getName()] = port;\n    return port;\n  }\n\n  updateDimensions({\n    width,\n    height\n  }) {\n    this.width = width;\n    this.height = height;\n  }\n\n}\n\nexports.NodeModel = NodeModel;","map":{"version":3,"sources":["../../../../src/entities/node/NodeModel.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst geometry_1 = require(\"@projectstorm/geometry\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nclass NodeModel extends react_canvas_core_1.BasePositionModel {\n    constructor(options) {\n        super(options);\n        this.ports = {};\n        this.width = 0;\n        this.height = 0;\n    }\n    getBoundingBox() {\n        return new geometry_1.Rectangle(this.getPosition(), this.width, this.height);\n    }\n    setPosition(x, y) {\n        let old = this.position;\n        super.setPosition(x, y);\n        //also update the port co-ordinates (for make glorious speed)\n        _.forEach(this.ports, port => {\n            port.setPosition(port.getX() + x - old.x, port.getY() + y - old.y);\n        });\n    }\n    deserialize(event) {\n        super.deserialize(event);\n        //deserialize ports\n        _.forEach(event.data.ports, (port) => {\n            let portOb = event.engine.getFactoryForPort(port.type).generateModel({});\n            portOb.deserialize(Object.assign({}, event, { data: port }));\n            // the links need these\n            event.registerModel(portOb);\n            this.addPort(portOb);\n        });\n    }\n    serialize() {\n        return Object.assign({}, super.serialize(), { ports: _.map(this.ports, port => {\n                return port.serialize();\n            }) });\n    }\n    doClone(lookupTable = {}, clone) {\n        // also clone the ports\n        clone.ports = {};\n        _.forEach(this.ports, port => {\n            clone.addPort(port.clone(lookupTable));\n        });\n    }\n    remove() {\n        super.remove();\n        _.forEach(this.ports, port => {\n            _.forEach(port.getLinks(), link => {\n                link.remove();\n            });\n        });\n    }\n    getPortFromID(id) {\n        for (var i in this.ports) {\n            if (this.ports[i].getID() === id) {\n                return this.ports[i];\n            }\n        }\n        return null;\n    }\n    getLink(id) {\n        for (let portID in this.ports) {\n            const links = this.ports[portID].getLinks();\n            if (links[id]) {\n                return links[id];\n            }\n        }\n    }\n    getPort(name) {\n        return this.ports[name];\n    }\n    getPorts() {\n        return this.ports;\n    }\n    removePort(port) {\n        // clear the port from the links\n        for (let link of _.values(port.getLinks())) {\n            link.clearPort(port);\n        }\n        //clear the parent node reference\n        if (this.ports[port.getName()]) {\n            this.ports[port.getName()].setParent(null);\n            delete this.ports[port.getName()];\n        }\n    }\n    addPort(port) {\n        port.setParent(this);\n        this.ports[port.getName()] = port;\n        return port;\n    }\n    updateDimensions({ width, height }) {\n        this.width = width;\n        this.height = height;\n    }\n}\nexports.NodeModel = NodeModel;\n//# sourceMappingURL=NodeModel.js.map"]},"metadata":{},"sourceType":"script"}