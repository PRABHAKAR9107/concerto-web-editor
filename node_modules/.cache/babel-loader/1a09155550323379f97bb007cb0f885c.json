{"ast":null,"code":"var _jsxFileName = \"/home/kanav/proposal/concerto-web-editor/src/components/DDArea.js\";\nimport React, { Component } from 'react';\nimport \"./Style.css\";\nimport { DiagramWidget, DiagramEngine, DefaultNodeFactory, DefaultLinkFactory, DefaultNodeModel, DefaultPortModel } from 'storm-react-diagrams';\nimport './graph/srd.css';\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nexport default class DDArea extends Component {\n  constructor(props) {\n    super(props);\n    this.engine = new DiagramEngine();\n    this.engine.registerNodeFactory(new DefaultNodeFactory());\n    this.engine.registerLinkFactory(new DefaultLinkFactory());\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"diagram-layer\",\n      onDrop: event => {\n        var data = JSON.parse(event.dataTransfer.getData('storm-diagram-node')); //var nodesCount = Lodash.keys(this.engine.getDiagramModel().getNodes()).length; //this is used to get the number of nodes\n\n        var node = null; //alert(data.name);\n\n        node = new DefaultNodeModel(data.name, data.color);\n        node.addPort(new DefaultPortModel(true, 'in-1', 'In'));\n        node.addPort(new DefaultPortModel(false, 'out-1', 'Out'));\n        var points = this.engine.getRelativeMousePoint(event);\n        node.x = points.x;\n        node.y = points.y;\n        this.engine.getDiagramModel().addNode(node);\n        this.forceUpdate();\n      },\n      onDoubleClick: event => {\n        //!------------- SERIALIZING ------------------\n        const str = JSON.stringify(this.engine.getDiagramModel().serializeDiagram());\n        console.log(str); //!------------- DESERIALIZING ----------------\n        //we need this to help the system know what models to create form the JSON\n\n        this.engine.registerInstanceFactory(new DefaultNodeInstanceFactory());\n        this.engine.registerInstanceFactory(new DefaultPortInstanceFactory());\n        this.engine.registerInstanceFactory(new LinkInstanceFactory()); //deserialize the model\n\n        var model = new DiagramModel();\n        model.deSerializeDiagram(JSON.parse(str), this.engine);\n        this.engine.setDiagramModel(model);\n      },\n      onDragOver: event => {\n        event.preventDefault();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(DiagramWidget, {\n      className: \"srd-demo-canvas\",\n      diagramEngine: this.engine,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/kanav/proposal/concerto-web-editor/src/components/DDArea.js"],"names":["React","Component","DiagramWidget","DiagramEngine","DefaultNodeFactory","DefaultLinkFactory","DefaultNodeModel","DefaultPortModel","require","DDArea","constructor","props","engine","registerNodeFactory","registerLinkFactory","render","event","data","JSON","parse","dataTransfer","getData","node","name","color","addPort","points","getRelativeMousePoint","x","y","getDiagramModel","addNode","forceUpdate","str","stringify","serializeDiagram","console","log","registerInstanceFactory","DefaultNodeInstanceFactory","DefaultPortInstanceFactory","LinkInstanceFactory","model","DiagramModel","deSerializeDiagram","setDiagramModel","preventDefault"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,aAAP;AACA,SACCC,aADD,EAECC,aAFD,EAGCC,kBAHD,EAICC,kBAJD,EAKCC,gBALD,EAMIC,gBANJ,QAOO,sBAPP;AAQA,OAAO,iBAAP;;AAEAC,OAAO,CAAC,yCAAD,CAAP;;AACA,eAAe,MAAMC,MAAN,SAAqBR,SAArB,CAA+B;AAC1CS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACN,SAAKC,MAAL,GAAc,IAAIT,aAAJ,EAAd;AACA,SAAKS,MAAL,CAAYC,mBAAZ,CAAgC,IAAIT,kBAAJ,EAAhC;AACM,SAAKQ,MAAL,CAAYE,mBAAZ,CAAgC,IAAIT,kBAAJ,EAAhC;AAEN;;AACEU,EAAAA,MAAM,GAAG;AACL,WACI;AACP,MAAA,SAAS,EAAC,eADH;AAEP,MAAA,MAAM,EAAEC,KAAK,IAAI;AAChB,YAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACI,YAAN,CAAmBC,OAAnB,CAA2B,oBAA3B,CAAX,CAAX,CADgB,CAEhB;;AACA,YAAIC,IAAI,GAAG,IAAX,CAHgB,CAIhB;;AAEAA,QAAAA,IAAI,GAAG,IAAIhB,gBAAJ,CAAqBW,IAAI,CAACM,IAA1B,EAAgCN,IAAI,CAACO,KAArC,CAAP;AACkBF,QAAAA,IAAI,CAACG,OAAL,CAAa,IAAIlB,gBAAJ,CAAqB,IAArB,EAA2B,MAA3B,EAAmC,IAAnC,CAAb;AACAe,QAAAA,IAAI,CAACG,OAAL,CAAa,IAAIlB,gBAAJ,CAAqB,KAArB,EAA4B,OAA5B,EAAqC,KAArC,CAAb;AAElB,YAAImB,MAAM,GAAG,KAAKd,MAAL,CAAYe,qBAAZ,CAAkCX,KAAlC,CAAb;AACAM,QAAAA,IAAI,CAACM,CAAL,GAASF,MAAM,CAACE,CAAhB;AACAN,QAAAA,IAAI,CAACO,CAAL,GAASH,MAAM,CAACG,CAAhB;AACA,aAAKjB,MAAL,CAAYkB,eAAZ,GAA8BC,OAA9B,CAAsCT,IAAtC;AACkB,aAAKU,WAAL;AAEH,OAlBT;AAmBQ,MAAA,aAAa,EAAEhB,KAAK,IAAE;AAClB;AACA,cAAMiB,GAAG,GAACf,IAAI,CAACgB,SAAL,CAAe,KAAKtB,MAAL,CAAYkB,eAAZ,GAA8BK,gBAA9B,EAAf,CAAV;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ,EAHkB,CAKlB;AACN;;AACA,aAAKrB,MAAL,CAAY0B,uBAAZ,CAAoC,IAAIC,0BAAJ,EAApC;AACA,aAAK3B,MAAL,CAAY0B,uBAAZ,CAAoC,IAAIE,0BAAJ,EAApC;AACA,aAAK5B,MAAL,CAAY0B,uBAAZ,CAAoC,IAAIG,mBAAJ,EAApC,EATwB,CAWxB;;AACA,YAAIC,KAAK,GAAG,IAAIC,YAAJ,EAAZ;AACAD,QAAAA,KAAK,CAACE,kBAAN,CAAyB1B,IAAI,CAACC,KAAL,CAAWc,GAAX,CAAzB,EAA0C,KAAKrB,MAA/C;AACA,aAAKA,MAAL,CAAYiC,eAAZ,CAA4BH,KAA5B;AACG,OAlCT;AAoCP,MAAA,UAAU,EAAE1B,KAAK,IAAI;AACpBA,QAAAA,KAAK,CAAC8B,cAAN;AACA,OAtCM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAwCP,oBAAC,aAAD;AAAe,MAAA,SAAS,EAAC,iBAAzB;AAA4C,MAAA,aAAa,EAAE,KAAKlC,MAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxCO,CADJ;AA4CH;;AArDyC","sourcesContent":["import React, { Component } from 'react';\nimport \"./Style.css\";\nimport {\n\tDiagramWidget,\n\tDiagramEngine,\n\tDefaultNodeFactory,\n\tDefaultLinkFactory,\n\tDefaultNodeModel,\n    DefaultPortModel,\n} from 'storm-react-diagrams';\nimport './graph/srd.css';\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\nexport default class DDArea extends Component {\n    constructor(props) {\n        super(props);\n\t\tthis.engine = new DiagramEngine();\n\t\tthis.engine.registerNodeFactory(new DefaultNodeFactory());\n        this.engine.registerLinkFactory(new DefaultLinkFactory());\n        \n\t}\n    render() {\n        return (\n            <div\n\t\t\t\t\tclassName=\"diagram-layer\"\n\t\t\t\t\tonDrop={event => {\n\t\t\t\t\t\tvar data = JSON.parse(event.dataTransfer.getData('storm-diagram-node'));\n\t\t\t\t\t\t//var nodesCount = Lodash.keys(this.engine.getDiagramModel().getNodes()).length; //this is used to get the number of nodes\n\t\t\t\t\t\tvar node = null;\n\t\t\t\t\t\t//alert(data.name);\n\t\t\t\t\t\t\n\t\t\t\t\t\tnode = new DefaultNodeModel(data.name, data.color);\n                        node.addPort(new DefaultPortModel(true, 'in-1', 'In'));\n                        node.addPort(new DefaultPortModel(false, 'out-1', 'Out'));\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar points = this.engine.getRelativeMousePoint(event);\n\t\t\t\t\t\tnode.x = points.x;\n\t\t\t\t\t\tnode.y = points.y;\n\t\t\t\t\t\tthis.engine.getDiagramModel().addNode(node);\n                        this.forceUpdate();\n                        \n                    }}\n                    onDoubleClick={event=>{\n                        //!------------- SERIALIZING ------------------\n                        const str=JSON.stringify(this.engine.getDiagramModel().serializeDiagram())\n                        console.log(str);\n\n                        //!------------- DESERIALIZING ----------------\n\t\t                //we need this to help the system know what models to create form the JSON\n\t\t                this.engine.registerInstanceFactory(new DefaultNodeInstanceFactory());\n\t\t                this.engine.registerInstanceFactory(new DefaultPortInstanceFactory());\n\t\t                this.engine.registerInstanceFactory(new LinkInstanceFactory());\n\n\t\t                //deserialize the model\n\t\t                var model = new DiagramModel();\n\t\t                model.deSerializeDiagram(JSON.parse(str), this.engine);\n\t\t                this.engine.setDiagramModel(model);\n                    }}\n\n\t\t\t\t\tonDragOver={event => {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<DiagramWidget className=\"srd-demo-canvas\"  diagramEngine={this.engine} />\n\t\t\t\t</div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}