{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = require(\"react\");\n\nconst _ = require(\"lodash\");\n\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\n\nclass PortWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n  }\n\n  report() {\n    this.props.port.updateCoords(this.props.engine.getPortCoords(this.props.port, this.ref.current));\n  }\n\n  componentWillUnmount() {\n    this.engineListenerHandle && this.engineListenerHandle.deregister();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (!this.props.port.reportedPosition) {\n      this.report();\n    }\n  }\n\n  componentDidMount() {\n    this.engineListenerHandle = this.props.engine.registerListener({\n      canvasReady: () => {\n        this.report();\n      }\n    });\n\n    if (this.props.engine.getCanvas()) {\n      this.report();\n    }\n  }\n\n  getExtraProps() {\n    if (react_canvas_core_1.Toolkit.TESTING) {\n      const links = _.keys(this.props.port.getNode().getPort(this.props.port.getName()).links).join(',');\n\n      return {\n        'data-links': links\n      };\n    }\n\n    return {};\n  }\n\n  render() {\n    return React.createElement(\"div\", Object.assign({\n      style: this.props.style,\n      ref: this.ref,\n      className: `port ${this.props.className || ''}`,\n      \"data-name\": this.props.port.getName(),\n      \"data-nodeid\": this.props.port.getNode().getID()\n    }, this.getExtraProps()), this.props.children);\n  }\n\n}\n\nexports.PortWidget = PortWidget;","map":{"version":3,"sources":["../../../../src/entities/port/PortWidget.tsx"],"names":[],"mappings":";;;;;;AAAA,MAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,MAAA,CAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAGA,MAAA,mBAAA,GAAA,OAAA,CAAA,iCAAA,CAAA;;AASA,MAAa,UAAb,SAAgC,KAAK,CAAC,SAAtC,CAA0D;AAIzD,EAAA,WAAA,CAAY,KAAZ,EAA4B;AAC3B,UAAM,KAAN;AACA,SAAK,GAAL,GAAW,KAAK,CAAC,SAAN,EAAX;AACA;;AAED,EAAA,MAAM,GAAA;AACL,SAAK,KAAL,CAAW,IAAX,CAAgB,YAAhB,CAA6B,KAAK,KAAL,CAAW,MAAX,CAAkB,aAAlB,CAAgC,KAAK,KAAL,CAAW,IAA3C,EAAiD,KAAK,GAAL,CAAS,OAA1D,CAA7B;AACA;;AAED,EAAA,oBAAoB,GAAA;AACnB,SAAK,oBAAL,IAA6B,KAAK,oBAAL,CAA0B,UAA1B,EAA7B;AACA;;AAED,EAAA,kBAAkB,CAAC,SAAD,EAAiC,SAAjC,EAA4C,QAA5C,EAA0D;AAC3E,QAAI,CAAC,KAAK,KAAL,CAAW,IAAX,CAAgB,gBAArB,EAAuC;AACtC,WAAK,MAAL;AACA;AACD;;AAED,EAAA,iBAAiB,GAAA;AAChB,SAAK,oBAAL,GAA4B,KAAK,KAAL,CAAW,MAAX,CAAkB,gBAAlB,CAAmC;AAC9D,MAAA,WAAW,EAAE,MAAK;AACjB,aAAK,MAAL;AACA;AAH6D,KAAnC,CAA5B;;AAKA,QAAI,KAAK,KAAL,CAAW,MAAX,CAAkB,SAAlB,EAAJ,EAAmC;AAClC,WAAK,MAAL;AACA;AACD;;AAED,EAAA,aAAa,GAAA;AACZ,QAAI,mBAAA,CAAA,OAAA,CAAQ,OAAZ,EAAqB;AACpB,YAAM,KAAK,GAAG,CAAC,CAAC,IAAF,CAAO,KAAK,KAAL,CAAW,IAAX,CAAgB,OAAhB,GAA0B,OAA1B,CAAkC,KAAK,KAAL,CAAW,IAAX,CAAgB,OAAhB,EAAlC,EAA6D,KAApE,EAA2E,IAA3E,CAAgF,GAAhF,CAAd;;AACA,aAAO;AACN,sBAAc;AADR,OAAP;AAGA;;AACD,WAAO,EAAP;AACA;;AAED,EAAA,MAAM,GAAA;AACL,WACC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACC,MAAA,KAAK,EAAE,KAAK,KAAL,CAAW,KADnB;AAEC,MAAA,GAAG,EAAE,KAAK,GAFX;AAGC,MAAA,SAAS,EAAE,QAAQ,KAAK,KAAL,CAAW,SAAX,IAAwB,EAAE,EAH9C;AAGgD,mBACpC,KAAK,KAAL,CAAW,IAAX,CAAgB,OAAhB,EAJZ;AAIqC,qBACvB,KAAK,KAAL,CAAW,IAAX,CAAgB,OAAhB,GAA0B,KAA1B;AALd,KAAA,EAMK,KAAK,aAAL,EANL,CAAA,EAOE,KAAK,KAAL,CAAW,QAPb,CADD;AAWA;;AAxDwD;;AAA1D,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst React = require(\"react\");\nconst _ = require(\"lodash\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nclass PortWidget extends React.Component {\n    constructor(props) {\n        super(props);\n        this.ref = React.createRef();\n    }\n    report() {\n        this.props.port.updateCoords(this.props.engine.getPortCoords(this.props.port, this.ref.current));\n    }\n    componentWillUnmount() {\n        this.engineListenerHandle && this.engineListenerHandle.deregister();\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (!this.props.port.reportedPosition) {\n            this.report();\n        }\n    }\n    componentDidMount() {\n        this.engineListenerHandle = this.props.engine.registerListener({\n            canvasReady: () => {\n                this.report();\n            }\n        });\n        if (this.props.engine.getCanvas()) {\n            this.report();\n        }\n    }\n    getExtraProps() {\n        if (react_canvas_core_1.Toolkit.TESTING) {\n            const links = _.keys(this.props.port.getNode().getPort(this.props.port.getName()).links).join(',');\n            return {\n                'data-links': links\n            };\n        }\n        return {};\n    }\n    render() {\n        return (React.createElement(\"div\", Object.assign({ style: this.props.style, ref: this.ref, className: `port ${this.props.className || ''}`, \"data-name\": this.props.port.getName(), \"data-nodeid\": this.props.port.getNode().getID() }, this.getExtraProps()), this.props.children));\n    }\n}\nexports.PortWidget = PortWidget;\n//# sourceMappingURL=PortWidget.js.map"]},"metadata":{},"sourceType":"script"}