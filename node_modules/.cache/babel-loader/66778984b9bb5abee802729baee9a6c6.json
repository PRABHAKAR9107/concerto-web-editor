{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst AbstractDisplacementState_1 = require(\"../core-state/AbstractDisplacementState\");\n\nconst SelectionLayerModel_1 = require(\"../entities/selection/SelectionLayerModel\");\n\nconst geometry_1 = require(\"@projectstorm/geometry\");\n\nclass SelectionBoxState extends AbstractDisplacementState_1.AbstractDisplacementState {\n  constructor() {\n    super({\n      name: 'selection-box'\n    });\n  }\n\n  activated(previous) {\n    super.activated(previous);\n    this.layer = new SelectionLayerModel_1.SelectionLayerModel();\n    this.engine.getModel().addLayer(this.layer);\n  }\n\n  deactivated(next) {\n    super.deactivated(next);\n    this.layer.remove();\n    this.engine.repaintCanvas();\n  }\n\n  getBoxDimensions(event) {\n    const rel = this.engine.getRelativePoint(event.event.clientX, event.event.clientY);\n    return {\n      left: rel.x > this.initialXRelative ? this.initialXRelative : rel.x,\n      top: rel.y > this.initialYRelative ? this.initialYRelative : rel.y,\n      width: Math.abs(rel.x - this.initialXRelative),\n      height: Math.abs(rel.y - this.initialYRelative),\n      right: rel.x < this.initialXRelative ? this.initialXRelative : rel.x,\n      bottom: rel.y < this.initialYRelative ? this.initialYRelative : rel.y\n    };\n  }\n\n  fireMouseMoved(event) {\n    this.layer.setBox(this.getBoxDimensions(event));\n    const relative = this.engine.getRelativeMousePoint({\n      clientX: this.initialX,\n      clientY: this.initialY\n    });\n\n    if (event.virtualDisplacementX < 0) {\n      relative.x -= Math.abs(event.virtualDisplacementX);\n    }\n\n    if (event.virtualDisplacementY < 0) {\n      relative.y -= Math.abs(event.virtualDisplacementY);\n    }\n\n    const rect = new geometry_1.Rectangle(relative, Math.abs(event.virtualDisplacementX), Math.abs(event.virtualDisplacementY));\n\n    for (let model of this.engine.getModel().getSelectionEntities()) {\n      if (model.getBoundingBox) {\n        const bounds = model.getBoundingBox();\n\n        if (rect.containsPoint(bounds.getTopLeft()) && rect.containsPoint(bounds.getBottomRight())) {\n          model.setSelected(true);\n        } else {\n          model.setSelected(false);\n        }\n      }\n    }\n\n    this.engine.repaintCanvas();\n  }\n\n}\n\nexports.SelectionBoxState = SelectionBoxState;","map":{"version":3,"sources":["../../../src/states/SelectionBoxState.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst AbstractDisplacementState_1 = require(\"../core-state/AbstractDisplacementState\");\nconst SelectionLayerModel_1 = require(\"../entities/selection/SelectionLayerModel\");\nconst geometry_1 = require(\"@projectstorm/geometry\");\nclass SelectionBoxState extends AbstractDisplacementState_1.AbstractDisplacementState {\n    constructor() {\n        super({\n            name: 'selection-box'\n        });\n    }\n    activated(previous) {\n        super.activated(previous);\n        this.layer = new SelectionLayerModel_1.SelectionLayerModel();\n        this.engine.getModel().addLayer(this.layer);\n    }\n    deactivated(next) {\n        super.deactivated(next);\n        this.layer.remove();\n        this.engine.repaintCanvas();\n    }\n    getBoxDimensions(event) {\n        const rel = this.engine.getRelativePoint(event.event.clientX, event.event.clientY);\n        return {\n            left: rel.x > this.initialXRelative ? this.initialXRelative : rel.x,\n            top: rel.y > this.initialYRelative ? this.initialYRelative : rel.y,\n            width: Math.abs(rel.x - this.initialXRelative),\n            height: Math.abs(rel.y - this.initialYRelative),\n            right: rel.x < this.initialXRelative ? this.initialXRelative : rel.x,\n            bottom: rel.y < this.initialYRelative ? this.initialYRelative : rel.y\n        };\n    }\n    fireMouseMoved(event) {\n        this.layer.setBox(this.getBoxDimensions(event));\n        const relative = this.engine.getRelativeMousePoint({\n            clientX: this.initialX,\n            clientY: this.initialY\n        });\n        if (event.virtualDisplacementX < 0) {\n            relative.x -= Math.abs(event.virtualDisplacementX);\n        }\n        if (event.virtualDisplacementY < 0) {\n            relative.y -= Math.abs(event.virtualDisplacementY);\n        }\n        const rect = new geometry_1.Rectangle(relative, Math.abs(event.virtualDisplacementX), Math.abs(event.virtualDisplacementY));\n        for (let model of this.engine.getModel().getSelectionEntities()) {\n            if (model.getBoundingBox) {\n                const bounds = model.getBoundingBox();\n                if (rect.containsPoint(bounds.getTopLeft()) && rect.containsPoint(bounds.getBottomRight())) {\n                    model.setSelected(true);\n                }\n                else {\n                    model.setSelected(false);\n                }\n            }\n        }\n        this.engine.repaintCanvas();\n    }\n}\nexports.SelectionBoxState = SelectionBoxState;\n//# sourceMappingURL=SelectionBoxState.js.map"]},"metadata":{},"sourceType":"script"}