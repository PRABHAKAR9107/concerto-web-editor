{"ast":null,"code":"var _jsxFileName = \"/home/kanav/gsoc_/concerto-web-editor/src/components/component/components/BodyWidget.js\";\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { TrayWidget } from './TrayWidget';\nimport { Application } from '../Application';\nimport { TrayItemWidget } from './TrayItemWidget';\nimport { DefaultNodeModel } from '@projectstorm/react-diagrams';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport './style.css';\n\nvar _ref = /*#__PURE__*/React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  className: \"title\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}, \"Storm React Diagrams - DnD demo\"));\n\nexport class BodyWidget extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, _ref, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(TrayWidget, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, React.createElement(TrayItemWidget, {\n      model: {\n        type: 'in'\n      },\n      name: \"In Node\",\n      color: \"rgb(192,255,0)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }), React.createElement(TrayItemWidget, {\n      model: {\n        type: 'out'\n      },\n      name: \"Out Node\",\n      color: \"rgb(0,192,255)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      onDrop: event => {\n        var data = JSON.parse(event.dataTransfer.getData('storm-diagram-node'));\n\n        var nodesCount = _.keys(this.props.app.getDiagramEngine().getModel().getNodes()).length;\n\n        var node = null;\n\n        if (data.type === 'in') {\n          node = new DefaultNodeModel('Node ' + (nodesCount + 1), 'rgb(192,255,0)');\n          node.addInPort('In');\n        } else {\n          node = new DefaultNodeModel('Node ' + (nodesCount + 1), 'rgb(0,192,255)');\n          node.addOutPort('Out');\n        }\n\n        var point = this.props.app.getDiagramEngine().getRelativeMousePoint(event);\n        node.setPosition(point);\n        this.props.app.getDiagramEngine().getModel().addNode(node);\n        this.forceUpdate();\n      },\n      onDragOver: event => {\n        event.preventDefault();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(CanvasWidget, {\n      className: \"srd-demo-canvas\",\n      engine: this.props.app.getDiagramEngine(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }))));\n  }\n\n}\nBodyWidget.displayName = \"BodyWidget\";\nBodyWidget.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"BodyWidget\",\n  \"props\": {\n    \"app\": {\n      \"required\": true,\n      \"flowType\": {\n        \"name\": \"Application\"\n      },\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/component/components/BodyWidget.js\"] = {\n    name: \"BodyWidget\",\n    docgenInfo: BodyWidget.__docgenInfo,\n    path: \"src/components/component/components/BodyWidget.js\"\n  };\n}","map":{"version":3,"sources":["/home/kanav/gsoc_/concerto-web-editor/src/components/component/components/BodyWidget.js"],"names":["React","_","TrayWidget","Application","TrayItemWidget","DefaultNodeModel","CanvasWidget","BodyWidget","Component","render","type","event","data","JSON","parse","dataTransfer","getData","nodesCount","keys","props","app","getDiagramEngine","getModel","getNodes","length","node","addInPort","addOutPort","point","getRelativeMousePoint","setPosition","addNode","forceUpdate","preventDefault"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,CAAZ,MAAmB,QAAnB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,YAAT,QAA6B,iCAA7B;AACA,OAAO,aAAP;;wBAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACC;AAAK,EAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADD,C;;AAJJ,OAAO,MAAMC,UAAN,SAAyBP,KAAK,CAACQ,SAA/B,CAA0D;AAChEC,EAAAA,MAAM,GAAG;AACR,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,cAAD;AAAgB,MAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAvB;AAAuC,MAAA,IAAI,EAAC,SAA5C;AAAsD,MAAA,KAAK,EAAC,gBAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAEC,oBAAC,cAAD;AAAgB,MAAA,KAAK,EAAE;AAAEA,QAAAA,IAAI,EAAE;AAAR,OAAvB;AAAwC,MAAA,IAAI,EAAC,UAA7C;AAAwD,MAAA,KAAK,EAAC,gBAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,CADD,EAKC;AACC,MAAA,MAAM,EAAEC,KAAK,IAAI;AAChB,YAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACI,YAAN,CAAmBC,OAAnB,CAA2B,oBAA3B,CAAX,CAAX;;AACA,YAAIC,UAAU,GAAGhB,CAAC,CAACiB,IAAF,CAChB,KAAKC,KAAL,CAAWC,GAAX,CACEC,gBADF,GAEEC,QAFF,GAGEC,QAHF,EADgB,EAKfC,MALF;;AAOA,YAAIC,IAAsB,GAAG,IAA7B;;AACA,YAAIb,IAAI,CAACF,IAAL,KAAc,IAAlB,EAAwB;AACvBe,UAAAA,IAAI,GAAG,IAAIpB,gBAAJ,CAAqB,WAAWY,UAAU,GAAG,CAAxB,CAArB,EAAiD,gBAAjD,CAAP;AACAQ,UAAAA,IAAI,CAACC,SAAL,CAAe,IAAf;AACA,SAHD,MAGO;AACND,UAAAA,IAAI,GAAG,IAAIpB,gBAAJ,CAAqB,WAAWY,UAAU,GAAG,CAAxB,CAArB,EAAiD,gBAAjD,CAAP;AACAQ,UAAAA,IAAI,CAACE,UAAL,CAAgB,KAAhB;AACA;;AACD,YAAIC,KAAK,GAAG,KAAKT,KAAL,CAAWC,GAAX,CAAeC,gBAAf,GAAkCQ,qBAAlC,CAAwDlB,KAAxD,CAAZ;AACAc,QAAAA,IAAI,CAACK,WAAL,CAAiBF,KAAjB;AACA,aAAKT,KAAL,CAAWC,GAAX,CACEC,gBADF,GAEEC,QAFF,GAGES,OAHF,CAGUN,IAHV;AAIA,aAAKO,WAAL;AACA,OAzBF;AA0BC,MAAA,UAAU,EAAErB,KAAK,IAAI;AACpBA,QAAAA,KAAK,CAACsB,cAAN;AACA,OA5BF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA8BE,oBAAC,YAAD;AAAc,MAAA,SAAS,EAAC,iBAAxB;AAA0C,MAAA,MAAM,EAAE,KAAKd,KAAL,CAAWC,GAAX,CAAeC,gBAAf,EAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9BF,CALD,CAJD,CADD;AA8CA;;AAhD+D;AAApDd,U","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { TrayWidget } from './TrayWidget';\nimport { Application } from '../Application';\nimport { TrayItemWidget } from './TrayItemWidget';\nimport { DefaultNodeModel } from '@projectstorm/react-diagrams';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport './style.css';\n\nexport interface BodyWidgetProps {\n\tapp: Application;\n}\n\n\nexport class BodyWidget extends React.Component<BodyWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div>\n\t\t\t\t\t<div className=\"title\">Storm React Diagrams - DnD demo</div>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<TrayWidget>\n\t\t\t\t\t\t<TrayItemWidget model={{ type: 'in' }} name=\"In Node\" color=\"rgb(192,255,0)\" />\n\t\t\t\t\t\t<TrayItemWidget model={{ type: 'out' }} name=\"Out Node\" color=\"rgb(0,192,255)\" />\n\t\t\t\t\t</TrayWidget>\n\t\t\t\t\t<div\n\t\t\t\t\t\tonDrop={event => {\n\t\t\t\t\t\t\tvar data = JSON.parse(event.dataTransfer.getData('storm-diagram-node'));\n\t\t\t\t\t\t\tvar nodesCount = _.keys(\n\t\t\t\t\t\t\t\tthis.props.app\n\t\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t\t.getModel()\n\t\t\t\t\t\t\t\t\t.getNodes()\n\t\t\t\t\t\t\t).length;\n\n\t\t\t\t\t\t\tvar node: DefaultNodeModel = null;\n\t\t\t\t\t\t\tif (data.type === 'in') {\n\t\t\t\t\t\t\t\tnode = new DefaultNodeModel('Node ' + (nodesCount + 1), 'rgb(192,255,0)');\n\t\t\t\t\t\t\t\tnode.addInPort('In');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnode = new DefaultNodeModel('Node ' + (nodesCount + 1), 'rgb(0,192,255)');\n\t\t\t\t\t\t\t\tnode.addOutPort('Out');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar point = this.props.app.getDiagramEngine().getRelativeMousePoint(event);\n\t\t\t\t\t\t\tnode.setPosition(point);\n\t\t\t\t\t\t\tthis.props.app\n\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t.getModel()\n\t\t\t\t\t\t\t\t.addNode(node);\n\t\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonDragOver={event => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t<CanvasWidget className=\"srd-demo-canvas\" engine={this.props.app.getDiagramEngine()} />\n\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}"]},"metadata":{},"sourceType":"module"}