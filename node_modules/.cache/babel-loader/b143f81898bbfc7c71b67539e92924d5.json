{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst closest = require(\"closest\");\n\nclass Toolkit {\n  /**\n   * Generats a unique ID (thanks Stack overflow :3)\n   * @returns {String}\n   */\n  static UID() {\n    if (Toolkit.TESTING) {\n      Toolkit.TESTING_UID++;\n      return `${Toolkit.TESTING_UID}`;\n    }\n\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n      const r = Math.random() * 16 | 0;\n      const v = c === 'x' ? r : r & 0x3 | 0x8;\n      return v.toString(16);\n    });\n  }\n  /**\n   * Finds the closest element as a polyfill\n   */\n\n\n  static closest(element, selector) {\n    if (document.body.closest) {\n      return element.closest(selector);\n    }\n\n    return closest(element, selector);\n  }\n\n}\n\nToolkit.TESTING = false;\nToolkit.TESTING_UID = 0;\nexports.Toolkit = Toolkit;","map":{"version":3,"sources":["../../src/Toolkit.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,MAAa,OAAb,CAAoB;AAInB;;;;AAIO,SAAO,GAAP,GAAU;AAChB,QAAI,OAAO,CAAC,OAAZ,EAAqB;AACpB,MAAA,OAAO,CAAC,WAAR;AACA,aAAO,GAAG,OAAO,CAAC,WAAW,EAA7B;AACA;;AACD,WAAO,uCAAuC,OAAvC,CAA+C,OAA/C,EAAwD,CAAC,IAAG;AAClE,YAAM,CAAC,GAAI,IAAI,CAAC,MAAL,KAAgB,EAAjB,GAAuB,CAAjC;AACA,YAAM,CAAC,GAAG,CAAC,KAAK,GAAN,GAAY,CAAZ,GAAiB,CAAC,GAAG,GAAL,GAAY,GAAtC;AACA,aAAO,CAAC,CAAC,QAAF,CAAW,EAAX,CAAP;AACA,KAJM,CAAP;AAKA;AAED;;;;;AAGO,SAAO,OAAP,CAAe,OAAf,EAAiC,QAAjC,EAAiD;AACvD,QAAI,QAAQ,CAAC,IAAT,CAAc,OAAlB,EAA2B;AAC1B,aAAO,OAAO,CAAC,OAAR,CAAgB,QAAhB,CAAP;AACA;;AACD,WAAO,OAAO,CAAC,OAAD,EAAU,QAAV,CAAd;AACA;;AA5BkB;;AACZ,OAAA,CAAA,OAAA,GAAmB,KAAnB;AACA,OAAA,CAAA,WAAA,GAAc,CAAd;AAFR,OAAA,CAAA,OAAA,GAAA,OAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst closest = require(\"closest\");\nclass Toolkit {\n    /**\n     * Generats a unique ID (thanks Stack overflow :3)\n     * @returns {String}\n     */\n    static UID() {\n        if (Toolkit.TESTING) {\n            Toolkit.TESTING_UID++;\n            return `${Toolkit.TESTING_UID}`;\n        }\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n            const r = (Math.random() * 16) | 0;\n            const v = c === 'x' ? r : (r & 0x3) | 0x8;\n            return v.toString(16);\n        });\n    }\n    /**\n     * Finds the closest element as a polyfill\n     */\n    static closest(element, selector) {\n        if (document.body.closest) {\n            return element.closest(selector);\n        }\n        return closest(element, selector);\n    }\n}\nToolkit.TESTING = false;\nToolkit.TESTING_UID = 0;\nexports.Toolkit = Toolkit;\n//# sourceMappingURL=Toolkit.js.map"]},"metadata":{},"sourceType":"script"}