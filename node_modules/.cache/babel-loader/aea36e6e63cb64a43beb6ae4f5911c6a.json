{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst react_diagrams_core_1 = require(\"@projectstorm/react-diagrams-core\");\n\nconst DefaultPortModel_1 = require(\"../port/DefaultPortModel\");\n\nclass DefaultNodeModel extends react_diagrams_core_1.NodeModel {\n  constructor(options = {}, color) {\n    if (typeof options === 'string') {\n      options = {\n        name: options,\n        color: color\n      };\n    }\n\n    super(Object.assign({\n      type: 'default',\n      name: 'Untitled',\n      color: 'rgb(0,192,255)'\n    }, options));\n    this.portsOut = [];\n    this.portsIn = [];\n  }\n\n  doClone(lookupTable, clone) {\n    clone.portsIn = [];\n    clone.portsOut = [];\n    super.doClone(lookupTable, clone);\n  }\n\n  removePort(port) {\n    super.removePort(port);\n\n    if (port.getOptions().in) {\n      this.portsIn.splice(this.portsIn.indexOf(port), 1);\n    } else {\n      this.portsOut.splice(this.portsOut.indexOf(port), 1);\n    }\n  }\n\n  addPort(port) {\n    super.addPort(port);\n\n    if (port.getOptions().in) {\n      if (this.portsIn.indexOf(port) === -1) {\n        this.portsIn.push(port);\n      }\n    } else {\n      if (this.portsOut.indexOf(port) === -1) {\n        this.portsOut.push(port);\n      }\n    }\n\n    return port;\n  }\n\n  addInPort(label, after = true) {\n    const p = new DefaultPortModel_1.DefaultPortModel({\n      in: true,\n      name: label,\n      label: label,\n      alignment: react_diagrams_core_1.PortModelAlignment.LEFT\n    });\n\n    if (!after) {\n      this.portsIn.splice(0, 0, p);\n    }\n\n    return this.addPort(p);\n  }\n\n  addOutPort(label, after = true) {\n    const p = new DefaultPortModel_1.DefaultPortModel({\n      in: false,\n      name: label,\n      label: label,\n      alignment: react_diagrams_core_1.PortModelAlignment.RIGHT\n    });\n\n    if (!after) {\n      this.portsOut.splice(0, 0, p);\n    }\n\n    return this.addPort(p);\n  }\n\n  deserialize(event) {\n    super.deserialize(event);\n    this.options.name = event.data.name;\n    this.options.color = event.data.color;\n    this.portsIn = _.map(event.data.portsInOrder, id => {\n      return this.getPortFromID(id);\n    });\n    this.portsOut = _.map(event.data.portsOutOrder, id => {\n      return this.getPortFromID(id);\n    });\n  }\n\n  serialize() {\n    return Object.assign({}, super.serialize(), {\n      name: this.options.name,\n      color: this.options.color,\n      portsInOrder: _.map(this.portsIn, port => {\n        return port.getID();\n      }),\n      portsOutOrder: _.map(this.portsOut, port => {\n        return port.getID();\n      })\n    });\n  }\n\n  getInPorts() {\n    return this.portsIn;\n  }\n\n  getOutPorts() {\n    return this.portsOut;\n  }\n\n}\n\nexports.DefaultNodeModel = DefaultNodeModel;","map":{"version":3,"sources":["../../../src/node/DefaultNodeModel.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst react_diagrams_core_1 = require(\"@projectstorm/react-diagrams-core\");\nconst DefaultPortModel_1 = require(\"../port/DefaultPortModel\");\nclass DefaultNodeModel extends react_diagrams_core_1.NodeModel {\n    constructor(options = {}, color) {\n        if (typeof options === 'string') {\n            options = {\n                name: options,\n                color: color\n            };\n        }\n        super(Object.assign({ type: 'default', name: 'Untitled', color: 'rgb(0,192,255)' }, options));\n        this.portsOut = [];\n        this.portsIn = [];\n    }\n    doClone(lookupTable, clone) {\n        clone.portsIn = [];\n        clone.portsOut = [];\n        super.doClone(lookupTable, clone);\n    }\n    removePort(port) {\n        super.removePort(port);\n        if (port.getOptions().in) {\n            this.portsIn.splice(this.portsIn.indexOf(port), 1);\n        }\n        else {\n            this.portsOut.splice(this.portsOut.indexOf(port), 1);\n        }\n    }\n    addPort(port) {\n        super.addPort(port);\n        if (port.getOptions().in) {\n            if (this.portsIn.indexOf(port) === -1) {\n                this.portsIn.push(port);\n            }\n        }\n        else {\n            if (this.portsOut.indexOf(port) === -1) {\n                this.portsOut.push(port);\n            }\n        }\n        return port;\n    }\n    addInPort(label, after = true) {\n        const p = new DefaultPortModel_1.DefaultPortModel({\n            in: true,\n            name: label,\n            label: label,\n            alignment: react_diagrams_core_1.PortModelAlignment.LEFT\n        });\n        if (!after) {\n            this.portsIn.splice(0, 0, p);\n        }\n        return this.addPort(p);\n    }\n    addOutPort(label, after = true) {\n        const p = new DefaultPortModel_1.DefaultPortModel({\n            in: false,\n            name: label,\n            label: label,\n            alignment: react_diagrams_core_1.PortModelAlignment.RIGHT\n        });\n        if (!after) {\n            this.portsOut.splice(0, 0, p);\n        }\n        return this.addPort(p);\n    }\n    deserialize(event) {\n        super.deserialize(event);\n        this.options.name = event.data.name;\n        this.options.color = event.data.color;\n        this.portsIn = _.map(event.data.portsInOrder, id => {\n            return this.getPortFromID(id);\n        });\n        this.portsOut = _.map(event.data.portsOutOrder, id => {\n            return this.getPortFromID(id);\n        });\n    }\n    serialize() {\n        return Object.assign({}, super.serialize(), { name: this.options.name, color: this.options.color, portsInOrder: _.map(this.portsIn, port => {\n                return port.getID();\n            }), portsOutOrder: _.map(this.portsOut, port => {\n                return port.getID();\n            }) });\n    }\n    getInPorts() {\n        return this.portsIn;\n    }\n    getOutPorts() {\n        return this.portsOut;\n    }\n}\nexports.DefaultNodeModel = DefaultNodeModel;\n//# sourceMappingURL=DefaultNodeModel.js.map"]},"metadata":{},"sourceType":"script"}