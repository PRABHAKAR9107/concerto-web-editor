{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst react_diagrams_core_1 = require(\"@projectstorm/react-diagrams-core\");\n\nconst DefaultLabelModel_1 = require(\"../label/DefaultLabelModel\");\n\nconst geometry_1 = require(\"@projectstorm/geometry\");\n\nclass DefaultLinkModel extends react_diagrams_core_1.LinkModel {\n  constructor(options = {}) {\n    super(Object.assign({\n      type: 'default',\n      width: options.width || 3,\n      color: options.color || 'gray',\n      selectedColor: options.selectedColor || 'rgb(0,192,255)',\n      curvyness: 50\n    }, options));\n  }\n\n  calculateControlOffset(port) {\n    if (port.getOptions().alignment === react_diagrams_core_1.PortModelAlignment.RIGHT) {\n      return [this.options.curvyness, 0];\n    } else if (port.getOptions().alignment === react_diagrams_core_1.PortModelAlignment.LEFT) {\n      return [-this.options.curvyness, 0];\n    } else if (port.getOptions().alignment === react_diagrams_core_1.PortModelAlignment.TOP) {\n      return [0, -this.options.curvyness];\n    }\n\n    return [0, this.options.curvyness];\n  }\n\n  getSVGPath() {\n    if (this.points.length == 2) {\n      const curve = new geometry_1.BezierCurve();\n      curve.setSource(this.getFirstPoint().getPosition());\n      curve.setTarget(this.getLastPoint().getPosition());\n      curve.setSourceControl(this.getFirstPoint().getPosition().clone());\n      curve.setTargetControl(this.getLastPoint().getPosition().clone());\n\n      if (this.sourcePort) {\n        curve.getSourceControl().translate(...this.calculateControlOffset(this.getSourcePort()));\n      }\n\n      if (this.targetPort) {\n        curve.getTargetControl().translate(...this.calculateControlOffset(this.getTargetPort()));\n      }\n\n      return curve.getSVGCurve();\n    }\n  }\n\n  serialize() {\n    return Object.assign({}, super.serialize(), {\n      width: this.options.width,\n      color: this.options.color,\n      curvyness: this.options.curvyness,\n      selectedColor: this.options.selectedColor\n    });\n  }\n\n  deserialize(event) {\n    super.deserialize(event);\n    this.options.color = event.data.color;\n    this.options.width = event.data.width;\n    this.options.curvyness = event.data.curvyness;\n    this.options.selectedColor = event.data.selectedColor;\n  }\n\n  addLabel(label) {\n    if (label instanceof react_diagrams_core_1.LabelModel) {\n      return super.addLabel(label);\n    }\n\n    let labelOb = new DefaultLabelModel_1.DefaultLabelModel();\n    labelOb.setLabel(label);\n    return super.addLabel(labelOb);\n  }\n\n  setWidth(width) {\n    this.options.width = width;\n    this.fireEvent({\n      width\n    }, 'widthChanged');\n  }\n\n  setColor(color) {\n    this.options.color = color;\n    this.fireEvent({\n      color\n    }, 'colorChanged');\n  }\n\n}\n\nexports.DefaultLinkModel = DefaultLinkModel;","map":{"version":3,"sources":["../../../src/link/DefaultLinkModel.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_diagrams_core_1 = require(\"@projectstorm/react-diagrams-core\");\nconst DefaultLabelModel_1 = require(\"../label/DefaultLabelModel\");\nconst geometry_1 = require(\"@projectstorm/geometry\");\nclass DefaultLinkModel extends react_diagrams_core_1.LinkModel {\n    constructor(options = {}) {\n        super(Object.assign({ type: 'default', width: options.width || 3, color: options.color || 'gray', selectedColor: options.selectedColor || 'rgb(0,192,255)', curvyness: 50 }, options));\n    }\n    calculateControlOffset(port) {\n        if (port.getOptions().alignment === react_diagrams_core_1.PortModelAlignment.RIGHT) {\n            return [this.options.curvyness, 0];\n        }\n        else if (port.getOptions().alignment === react_diagrams_core_1.PortModelAlignment.LEFT) {\n            return [-this.options.curvyness, 0];\n        }\n        else if (port.getOptions().alignment === react_diagrams_core_1.PortModelAlignment.TOP) {\n            return [0, -this.options.curvyness];\n        }\n        return [0, this.options.curvyness];\n    }\n    getSVGPath() {\n        if (this.points.length == 2) {\n            const curve = new geometry_1.BezierCurve();\n            curve.setSource(this.getFirstPoint().getPosition());\n            curve.setTarget(this.getLastPoint().getPosition());\n            curve.setSourceControl(this.getFirstPoint()\n                .getPosition()\n                .clone());\n            curve.setTargetControl(this.getLastPoint()\n                .getPosition()\n                .clone());\n            if (this.sourcePort) {\n                curve.getSourceControl().translate(...this.calculateControlOffset(this.getSourcePort()));\n            }\n            if (this.targetPort) {\n                curve.getTargetControl().translate(...this.calculateControlOffset(this.getTargetPort()));\n            }\n            return curve.getSVGCurve();\n        }\n    }\n    serialize() {\n        return Object.assign({}, super.serialize(), { width: this.options.width, color: this.options.color, curvyness: this.options.curvyness, selectedColor: this.options.selectedColor });\n    }\n    deserialize(event) {\n        super.deserialize(event);\n        this.options.color = event.data.color;\n        this.options.width = event.data.width;\n        this.options.curvyness = event.data.curvyness;\n        this.options.selectedColor = event.data.selectedColor;\n    }\n    addLabel(label) {\n        if (label instanceof react_diagrams_core_1.LabelModel) {\n            return super.addLabel(label);\n        }\n        let labelOb = new DefaultLabelModel_1.DefaultLabelModel();\n        labelOb.setLabel(label);\n        return super.addLabel(labelOb);\n    }\n    setWidth(width) {\n        this.options.width = width;\n        this.fireEvent({ width }, 'widthChanged');\n    }\n    setColor(color) {\n        this.options.color = color;\n        this.fireEvent({ color }, 'colorChanged');\n    }\n}\nexports.DefaultLinkModel = DefaultLinkModel;\n//# sourceMappingURL=DefaultLinkModel.js.map"]},"metadata":{},"sourceType":"script"}