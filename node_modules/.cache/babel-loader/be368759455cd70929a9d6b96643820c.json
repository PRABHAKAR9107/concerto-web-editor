{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst AbstractDisplacementState_1 = require(\"../core-state/AbstractDisplacementState\");\n\nconst Action_1 = require(\"../core-actions/Action\");\n\nconst BasePositionModel_1 = require(\"../core-models/BasePositionModel\");\n\nclass MoveItemsState extends AbstractDisplacementState_1.AbstractDisplacementState {\n  constructor() {\n    super({\n      name: 'move-items'\n    });\n    this.registerAction(new Action_1.Action({\n      type: Action_1.InputType.MOUSE_DOWN,\n      fire: event => {\n        const element = this.engine.getActionEventBus().getModelForEvent(event);\n\n        if (!element.isSelected()) {\n          this.engine.getModel().clearSelection();\n        }\n\n        element.setSelected(true);\n        this.engine.repaintCanvas();\n      }\n    }));\n  }\n\n  activated(previous) {\n    super.activated(previous);\n    this.initialPositions = {};\n  }\n\n  fireMouseMoved(event) {\n    const items = this.engine.getModel().getSelectedEntities();\n    const model = this.engine.getModel();\n\n    for (let item of items) {\n      if (item instanceof BasePositionModel_1.BasePositionModel) {\n        if (item.isLocked()) {\n          continue;\n        }\n\n        if (!this.initialPositions[item.getID()]) {\n          this.initialPositions[item.getID()] = {\n            point: item.getPosition(),\n            item: item\n          };\n        }\n\n        const pos = this.initialPositions[item.getID()].point;\n        item.setPosition(model.getGridPosition(pos.x + event.virtualDisplacementX), model.getGridPosition(pos.y + event.virtualDisplacementY));\n      }\n    }\n\n    this.engine.repaintCanvas();\n  }\n\n}\n\nexports.MoveItemsState = MoveItemsState;","map":{"version":3,"sources":["../../../src/states/MoveItemsState.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,2BAAA,GAAA,OAAA,CAAA,yCAAA,CAAA;;AAEA,MAAA,QAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AACA,MAAA,mBAAA,GAAA,OAAA,CAAA,kCAAA,CAAA;;AAKA,MAAa,cAAb,SAA2E,2BAAA,CAAA,yBAA3E,CAAuG;AAQtG,EAAA,WAAA,GAAA;AACC,UAAM;AACL,MAAA,IAAI,EAAE;AADD,KAAN;AAGA,SAAK,cAAL,CACC,IAAI,QAAA,CAAA,MAAJ,CAAW;AACV,MAAA,IAAI,EAAE,QAAA,CAAA,SAAA,CAAU,UADN;AAEV,MAAA,IAAI,EAAG,KAAD,IAAyC;AAC9C,cAAM,OAAO,GAAG,KAAK,MAAL,CAAY,iBAAZ,GAAgC,gBAAhC,CAAiD,KAAjD,CAAhB;;AACA,YAAI,CAAC,OAAO,CAAC,UAAR,EAAL,EAA2B;AAC1B,eAAK,MAAL,CAAY,QAAZ,GAAuB,cAAvB;AACA;;AACD,QAAA,OAAO,CAAC,WAAR,CAAoB,IAApB;AACA,aAAK,MAAL,CAAY,aAAZ;AACA;AATS,KAAX,CADD;AAaA;;AAED,EAAA,SAAS,CAAC,QAAD,EAAgB;AACxB,UAAM,SAAN,CAAgB,QAAhB;AACA,SAAK,gBAAL,GAAwB,EAAxB;AACA;;AAED,EAAA,cAAc,CAAC,KAAD,EAAsC;AACnD,UAAM,KAAK,GAAG,KAAK,MAAL,CAAY,QAAZ,GAAuB,mBAAvB,EAAd;AACA,UAAM,KAAK,GAAG,KAAK,MAAL,CAAY,QAAZ,EAAd;;AACA,SAAK,IAAI,IAAT,IAAiB,KAAjB,EAAwB;AACvB,UAAI,IAAI,YAAY,mBAAA,CAAA,iBAApB,EAAuC;AACtC,YAAI,IAAI,CAAC,QAAL,EAAJ,EAAqB;AACpB;AACA;;AACD,YAAI,CAAC,KAAK,gBAAL,CAAsB,IAAI,CAAC,KAAL,EAAtB,CAAL,EAA0C;AACzC,eAAK,gBAAL,CAAsB,IAAI,CAAC,KAAL,EAAtB,IAAsC;AACrC,YAAA,KAAK,EAAE,IAAI,CAAC,WAAL,EAD8B;AAErC,YAAA,IAAI,EAAE;AAF+B,WAAtC;AAIA;;AAED,cAAM,GAAG,GAAG,KAAK,gBAAL,CAAsB,IAAI,CAAC,KAAL,EAAtB,EAAoC,KAAhD;AACA,QAAA,IAAI,CAAC,WAAL,CACC,KAAK,CAAC,eAAN,CAAsB,GAAG,CAAC,CAAJ,GAAQ,KAAK,CAAC,oBAApC,CADD,EAEC,KAAK,CAAC,eAAN,CAAsB,GAAG,CAAC,CAAJ,GAAQ,KAAK,CAAC,oBAApC,CAFD;AAIA;AACD;;AACD,SAAK,MAAL,CAAY,aAAZ;AACA;;AAvDqG;;AAAvG,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst AbstractDisplacementState_1 = require(\"../core-state/AbstractDisplacementState\");\nconst Action_1 = require(\"../core-actions/Action\");\nconst BasePositionModel_1 = require(\"../core-models/BasePositionModel\");\nclass MoveItemsState extends AbstractDisplacementState_1.AbstractDisplacementState {\n    constructor() {\n        super({\n            name: 'move-items'\n        });\n        this.registerAction(new Action_1.Action({\n            type: Action_1.InputType.MOUSE_DOWN,\n            fire: (event) => {\n                const element = this.engine.getActionEventBus().getModelForEvent(event);\n                if (!element.isSelected()) {\n                    this.engine.getModel().clearSelection();\n                }\n                element.setSelected(true);\n                this.engine.repaintCanvas();\n            }\n        }));\n    }\n    activated(previous) {\n        super.activated(previous);\n        this.initialPositions = {};\n    }\n    fireMouseMoved(event) {\n        const items = this.engine.getModel().getSelectedEntities();\n        const model = this.engine.getModel();\n        for (let item of items) {\n            if (item instanceof BasePositionModel_1.BasePositionModel) {\n                if (item.isLocked()) {\n                    continue;\n                }\n                if (!this.initialPositions[item.getID()]) {\n                    this.initialPositions[item.getID()] = {\n                        point: item.getPosition(),\n                        item: item\n                    };\n                }\n                const pos = this.initialPositions[item.getID()].point;\n                item.setPosition(model.getGridPosition(pos.x + event.virtualDisplacementX), model.getGridPosition(pos.y + event.virtualDisplacementY));\n            }\n        }\n        this.engine.repaintCanvas();\n    }\n}\nexports.MoveItemsState = MoveItemsState;\n//# sourceMappingURL=MoveItemsState.js.map"]},"metadata":{},"sourceType":"script"}