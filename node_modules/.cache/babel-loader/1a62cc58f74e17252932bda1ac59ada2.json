{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst react_diagrams_core_1 = require(\"@projectstorm/react-diagrams-core\");\n\nconst dagre = require(\"dagre\");\n\nconst _ = require(\"lodash\");\n\nconst geometry_1 = require(\"@projectstorm/geometry\");\n\nclass DagreEngine {\n  constructor(options = {}) {\n    this.options = options;\n  }\n\n  redistribute(model) {\n    // Create a new directed graph\n    var g = new dagre.graphlib.Graph({\n      multigraph: true\n    });\n    g.setGraph(this.options.graph || {});\n    g.setDefaultEdgeLabel(function () {\n      return {};\n    });\n    const processedlinks = {}; // set nodes\n\n    _.forEach(model.getNodes(), node => {\n      g.setNode(node.getID(), {\n        width: node.width,\n        height: node.height\n      });\n    });\n\n    _.forEach(model.getLinks(), link => {\n      // set edges\n      if (link.getSourcePort() && link.getTargetPort()) {\n        processedlinks[link.getID()] = true;\n        g.setEdge({\n          v: link.getSourcePort().getNode().getID(),\n          w: link.getTargetPort().getNode().getID(),\n          name: link.getID()\n        });\n      }\n    }); // layout the graph\n\n\n    dagre.layout(g);\n    g.nodes().forEach(v => {\n      const node = g.node(v);\n      model.getNode(v).setPosition(node.x - node.width / 2, node.y - node.height / 2);\n    }); // also include links?\n\n    if (this.options.includeLinks) {\n      g.edges().forEach(e => {\n        const edge = g.edge(e);\n        const link = model.getLink(e.name);\n        const points = [link.getFirstPoint()];\n\n        for (let i = 1; i < edge.points.length - 2; i++) {\n          points.push(new react_diagrams_core_1.PointModel({\n            link: link,\n            position: new geometry_1.Point(edge.points[i].x, edge.points[i].y)\n          }));\n        }\n\n        link.setPoints(points.concat(link.getLastPoint()));\n      });\n    }\n  }\n\n}\n\nexports.DagreEngine = DagreEngine;","map":{"version":3,"sources":["../../../src/dagre/DagreEngine.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_diagrams_core_1 = require(\"@projectstorm/react-diagrams-core\");\nconst dagre = require(\"dagre\");\nconst _ = require(\"lodash\");\nconst geometry_1 = require(\"@projectstorm/geometry\");\nclass DagreEngine {\n    constructor(options = {}) {\n        this.options = options;\n    }\n    redistribute(model) {\n        // Create a new directed graph\n        var g = new dagre.graphlib.Graph({\n            multigraph: true\n        });\n        g.setGraph(this.options.graph || {});\n        g.setDefaultEdgeLabel(function () {\n            return {};\n        });\n        const processedlinks = {};\n        // set nodes\n        _.forEach(model.getNodes(), node => {\n            g.setNode(node.getID(), { width: node.width, height: node.height });\n        });\n        _.forEach(model.getLinks(), link => {\n            // set edges\n            if (link.getSourcePort() && link.getTargetPort()) {\n                processedlinks[link.getID()] = true;\n                g.setEdge({\n                    v: link\n                        .getSourcePort()\n                        .getNode()\n                        .getID(),\n                    w: link\n                        .getTargetPort()\n                        .getNode()\n                        .getID(),\n                    name: link.getID()\n                });\n            }\n        });\n        // layout the graph\n        dagre.layout(g);\n        g.nodes().forEach(v => {\n            const node = g.node(v);\n            model.getNode(v).setPosition(node.x - node.width / 2, node.y - node.height / 2);\n        });\n        // also include links?\n        if (this.options.includeLinks) {\n            g.edges().forEach(e => {\n                const edge = g.edge(e);\n                const link = model.getLink(e.name);\n                const points = [link.getFirstPoint()];\n                for (let i = 1; i < edge.points.length - 2; i++) {\n                    points.push(new react_diagrams_core_1.PointModel({ link: link, position: new geometry_1.Point(edge.points[i].x, edge.points[i].y) }));\n                }\n                link.setPoints(points.concat(link.getLastPoint()));\n            });\n        }\n    }\n}\nexports.DagreEngine = DagreEngine;\n//# sourceMappingURL=DagreEngine.js.map"]},"metadata":{},"sourceType":"script"}