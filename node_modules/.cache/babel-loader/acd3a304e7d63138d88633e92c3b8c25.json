{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst geometry_1 = require(\"@projectstorm/geometry\");\n\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\n/**\n * Passed as a parameter to the DiagramWidget\n */\n\n\nclass DiagramEngine extends react_canvas_core_1.CanvasEngine {\n  constructor(options = {}) {\n    super(options);\n    this.maxNumberPointsPerLink = 1000; // create banks for the different factory types\n\n    this.nodeFactories = new react_canvas_core_1.FactoryBank();\n    this.linkFactories = new react_canvas_core_1.FactoryBank();\n    this.portFactories = new react_canvas_core_1.FactoryBank();\n    this.labelFactories = new react_canvas_core_1.FactoryBank();\n\n    const setup = factory => {\n      factory.registerListener({\n        factoryAdded: event => {\n          event.factory.setDiagramEngine(this);\n        },\n        factoryRemoved: event => {\n          event.factory.setDiagramEngine(null);\n        }\n      });\n    };\n\n    setup(this.nodeFactories);\n    setup(this.linkFactories);\n    setup(this.portFactories);\n    setup(this.labelFactories);\n  }\n  /**\n   * Gets a model and element under the mouse cursor\n   */\n\n\n  getMouseElement(event) {\n    var target = event.target;\n    var diagramModel = this.model; //is it a port\n\n    var element = react_canvas_core_1.Toolkit.closest(target, '.port[data-name]');\n\n    if (element) {\n      var nodeElement = react_canvas_core_1.Toolkit.closest(target, '.node[data-nodeid]');\n      return diagramModel.getNode(nodeElement.getAttribute('data-nodeid')).getPort(element.getAttribute('data-name'));\n    } //look for a point\n\n\n    element = react_canvas_core_1.Toolkit.closest(target, '.point[data-id]');\n\n    if (element) {\n      return diagramModel.getLink(element.getAttribute('data-linkid')).getPointModel(element.getAttribute('data-id'));\n    } //look for a link\n\n\n    element = react_canvas_core_1.Toolkit.closest(target, '[data-linkid]');\n\n    if (element) {\n      return diagramModel.getLink(element.getAttribute('data-linkid'));\n    } //look for a node\n\n\n    element = react_canvas_core_1.Toolkit.closest(target, '.node[data-nodeid]');\n\n    if (element) {\n      return diagramModel.getNode(element.getAttribute('data-nodeid'));\n    }\n\n    return null;\n  } //!-------------- FACTORIES ------------\n\n\n  getNodeFactories() {\n    return this.nodeFactories;\n  }\n\n  getLinkFactories() {\n    return this.linkFactories;\n  }\n\n  getLabelFactories() {\n    return this.labelFactories;\n  }\n\n  getPortFactories() {\n    return this.portFactories;\n  }\n\n  getFactoryForNode(node) {\n    if (typeof node === 'string') {\n      return this.nodeFactories.getFactory(node);\n    }\n\n    return this.nodeFactories.getFactory(node.getType());\n  }\n\n  getFactoryForLink(link) {\n    if (typeof link === 'string') {\n      return this.linkFactories.getFactory(link);\n    }\n\n    return this.linkFactories.getFactory(link.getType());\n  }\n\n  getFactoryForLabel(label) {\n    if (typeof label === 'string') {\n      return this.labelFactories.getFactory(label);\n    }\n\n    return this.labelFactories.getFactory(label.getType());\n  }\n\n  getFactoryForPort(port) {\n    if (typeof port === 'string') {\n      return this.portFactories.getFactory(port);\n    }\n\n    return this.portFactories.getFactory(port.getType());\n  }\n\n  generateWidgetForLink(link) {\n    return this.getFactoryForLink(link).generateReactWidget({\n      model: link\n    });\n  }\n\n  generateWidgetForNode(node) {\n    return this.getFactoryForNode(node).generateReactWidget({\n      model: node\n    });\n  }\n\n  getNodeElement(node) {\n    const selector = this.canvas.querySelector(`.node[data-nodeid=\"${node.getID()}\"]`);\n\n    if (selector === null) {\n      throw new Error('Cannot find Node element with nodeID: [' + node.getID() + ']');\n    }\n\n    return selector;\n  }\n\n  getNodePortElement(port) {\n    var selector = this.canvas.querySelector(`.port[data-name=\"${port.getName()}\"][data-nodeid=\"${port.getParent().getID()}\"]`);\n\n    if (selector === null) {\n      throw new Error('Cannot find Node Port element with nodeID: [' + port.getParent().getID() + '] and name: [' + port.getName() + ']');\n    }\n\n    return selector;\n  }\n\n  getPortCenter(port) {\n    return this.getPortCoords(port).getOrigin();\n  }\n  /**\n   * Calculate rectangular coordinates of the port passed in.\n   */\n\n\n  getPortCoords(port, element) {\n    if (!this.canvas) {\n      throw new Error('Canvas needs to be set first');\n    }\n\n    if (!element) {\n      element = this.getNodePortElement(port);\n    }\n\n    const sourceRect = element.getBoundingClientRect();\n    const point = this.getRelativeMousePoint({\n      clientX: sourceRect.left,\n      clientY: sourceRect.top\n    });\n    const zoom = this.model.getZoomLevel() / 100.0;\n    return new geometry_1.Rectangle(point.x, point.y, sourceRect.width / zoom, sourceRect.height / zoom);\n  }\n  /**\n   * Determine the width and height of the node passed in.\n   * It currently assumes nodes have a rectangular shape, can be overriden for customised shapes.\n   */\n\n\n  getNodeDimensions(node) {\n    if (!this.canvas) {\n      return {\n        width: 0,\n        height: 0\n      };\n    }\n\n    const nodeElement = this.getNodeElement(node);\n    const nodeRect = nodeElement.getBoundingClientRect();\n    return {\n      width: nodeRect.width,\n      height: nodeRect.height\n    };\n  }\n\n  getMaxNumberPointsPerLink() {\n    return this.maxNumberPointsPerLink;\n  }\n\n  setMaxNumberPointsPerLink(max) {\n    this.maxNumberPointsPerLink = max;\n  }\n\n}\n\nexports.DiagramEngine = DiagramEngine;","map":{"version":3,"sources":["../../src/DiagramEngine.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst geometry_1 = require(\"@projectstorm/geometry\");\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\n/**\n * Passed as a parameter to the DiagramWidget\n */\nclass DiagramEngine extends react_canvas_core_1.CanvasEngine {\n    constructor(options = {}) {\n        super(options);\n        this.maxNumberPointsPerLink = 1000;\n        // create banks for the different factory types\n        this.nodeFactories = new react_canvas_core_1.FactoryBank();\n        this.linkFactories = new react_canvas_core_1.FactoryBank();\n        this.portFactories = new react_canvas_core_1.FactoryBank();\n        this.labelFactories = new react_canvas_core_1.FactoryBank();\n        const setup = (factory) => {\n            factory.registerListener({\n                factoryAdded: event => {\n                    event.factory.setDiagramEngine(this);\n                },\n                factoryRemoved: event => {\n                    event.factory.setDiagramEngine(null);\n                }\n            });\n        };\n        setup(this.nodeFactories);\n        setup(this.linkFactories);\n        setup(this.portFactories);\n        setup(this.labelFactories);\n    }\n    /**\n     * Gets a model and element under the mouse cursor\n     */\n    getMouseElement(event) {\n        var target = event.target;\n        var diagramModel = this.model;\n        //is it a port\n        var element = react_canvas_core_1.Toolkit.closest(target, '.port[data-name]');\n        if (element) {\n            var nodeElement = react_canvas_core_1.Toolkit.closest(target, '.node[data-nodeid]');\n            return diagramModel.getNode(nodeElement.getAttribute('data-nodeid')).getPort(element.getAttribute('data-name'));\n        }\n        //look for a point\n        element = react_canvas_core_1.Toolkit.closest(target, '.point[data-id]');\n        if (element) {\n            return diagramModel.getLink(element.getAttribute('data-linkid')).getPointModel(element.getAttribute('data-id'));\n        }\n        //look for a link\n        element = react_canvas_core_1.Toolkit.closest(target, '[data-linkid]');\n        if (element) {\n            return diagramModel.getLink(element.getAttribute('data-linkid'));\n        }\n        //look for a node\n        element = react_canvas_core_1.Toolkit.closest(target, '.node[data-nodeid]');\n        if (element) {\n            return diagramModel.getNode(element.getAttribute('data-nodeid'));\n        }\n        return null;\n    }\n    //!-------------- FACTORIES ------------\n    getNodeFactories() {\n        return this.nodeFactories;\n    }\n    getLinkFactories() {\n        return this.linkFactories;\n    }\n    getLabelFactories() {\n        return this.labelFactories;\n    }\n    getPortFactories() {\n        return this.portFactories;\n    }\n    getFactoryForNode(node) {\n        if (typeof node === 'string') {\n            return this.nodeFactories.getFactory(node);\n        }\n        return this.nodeFactories.getFactory(node.getType());\n    }\n    getFactoryForLink(link) {\n        if (typeof link === 'string') {\n            return this.linkFactories.getFactory(link);\n        }\n        return this.linkFactories.getFactory(link.getType());\n    }\n    getFactoryForLabel(label) {\n        if (typeof label === 'string') {\n            return this.labelFactories.getFactory(label);\n        }\n        return this.labelFactories.getFactory(label.getType());\n    }\n    getFactoryForPort(port) {\n        if (typeof port === 'string') {\n            return this.portFactories.getFactory(port);\n        }\n        return this.portFactories.getFactory(port.getType());\n    }\n    generateWidgetForLink(link) {\n        return this.getFactoryForLink(link).generateReactWidget({ model: link });\n    }\n    generateWidgetForNode(node) {\n        return this.getFactoryForNode(node).generateReactWidget({ model: node });\n    }\n    getNodeElement(node) {\n        const selector = this.canvas.querySelector(`.node[data-nodeid=\"${node.getID()}\"]`);\n        if (selector === null) {\n            throw new Error('Cannot find Node element with nodeID: [' + node.getID() + ']');\n        }\n        return selector;\n    }\n    getNodePortElement(port) {\n        var selector = this.canvas.querySelector(`.port[data-name=\"${port.getName()}\"][data-nodeid=\"${port.getParent().getID()}\"]`);\n        if (selector === null) {\n            throw new Error('Cannot find Node Port element with nodeID: [' +\n                port.getParent().getID() +\n                '] and name: [' +\n                port.getName() +\n                ']');\n        }\n        return selector;\n    }\n    getPortCenter(port) {\n        return this.getPortCoords(port).getOrigin();\n    }\n    /**\n     * Calculate rectangular coordinates of the port passed in.\n     */\n    getPortCoords(port, element) {\n        if (!this.canvas) {\n            throw new Error('Canvas needs to be set first');\n        }\n        if (!element) {\n            element = this.getNodePortElement(port);\n        }\n        const sourceRect = element.getBoundingClientRect();\n        const point = this.getRelativeMousePoint({\n            clientX: sourceRect.left,\n            clientY: sourceRect.top\n        });\n        const zoom = this.model.getZoomLevel() / 100.0;\n        return new geometry_1.Rectangle(point.x, point.y, sourceRect.width / zoom, sourceRect.height / zoom);\n    }\n    /**\n     * Determine the width and height of the node passed in.\n     * It currently assumes nodes have a rectangular shape, can be overriden for customised shapes.\n     */\n    getNodeDimensions(node) {\n        if (!this.canvas) {\n            return {\n                width: 0,\n                height: 0\n            };\n        }\n        const nodeElement = this.getNodeElement(node);\n        const nodeRect = nodeElement.getBoundingClientRect();\n        return {\n            width: nodeRect.width,\n            height: nodeRect.height\n        };\n    }\n    getMaxNumberPointsPerLink() {\n        return this.maxNumberPointsPerLink;\n    }\n    setMaxNumberPointsPerLink(max) {\n        this.maxNumberPointsPerLink = max;\n    }\n}\nexports.DiagramEngine = DiagramEngine;\n//# sourceMappingURL=DiagramEngine.js.map"]},"metadata":{},"sourceType":"script"}