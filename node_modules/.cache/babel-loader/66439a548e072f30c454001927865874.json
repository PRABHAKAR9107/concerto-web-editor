{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Toolkit_1 = require(\"../Toolkit\");\n\nconst _ = require(\"lodash\");\n\nconst BaseObserver_1 = require(\"../core/BaseObserver\");\n\nclass BaseEntity extends BaseObserver_1.BaseObserver {\n  constructor(options = {}) {\n    super();\n    this.options = Object.assign({\n      id: Toolkit_1.Toolkit.UID()\n    }, options);\n  }\n\n  getOptions() {\n    return this.options;\n  }\n\n  getID() {\n    return this.options.id;\n  }\n\n  doClone(lookupTable = {}, clone) {\n    /*noop*/\n  }\n\n  clone(lookupTable = {}) {\n    // try and use an existing clone first\n    if (lookupTable[this.options.id]) {\n      return lookupTable[this.options.id];\n    }\n\n    let clone = _.cloneDeep(this);\n\n    clone.options = Object.assign({}, this.options, {\n      id: Toolkit_1.Toolkit.UID()\n    });\n    clone.clearListeners();\n    lookupTable[this.options.id] = clone;\n    this.doClone(lookupTable, clone);\n    return clone;\n  }\n\n  clearListeners() {\n    this.listeners = {};\n  }\n\n  deserialize(event) {\n    this.options.id = event.data.id;\n    this.options.locked = event.data.locked;\n  }\n\n  serialize() {\n    return {\n      id: this.options.id,\n      locked: this.options.locked\n    };\n  }\n\n  fireEvent(event, k) {\n    super.fireEvent(Object.assign({\n      entity: this\n    }, event), k);\n  }\n\n  isLocked() {\n    return this.options.locked;\n  }\n\n  setLocked(locked = true) {\n    this.options.locked = locked;\n    this.fireEvent({\n      locked: locked\n    }, 'lockChanged');\n  }\n\n}\n\nexports.BaseEntity = BaseEntity;","map":{"version":3,"sources":["../../../src/core-models/BaseEntity.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,CAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,MAAA,cAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AA+BA,MAAa,UAAb,SAAmF,cAAA,CAAA,YAAnF,CAA8G;AAG7G,EAAA,WAAA,CAAY,OAAA,GAAwB,EAApC,EAAsC;AACrC;AACA,SAAK,OAAL,GAAY,MAAA,CAAA,MAAA,CAAA;AACX,MAAA,EAAE,EAAE,SAAA,CAAA,OAAA,CAAQ,GAAR;AADO,KAAA,EAER,OAFQ,CAAZ;AAIA;;AAED,EAAA,UAAU,GAAA;AACT,WAAO,KAAK,OAAZ;AACA;;AAED,EAAA,KAAK,GAAA;AACJ,WAAO,KAAK,OAAL,CAAa,EAApB;AACA;;AAED,EAAA,OAAO,CAAC,WAAA,GAAoC,EAArC,EAAyC,KAAzC,EAAmD;AACzD;AACA;;AAED,EAAA,KAAK,CAAC,WAAA,GAAoC,EAArC,EAAuC;AAC3C;AACA,QAAI,WAAW,CAAC,KAAK,OAAL,CAAa,EAAd,CAAf,EAAkC;AACjC,aAAO,WAAW,CAAC,KAAK,OAAL,CAAa,EAAd,CAAlB;AACA;;AACD,QAAI,KAAK,GAAG,CAAC,CAAC,SAAF,CAAY,IAAZ,CAAZ;;AACA,IAAA,KAAK,CAAC,OAAN,GAAa,MAAA,CAAA,MAAA,CAAA,EAAA,EACT,KAAK,OADI,EACG;AACf,MAAA,EAAE,EAAE,SAAA,CAAA,OAAA,CAAQ,GAAR;AADW,KADH,CAAb;AAIA,IAAA,KAAK,CAAC,cAAN;AACA,IAAA,WAAW,CAAC,KAAK,OAAL,CAAa,EAAd,CAAX,GAA+B,KAA/B;AAEA,SAAK,OAAL,CAAa,WAAb,EAA0B,KAA1B;AACA,WAAO,KAAP;AACA;;AAED,EAAA,cAAc,GAAA;AACb,SAAK,SAAL,GAAiB,EAAjB;AACA;;AAED,EAAA,WAAW,CAAC,KAAD,EAA8B;AACxC,SAAK,OAAL,CAAa,EAAb,GAAkB,KAAK,CAAC,IAAN,CAAW,EAA7B;AACA,SAAK,OAAL,CAAa,MAAb,GAAsB,KAAK,CAAC,IAAN,CAAW,MAAjC;AACA;;AAED,EAAA,SAAS,GAAA;AACR,WAAO;AACN,MAAA,EAAE,EAAE,KAAK,OAAL,CAAa,EADX;AAEN,MAAA,MAAM,EAAE,KAAK,OAAL,CAAa;AAFf,KAAP;AAIA;;AAED,EAAA,SAAS,CAA8C,KAA9C,EAAwD,CAAxD,EAA8E;AACtF,UAAM,SAAN,CAAe,MAAA,CAAA,MAAA,CAAA;AAEb,MAAA,MAAM,EAAE;AAFK,KAAA,EAGV,KAHU,CAAf,EAKC,CALD;AAOA;;AAEM,EAAA,QAAQ,GAAA;AACd,WAAO,KAAK,OAAL,CAAa,MAApB;AACA;;AAEM,EAAA,SAAS,CAAC,MAAA,GAAkB,IAAnB,EAAuB;AACtC,SAAK,OAAL,CAAa,MAAb,GAAsB,MAAtB;AACA,SAAK,SAAL,CACC;AACC,MAAA,MAAM,EAAE;AADT,KADD,EAIC,aAJD;AAMA;;AA9E4G;;AAA9G,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Toolkit_1 = require(\"../Toolkit\");\nconst _ = require(\"lodash\");\nconst BaseObserver_1 = require(\"../core/BaseObserver\");\nclass BaseEntity extends BaseObserver_1.BaseObserver {\n    constructor(options = {}) {\n        super();\n        this.options = Object.assign({ id: Toolkit_1.Toolkit.UID() }, options);\n    }\n    getOptions() {\n        return this.options;\n    }\n    getID() {\n        return this.options.id;\n    }\n    doClone(lookupTable = {}, clone) {\n        /*noop*/\n    }\n    clone(lookupTable = {}) {\n        // try and use an existing clone first\n        if (lookupTable[this.options.id]) {\n            return lookupTable[this.options.id];\n        }\n        let clone = _.cloneDeep(this);\n        clone.options = Object.assign({}, this.options, { id: Toolkit_1.Toolkit.UID() });\n        clone.clearListeners();\n        lookupTable[this.options.id] = clone;\n        this.doClone(lookupTable, clone);\n        return clone;\n    }\n    clearListeners() {\n        this.listeners = {};\n    }\n    deserialize(event) {\n        this.options.id = event.data.id;\n        this.options.locked = event.data.locked;\n    }\n    serialize() {\n        return {\n            id: this.options.id,\n            locked: this.options.locked\n        };\n    }\n    fireEvent(event, k) {\n        super.fireEvent(Object.assign({ entity: this }, event), k);\n    }\n    isLocked() {\n        return this.options.locked;\n    }\n    setLocked(locked = true) {\n        this.options.locked = locked;\n        this.fireEvent({\n            locked: locked\n        }, 'lockChanged');\n    }\n}\nexports.BaseEntity = BaseEntity;\n//# sourceMappingURL=BaseEntity.js.map"]},"metadata":{},"sourceType":"script"}