{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst BaseObserver_1 = require(\"./BaseObserver\");\n\nconst _ = require(\"lodash\");\n/**\n * Store and managed Factories that extend from Abstractfactory\n */\n\n\nclass FactoryBank extends BaseObserver_1.BaseObserver {\n  constructor() {\n    super();\n    this.factories = {};\n  }\n\n  getFactories() {\n    return _.values(this.factories);\n  }\n\n  clearFactories() {\n    for (let factory in this.factories) {\n      this.deregisterFactory(factory);\n    }\n  }\n\n  getFactory(type) {\n    if (!this.factories[type]) {\n      throw new Error(`Cannot find factory with type [${type}]`);\n    }\n\n    return this.factories[type];\n  }\n\n  registerFactory(factory) {\n    factory.setFactoryBank(this);\n    this.factories[factory.getType()] = factory; // todo fixme\n\n    this.fireEvent({\n      factory\n    }, 'factoryAdded');\n  }\n\n  deregisterFactory(type) {\n    const factory = this.factories[type];\n    factory.setFactoryBank(null);\n    delete this.factories[type]; // todo fixme\n\n    this.fireEvent({\n      factory\n    }, 'factoryRemoved');\n  }\n\n}\n\nexports.FactoryBank = FactoryBank;","map":{"version":3,"sources":["../../../src/core/FactoryBank.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAEA,MAAA,CAAA,GAAA,OAAA,CAAA,QAAA,CAAA;AAcA;;;;;AAGA,MAAa,WAAb,SAGU,cAAA,CAAA,YAHV,CAGyB;AAGxB,EAAA,WAAA,GAAA;AACC;AACA,SAAK,SAAL,GAAiB,EAAjB;AACA;;AAED,EAAA,YAAY,GAAA;AACX,WAAO,CAAC,CAAC,MAAF,CAAS,KAAK,SAAd,CAAP;AACA;;AAED,EAAA,cAAc,GAAA;AACb,SAAK,IAAI,OAAT,IAAoB,KAAK,SAAzB,EAAoC;AACnC,WAAK,iBAAL,CAAuB,OAAvB;AACA;AACD;;AAED,EAAA,UAAU,CAAkB,IAAlB,EAA8B;AACvC,QAAI,CAAC,KAAK,SAAL,CAAe,IAAf,CAAL,EAA2B;AAC1B,YAAM,IAAI,KAAJ,CAAU,kCAAkC,IAAI,GAAhD,CAAN;AACA;;AACD,WAAO,KAAK,SAAL,CAAe,IAAf,CAAP;AACA;;AAED,EAAA,eAAe,CAAC,OAAD,EAAW;AACzB,IAAA,OAAO,CAAC,cAAR,CAAuB,IAAvB;AACA,SAAK,SAAL,CAAe,OAAO,CAAC,OAAR,EAAf,IAAoC,OAApC,CAFyB,CAGzB;;AACA,SAAK,SAAL,CAA+B;AAAE,MAAA;AAAF,KAA/B,EAAmD,cAAnD;AACA;;AAED,EAAA,iBAAiB,CAAC,IAAD,EAAa;AAC7B,UAAM,OAAO,GAAG,KAAK,SAAL,CAAe,IAAf,CAAhB;AACA,IAAA,OAAO,CAAC,cAAR,CAAuB,IAAvB;AACA,WAAO,KAAK,SAAL,CAAe,IAAf,CAAP,CAH6B,CAI7B;;AACA,SAAK,SAAL,CAAiC;AAAE,MAAA;AAAF,KAAjC,EAAqD,gBAArD;AACA;;AAtCuB;;AAHzB,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst BaseObserver_1 = require(\"./BaseObserver\");\nconst _ = require(\"lodash\");\n/**\n * Store and managed Factories that extend from Abstractfactory\n */\nclass FactoryBank extends BaseObserver_1.BaseObserver {\n    constructor() {\n        super();\n        this.factories = {};\n    }\n    getFactories() {\n        return _.values(this.factories);\n    }\n    clearFactories() {\n        for (let factory in this.factories) {\n            this.deregisterFactory(factory);\n        }\n    }\n    getFactory(type) {\n        if (!this.factories[type]) {\n            throw new Error(`Cannot find factory with type [${type}]`);\n        }\n        return this.factories[type];\n    }\n    registerFactory(factory) {\n        factory.setFactoryBank(this);\n        this.factories[factory.getType()] = factory;\n        // todo fixme\n        this.fireEvent({ factory }, 'factoryAdded');\n    }\n    deregisterFactory(type) {\n        const factory = this.factories[type];\n        factory.setFactoryBank(null);\n        delete this.factories[type];\n        // todo fixme\n        this.fireEvent({ factory }, 'factoryRemoved');\n    }\n}\nexports.FactoryBank = FactoryBank;\n//# sourceMappingURL=FactoryBank.js.map"]},"metadata":{},"sourceType":"script"}