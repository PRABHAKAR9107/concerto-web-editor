{"ast":null,"code":"export var code = `\nnamespace concerto.metamodel\n\nabstract concept DecoratorLiteral {\n}\n\nconcept DecoratorString extends DecoratorLiteral {\n  o String value  \n}\n\nconcept DecoratorNumber extends DecoratorLiteral {\n  o Double value\n}\n\nconcept DecoratorBoolean extends DecoratorLiteral {\n  o Boolean value\n}\n\nconcept TypeIdentifier {\n  o String fullyQualifiedName\n}\n\nconcept DecoratorIdentifier extends DecoratorLiteral {\n  o TypeIdentifier identifier\n  o Boolean isArray default=false\n}\n\nconcept Decorator {\n  o String name\n  o DecoratorLiteral[] arguments optional\n}\n\nabstract concept ClassDeclaration {\n  o Decorator[] decorators optional\n  o Boolean isAbstract default=false\n  o String identifier\n  o String identifiedByField optional\n  o TypeIdentifier superType optional\n}\n\nconcept AssetDeclaration extends ClassDeclaration {\n}\n\nconcept ParticipantDeclaration extends ClassDeclaration {\n}\n\nconcept TransactionDeclaration extends ClassDeclaration {\n}\n\nconcept EventDeclaration extends ClassDeclaration {\n}\n\nconcept ConceptDeclaration extends ClassDeclaration {\n}\n\n// TODO - enums do not support abstract or super types\nconcept EnumDeclaration extends ClassDeclaration {\n}\n\nconcept StringDefault {\n  o String value\n}\n\nconcept BooleanDefault {\n  o Boolean value\n}\n\nconcept IntegerDefault {\n  o Integer value\n}\n\nconcept RealDefault {\n  o Double value\n}\n\nabstract concept FieldDeclaration {\n  o String name\n  o Boolean isArray optional\n  o Boolean isOptional optional \n  o Decorator[] decorators optional\n}\n\nconcept ObjectFieldDeclaration extends FieldDeclaration {\n  o StringDefault defaultValue optional\n  o TypeIdentifier type\n}\n\nconcept BooleanFieldDeclaration extends FieldDeclaration {\n  o BooleanDefault defaultValue optional\n}\n\nconcept DateTimeFieldDeclaration extends FieldDeclaration {\n}\n\nconcept StringFieldDeclaration extends FieldDeclaration {\n  o StringDefault defaultValue optional\n  o StringRegexValidator validator optional\n}\n\nconcept StringRegexValidator {\n  o String regex\n}\n\nconcept RealDomainValidator {\n  o Double lower optional\n  o Double upper optional\n}\n\nconcept IntegerDomainValidator {\n  o Integer lower optional\n  o Integer upper optional\n}\n\nconcept RealFieldDeclaration extends FieldDeclaration {\n  o RealDefault defaultValue optional\n  o RealDomainValidator validator optional\n}\n\nconcept IntegerFieldDeclaration extends FieldDeclaration {\n  o IntegerDefault defaultValue optional\n  o IntegerDomainValidator validator optional\n}\n\nconcept RelationshipDeclaration extends FieldDeclaration {\n  o TypeIdentifier type\n}\n\nabstract concept Import {\n  o String uri optional\n}\n\nconcept NamespaceImport extends Import {\n  o String namespace\n}\n\nconcept TypeImport extends Import {\n  o TypeIdentifier identifier\n}\n\nconcept ModelFile {\n  o String namespace\n  o Import[] imports optional\n  o ClassDeclaration[] declarations optional\n}\n`;","map":{"version":3,"sources":["/home/kanav/proposal_gsoc/concerto-web-editor/src/components/CTO/CTOFile.js"],"names":["code"],"mappings":"AAAA,OAAO,IAAIA,IAAI,GAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAV","sourcesContent":["export var code=`\nnamespace concerto.metamodel\n\nabstract concept DecoratorLiteral {\n}\n\nconcept DecoratorString extends DecoratorLiteral {\n  o String value  \n}\n\nconcept DecoratorNumber extends DecoratorLiteral {\n  o Double value\n}\n\nconcept DecoratorBoolean extends DecoratorLiteral {\n  o Boolean value\n}\n\nconcept TypeIdentifier {\n  o String fullyQualifiedName\n}\n\nconcept DecoratorIdentifier extends DecoratorLiteral {\n  o TypeIdentifier identifier\n  o Boolean isArray default=false\n}\n\nconcept Decorator {\n  o String name\n  o DecoratorLiteral[] arguments optional\n}\n\nabstract concept ClassDeclaration {\n  o Decorator[] decorators optional\n  o Boolean isAbstract default=false\n  o String identifier\n  o String identifiedByField optional\n  o TypeIdentifier superType optional\n}\n\nconcept AssetDeclaration extends ClassDeclaration {\n}\n\nconcept ParticipantDeclaration extends ClassDeclaration {\n}\n\nconcept TransactionDeclaration extends ClassDeclaration {\n}\n\nconcept EventDeclaration extends ClassDeclaration {\n}\n\nconcept ConceptDeclaration extends ClassDeclaration {\n}\n\n// TODO - enums do not support abstract or super types\nconcept EnumDeclaration extends ClassDeclaration {\n}\n\nconcept StringDefault {\n  o String value\n}\n\nconcept BooleanDefault {\n  o Boolean value\n}\n\nconcept IntegerDefault {\n  o Integer value\n}\n\nconcept RealDefault {\n  o Double value\n}\n\nabstract concept FieldDeclaration {\n  o String name\n  o Boolean isArray optional\n  o Boolean isOptional optional \n  o Decorator[] decorators optional\n}\n\nconcept ObjectFieldDeclaration extends FieldDeclaration {\n  o StringDefault defaultValue optional\n  o TypeIdentifier type\n}\n\nconcept BooleanFieldDeclaration extends FieldDeclaration {\n  o BooleanDefault defaultValue optional\n}\n\nconcept DateTimeFieldDeclaration extends FieldDeclaration {\n}\n\nconcept StringFieldDeclaration extends FieldDeclaration {\n  o StringDefault defaultValue optional\n  o StringRegexValidator validator optional\n}\n\nconcept StringRegexValidator {\n  o String regex\n}\n\nconcept RealDomainValidator {\n  o Double lower optional\n  o Double upper optional\n}\n\nconcept IntegerDomainValidator {\n  o Integer lower optional\n  o Integer upper optional\n}\n\nconcept RealFieldDeclaration extends FieldDeclaration {\n  o RealDefault defaultValue optional\n  o RealDomainValidator validator optional\n}\n\nconcept IntegerFieldDeclaration extends FieldDeclaration {\n  o IntegerDefault defaultValue optional\n  o IntegerDomainValidator validator optional\n}\n\nconcept RelationshipDeclaration extends FieldDeclaration {\n  o TypeIdentifier type\n}\n\nabstract concept Import {\n  o String uri optional\n}\n\nconcept NamespaceImport extends Import {\n  o String namespace\n}\n\nconcept TypeImport extends Import {\n  o TypeIdentifier identifier\n}\n\nconcept ModelFile {\n  o String namespace\n  o Import[] imports optional\n  o ClassDeclaration[] declarations optional\n}\n`"]},"metadata":{},"sourceType":"module"}