{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\n\nconst PortModel_1 = require(\"../entities/port/PortModel\");\n\nconst DragNewLinkState_1 = require(\"./DragNewLinkState\");\n\nconst DragDiagramItemsState_1 = require(\"./DragDiagramItemsState\");\n\nclass DefaultDiagramState extends react_canvas_core_1.State {\n  constructor() {\n    super({\n      name: 'default-diagrams'\n    });\n    this.childStates = [new react_canvas_core_1.SelectingState()];\n    this.dragCanvas = new react_canvas_core_1.DragCanvasState();\n    this.dragNewLink = new DragNewLinkState_1.DragNewLinkState();\n    this.dragItems = new DragDiagramItemsState_1.DragDiagramItemsState(); // determine what was clicked on\n\n    this.registerAction(new react_canvas_core_1.Action({\n      type: react_canvas_core_1.InputType.MOUSE_DOWN,\n      fire: event => {\n        const element = this.engine.getActionEventBus().getModelForEvent(event); // the canvas was clicked on, transition to the dragging canvas state\n\n        if (!element) {\n          this.transitionWithEvent(this.dragCanvas, event);\n        } // initiate dragging a new link\n        else if (element instanceof PortModel_1.PortModel) {\n            this.transitionWithEvent(this.dragNewLink, event);\n          } // move the items (and potentially link points)\n          else {\n              this.transitionWithEvent(this.dragItems, event);\n            }\n      }\n    }));\n  }\n\n}\n\nexports.DefaultDiagramState = DefaultDiagramState;","map":{"version":3,"sources":["../../../src/states/DefaultDiagramState.ts"],"names":[],"mappings":";;;;;;AACA,MAAA,mBAAA,GAAA,OAAA,CAAA,iCAAA,CAAA;;AAQA,MAAA,WAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;AACA,MAAA,kBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEA,MAAA,uBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAEA,MAAa,mBAAb,SAAyC,mBAAA,CAAA,KAAzC,CAA6D;AAK5D,EAAA,WAAA,GAAA;AACC,UAAM;AACL,MAAA,IAAI,EAAE;AADD,KAAN;AAGA,SAAK,WAAL,GAAmB,CAAC,IAAI,mBAAA,CAAA,cAAJ,EAAD,CAAnB;AACA,SAAK,UAAL,GAAkB,IAAI,mBAAA,CAAA,eAAJ,EAAlB;AACA,SAAK,WAAL,GAAmB,IAAI,kBAAA,CAAA,gBAAJ,EAAnB;AACA,SAAK,SAAL,GAAiB,IAAI,uBAAA,CAAA,qBAAJ,EAAjB,CAPD,CASC;;AACA,SAAK,cAAL,CACC,IAAI,mBAAA,CAAA,MAAJ,CAAW;AACV,MAAA,IAAI,EAAE,mBAAA,CAAA,SAAA,CAAU,UADN;AAEV,MAAA,IAAI,EAAG,KAAD,IAAmC;AACxC,cAAM,OAAO,GAAG,KAAK,MAAL,CAAY,iBAAZ,GAAgC,gBAAhC,CAAiD,KAAjD,CAAhB,CADwC,CAGxC;;AACA,YAAI,CAAC,OAAL,EAAc;AACb,eAAK,mBAAL,CAAyB,KAAK,UAA9B,EAA0C,KAA1C;AACA,SAFD,CAGA;AAHA,aAIK,IAAI,OAAO,YAAY,WAAA,CAAA,SAAvB,EAAkC;AACtC,iBAAK,mBAAL,CAAyB,KAAK,WAA9B,EAA2C,KAA3C;AACA,WAFI,CAGL;AAHK,eAIA;AACJ,mBAAK,mBAAL,CAAyB,KAAK,SAA9B,EAAyC,KAAzC;AACA;AACD;AAjBS,KAAX,CADD;AAqBA;;AApC2D;;AAA7D,OAAA,CAAA,mBAAA,GAAA,mBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_canvas_core_1 = require(\"@projectstorm/react-canvas-core\");\nconst PortModel_1 = require(\"../entities/port/PortModel\");\nconst DragNewLinkState_1 = require(\"./DragNewLinkState\");\nconst DragDiagramItemsState_1 = require(\"./DragDiagramItemsState\");\nclass DefaultDiagramState extends react_canvas_core_1.State {\n    constructor() {\n        super({\n            name: 'default-diagrams'\n        });\n        this.childStates = [new react_canvas_core_1.SelectingState()];\n        this.dragCanvas = new react_canvas_core_1.DragCanvasState();\n        this.dragNewLink = new DragNewLinkState_1.DragNewLinkState();\n        this.dragItems = new DragDiagramItemsState_1.DragDiagramItemsState();\n        // determine what was clicked on\n        this.registerAction(new react_canvas_core_1.Action({\n            type: react_canvas_core_1.InputType.MOUSE_DOWN,\n            fire: (event) => {\n                const element = this.engine.getActionEventBus().getModelForEvent(event);\n                // the canvas was clicked on, transition to the dragging canvas state\n                if (!element) {\n                    this.transitionWithEvent(this.dragCanvas, event);\n                }\n                // initiate dragging a new link\n                else if (element instanceof PortModel_1.PortModel) {\n                    this.transitionWithEvent(this.dragNewLink, event);\n                }\n                // move the items (and potentially link points)\n                else {\n                    this.transitionWithEvent(this.dragItems, event);\n                }\n            }\n        }));\n    }\n}\nexports.DefaultDiagramState = DefaultDiagramState;\n//# sourceMappingURL=DefaultDiagramState.js.map"]},"metadata":{},"sourceType":"script"}