{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = require(\"react\");\n\nconst react_diagrams_core_1 = require(\"@projectstorm/react-diagrams-core\");\n\nconst DefaultLinkPointWidget_1 = require(\"./DefaultLinkPointWidget\");\n\nconst DefaultLinkSegmentWidget_1 = require(\"./DefaultLinkSegmentWidget\");\n\nclass DefaultLinkWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.refPaths = [];\n    this.state = {\n      selected: false\n    };\n  }\n\n  componentDidUpdate() {\n    this.props.link.setRenderedPaths(this.refPaths.map(ref => {\n      return ref.current;\n    }));\n  }\n\n  componentDidMount() {\n    this.props.link.setRenderedPaths(this.refPaths.map(ref => {\n      return ref.current;\n    }));\n  }\n\n  componentWillUnmount() {\n    this.props.link.setRenderedPaths([]);\n  }\n\n  addPointToLink(event, index) {\n    if (!event.shiftKey && !this.props.link.isLocked() && this.props.link.getPoints().length - 1 <= this.props.diagramEngine.getMaxNumberPointsPerLink()) {\n      const point = new react_diagrams_core_1.PointModel({\n        link: this.props.link,\n        position: this.props.diagramEngine.getRelativeMousePoint(event)\n      });\n      this.props.link.addPoint(point, index);\n      event.persist();\n      event.stopPropagation();\n      this.forceUpdate(() => {\n        this.props.diagramEngine.getActionEventBus().fireAction({\n          event,\n          model: point\n        });\n      });\n    }\n  }\n\n  generatePoint(point) {\n    return React.createElement(DefaultLinkPointWidget_1.DefaultLinkPointWidget, {\n      key: point.getID(),\n      point: point,\n      colorSelected: this.props.link.getOptions().selectedColor,\n      color: this.props.link.getOptions().color\n    });\n  }\n\n  generateLink(path, extraProps, id) {\n    const ref = React.createRef();\n    this.refPaths.push(ref);\n    return React.createElement(DefaultLinkSegmentWidget_1.DefaultLinkSegmentWidget, {\n      key: `link-${id}`,\n      path: path,\n      selected: this.state.selected,\n      diagramEngine: this.props.diagramEngine,\n      factory: this.props.diagramEngine.getFactoryForLink(this.props.link),\n      link: this.props.link,\n      forwardRef: ref,\n      onSelection: selected => {\n        this.setState({\n          selected: selected\n        });\n      },\n      extras: extraProps\n    });\n  }\n\n  render() {\n    //ensure id is present for all points on the path\n    var points = this.props.link.getPoints();\n    var paths = [];\n    this.refPaths = [];\n\n    if (points.length === 2) {\n      paths.push(this.generateLink(this.props.link.getSVGPath(), {\n        onMouseDown: event => {\n          this.addPointToLink(event, 1);\n        }\n      }, '0')); // draw the link as dangeling\n\n      if (this.props.link.getTargetPort() == null) {\n        paths.push(this.generatePoint(points[1]));\n      }\n    } else {\n      //draw the multiple anchors and complex line instead\n      for (let j = 0; j < points.length - 1; j++) {\n        paths.push(this.generateLink(react_diagrams_core_1.LinkWidget.generateLinePath(points[j], points[j + 1]), {\n          'data-linkid': this.props.link.getID(),\n          'data-point': j,\n          onMouseDown: event => {\n            this.addPointToLink(event, j + 1);\n          }\n        }, j));\n      } //render the circles\n\n\n      for (let i = 1; i < points.length - 1; i++) {\n        paths.push(this.generatePoint(points[i]));\n      }\n\n      if (this.props.link.getTargetPort() == null) {\n        paths.push(this.generatePoint(points[points.length - 1]));\n      }\n    }\n\n    return React.createElement(\"g\", {\n      \"data-default-link-test\": this.props.link.getOptions().testName\n    }, paths);\n  }\n\n}\n\nexports.DefaultLinkWidget = DefaultLinkWidget;","map":{"version":3,"sources":["../../../src/link/DefaultLinkWidget.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst React = require(\"react\");\nconst react_diagrams_core_1 = require(\"@projectstorm/react-diagrams-core\");\nconst DefaultLinkPointWidget_1 = require(\"./DefaultLinkPointWidget\");\nconst DefaultLinkSegmentWidget_1 = require(\"./DefaultLinkSegmentWidget\");\nclass DefaultLinkWidget extends React.Component {\n    constructor(props) {\n        super(props);\n        this.refPaths = [];\n        this.state = {\n            selected: false\n        };\n    }\n    componentDidUpdate() {\n        this.props.link.setRenderedPaths(this.refPaths.map(ref => {\n            return ref.current;\n        }));\n    }\n    componentDidMount() {\n        this.props.link.setRenderedPaths(this.refPaths.map(ref => {\n            return ref.current;\n        }));\n    }\n    componentWillUnmount() {\n        this.props.link.setRenderedPaths([]);\n    }\n    addPointToLink(event, index) {\n        if (!event.shiftKey &&\n            !this.props.link.isLocked() &&\n            this.props.link.getPoints().length - 1 <= this.props.diagramEngine.getMaxNumberPointsPerLink()) {\n            const point = new react_diagrams_core_1.PointModel({\n                link: this.props.link,\n                position: this.props.diagramEngine.getRelativeMousePoint(event)\n            });\n            this.props.link.addPoint(point, index);\n            event.persist();\n            event.stopPropagation();\n            this.forceUpdate(() => {\n                this.props.diagramEngine.getActionEventBus().fireAction({\n                    event,\n                    model: point\n                });\n            });\n        }\n    }\n    generatePoint(point) {\n        return (React.createElement(DefaultLinkPointWidget_1.DefaultLinkPointWidget, { key: point.getID(), point: point, colorSelected: this.props.link.getOptions().selectedColor, color: this.props.link.getOptions().color }));\n    }\n    generateLink(path, extraProps, id) {\n        const ref = React.createRef();\n        this.refPaths.push(ref);\n        return (React.createElement(DefaultLinkSegmentWidget_1.DefaultLinkSegmentWidget, { key: `link-${id}`, path: path, selected: this.state.selected, diagramEngine: this.props.diagramEngine, factory: this.props.diagramEngine.getFactoryForLink(this.props.link), link: this.props.link, forwardRef: ref, onSelection: selected => {\n                this.setState({ selected: selected });\n            }, extras: extraProps }));\n    }\n    render() {\n        //ensure id is present for all points on the path\n        var points = this.props.link.getPoints();\n        var paths = [];\n        this.refPaths = [];\n        if (points.length === 2) {\n            paths.push(this.generateLink(this.props.link.getSVGPath(), {\n                onMouseDown: event => {\n                    this.addPointToLink(event, 1);\n                }\n            }, '0'));\n            // draw the link as dangeling\n            if (this.props.link.getTargetPort() == null) {\n                paths.push(this.generatePoint(points[1]));\n            }\n        }\n        else {\n            //draw the multiple anchors and complex line instead\n            for (let j = 0; j < points.length - 1; j++) {\n                paths.push(this.generateLink(react_diagrams_core_1.LinkWidget.generateLinePath(points[j], points[j + 1]), {\n                    'data-linkid': this.props.link.getID(),\n                    'data-point': j,\n                    onMouseDown: (event) => {\n                        this.addPointToLink(event, j + 1);\n                    }\n                }, j));\n            }\n            //render the circles\n            for (let i = 1; i < points.length - 1; i++) {\n                paths.push(this.generatePoint(points[i]));\n            }\n            if (this.props.link.getTargetPort() == null) {\n                paths.push(this.generatePoint(points[points.length - 1]));\n            }\n        }\n        return React.createElement(\"g\", { \"data-default-link-test\": this.props.link.getOptions().testName }, paths);\n    }\n}\nexports.DefaultLinkWidget = DefaultLinkWidget;\n//# sourceMappingURL=DefaultLinkWidget.js.map"]},"metadata":{},"sourceType":"script"}