{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst State_1 = require(\"./State\");\n\nconst Action_1 = require(\"../core-actions/Action\");\n\nclass AbstractDisplacementState extends State_1.State {\n  constructor(options) {\n    super(options);\n    this.registerAction(new Action_1.Action({\n      type: Action_1.InputType.MOUSE_DOWN,\n      fire: actionEvent => {\n        this.initialX = actionEvent.event.clientX;\n        this.initialY = actionEvent.event.clientY;\n        const rel = this.engine.getRelativePoint(actionEvent.event.clientX, actionEvent.event.clientY);\n        this.initialXRelative = rel.x;\n        this.initialYRelative = rel.y;\n      }\n    }));\n    this.registerAction(new Action_1.Action({\n      type: Action_1.InputType.MOUSE_MOVE,\n      fire: actionEvent => {\n        const {\n          event\n        } = actionEvent;\n        this.fireMouseMoved({\n          displacementX: event.clientX - this.initialX,\n          displacementY: event.clientY - this.initialY,\n          virtualDisplacementX: (event.clientX - this.initialX) / (this.engine.getModel().getZoomLevel() / 100.0),\n          virtualDisplacementY: (event.clientY - this.initialY) / (this.engine.getModel().getZoomLevel() / 100.0),\n          event: event\n        });\n      }\n    }));\n    this.registerAction(new Action_1.Action({\n      type: Action_1.InputType.MOUSE_UP,\n      fire: event => {\n        // when the mouse if up, we eject this state\n        this.eject();\n      }\n    }));\n  }\n\n}\n\nexports.AbstractDisplacementState = AbstractDisplacementState;","map":{"version":3,"sources":["../../../src/core-state/AbstractDisplacementState.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAWA,MAAsB,yBAAtB,SAA+F,OAAA,CAAA,KAA/F,CAAuG;AAMtG,EAAA,WAAA,CAAY,OAAZ,EAAiC;AAChC,UAAM,OAAN;AACA,SAAK,cAAL,CACC,IAAI,QAAA,CAAA,MAAJ,CAAW;AACV,MAAA,IAAI,EAAE,QAAA,CAAA,SAAA,CAAU,UADN;AAEV,MAAA,IAAI,EAAG,WAAD,IAA+C;AACpD,aAAK,QAAL,GAAgB,WAAW,CAAC,KAAZ,CAAkB,OAAlC;AACA,aAAK,QAAL,GAAgB,WAAW,CAAC,KAAZ,CAAkB,OAAlC;AACA,cAAM,GAAG,GAAG,KAAK,MAAL,CAAY,gBAAZ,CAA6B,WAAW,CAAC,KAAZ,CAAkB,OAA/C,EAAwD,WAAW,CAAC,KAAZ,CAAkB,OAA1E,CAAZ;AACA,aAAK,gBAAL,GAAwB,GAAG,CAAC,CAA5B;AACA,aAAK,gBAAL,GAAwB,GAAG,CAAC,CAA5B;AACA;AARS,KAAX,CADD;AAYA,SAAK,cAAL,CACC,IAAI,QAAA,CAAA,MAAJ,CAAW;AACV,MAAA,IAAI,EAAE,QAAA,CAAA,SAAA,CAAU,UADN;AAEV,MAAA,IAAI,EAAG,WAAD,IAA+C;AACpD,cAAM;AAAE,UAAA;AAAF,YAAY,WAAlB;AACA,aAAK,cAAL,CAAoB;AACnB,UAAA,aAAa,EAAE,KAAK,CAAC,OAAN,GAAgB,KAAK,QADjB;AAEnB,UAAA,aAAa,EAAE,KAAK,CAAC,OAAN,GAAgB,KAAK,QAFjB;AAGnB,UAAA,oBAAoB,EAAE,CAAC,KAAK,CAAC,OAAN,GAAgB,KAAK,QAAtB,KAAmC,KAAK,MAAL,CAAY,QAAZ,GAAuB,YAAvB,KAAwC,KAA3E,CAHH;AAInB,UAAA,oBAAoB,EAAE,CAAC,KAAK,CAAC,OAAN,GAAgB,KAAK,QAAtB,KAAmC,KAAK,MAAL,CAAY,QAAZ,GAAuB,YAAvB,KAAwC,KAA3E,CAJH;AAKnB,UAAA,KAAK,EAAE;AALY,SAApB;AAOA;AAXS,KAAX,CADD;AAeA,SAAK,cAAL,CACC,IAAI,QAAA,CAAA,MAAJ,CAAW;AACV,MAAA,IAAI,EAAE,QAAA,CAAA,SAAA,CAAU,QADN;AAEV,MAAA,IAAI,EAAG,KAAD,IAAyC;AAC9C;AACA,aAAK,KAAL;AACA;AALS,KAAX,CADD;AASA;;AA5CqG;;AAAvG,OAAA,CAAA,yBAAA,GAAA,yBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst State_1 = require(\"./State\");\nconst Action_1 = require(\"../core-actions/Action\");\nclass AbstractDisplacementState extends State_1.State {\n    constructor(options) {\n        super(options);\n        this.registerAction(new Action_1.Action({\n            type: Action_1.InputType.MOUSE_DOWN,\n            fire: (actionEvent) => {\n                this.initialX = actionEvent.event.clientX;\n                this.initialY = actionEvent.event.clientY;\n                const rel = this.engine.getRelativePoint(actionEvent.event.clientX, actionEvent.event.clientY);\n                this.initialXRelative = rel.x;\n                this.initialYRelative = rel.y;\n            }\n        }));\n        this.registerAction(new Action_1.Action({\n            type: Action_1.InputType.MOUSE_MOVE,\n            fire: (actionEvent) => {\n                const { event } = actionEvent;\n                this.fireMouseMoved({\n                    displacementX: event.clientX - this.initialX,\n                    displacementY: event.clientY - this.initialY,\n                    virtualDisplacementX: (event.clientX - this.initialX) / (this.engine.getModel().getZoomLevel() / 100.0),\n                    virtualDisplacementY: (event.clientY - this.initialY) / (this.engine.getModel().getZoomLevel() / 100.0),\n                    event: event\n                });\n            }\n        }));\n        this.registerAction(new Action_1.Action({\n            type: Action_1.InputType.MOUSE_UP,\n            fire: (event) => {\n                // when the mouse if up, we eject this state\n                this.eject();\n            }\n        }));\n    }\n}\nexports.AbstractDisplacementState = AbstractDisplacementState;\n//# sourceMappingURL=AbstractDisplacementState.js.map"]},"metadata":{},"sourceType":"script"}