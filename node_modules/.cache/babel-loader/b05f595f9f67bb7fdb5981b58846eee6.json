{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst BaseModel_1 = require(\"../../core-models/BaseModel\");\n\nconst _ = require(\"lodash\");\n\nclass LayerModel extends BaseModel_1.BaseModel {\n  constructor(options = {}) {\n    super(options);\n    this.models = {};\n    this.repaintEnabled = true;\n  }\n\n  deserialize(event) {\n    super.deserialize(event);\n    this.options.isSvg = !!event.data.isSvg;\n    this.options.transformed = !!event.data.transformed;\n\n    _.forEach(event.data.models, model => {\n      const modelOb = this.getChildModelFactoryBank(event.engine).getFactory(model.type).generateModel({\n        initialConfig: model\n      });\n      modelOb.deserialize(Object.assign({}, event, {\n        data: model\n      }));\n      this.addModel(modelOb);\n    });\n  }\n\n  serialize() {\n    return Object.assign({}, super.serialize(), {\n      isSvg: this.options.isSvg,\n      transformed: this.options.transformed,\n      models: _.mapValues(this.models, model => {\n        return model.serialize();\n      })\n    });\n  }\n\n  isRepaintEnabled() {\n    return this.repaintEnabled;\n  }\n\n  allowRepaint(allow = true) {\n    this.repaintEnabled = allow;\n  }\n\n  remove() {\n    if (this.parent) {\n      this.parent.removeLayer(this);\n    }\n\n    super.remove();\n  }\n\n  addModel(model) {\n    model.setParent(this);\n    this.models[model.getID()] = model;\n  }\n\n  getSelectionEntities() {\n    return _.flatMap(this.models, model => {\n      return model.getSelectionEntities();\n    });\n  }\n\n  getModels() {\n    return this.models;\n  }\n\n  getModel(id) {\n    return this.models[id];\n  }\n\n  removeModel(id) {\n    const _id = typeof id === 'string' ? id : id.getID();\n\n    if (this.models[_id]) {\n      delete this.models[_id];\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nexports.LayerModel = LayerModel;","map":{"version":3,"sources":["../../../../src/entities/layer/LayerModel.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,WAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AAEA,MAAA,CAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAkBA,MAAsB,UAAtB,SAA4F,WAAA,CAAA,SAA5F,CAAwG;AAIvG,EAAA,WAAA,CAAY,OAAA,GAAwB,EAApC,EAAsC;AACrC,UAAM,OAAN;AACA,SAAK,MAAL,GAAc,EAAd;AACA,SAAK,cAAL,GAAsB,IAAtB;AACA;;AAOD,EAAA,WAAW,CAAC,KAAD,EAA8B;AACxC,UAAM,WAAN,CAAkB,KAAlB;AACA,SAAK,OAAL,CAAa,KAAb,GAAqB,CAAC,CAAC,KAAK,CAAC,IAAN,CAAW,KAAlC;AACA,SAAK,OAAL,CAAa,WAAb,GAA2B,CAAC,CAAC,KAAK,CAAC,IAAN,CAAW,WAAxC;;AACA,IAAA,CAAC,CAAC,OAAF,CAAU,KAAK,CAAC,IAAN,CAAW,MAArB,EAA6B,KAAK,IAAG;AACpC,YAAM,OAAO,GAAG,KAAK,wBAAL,CAA8B,KAAK,CAAC,MAApC,EACd,UADc,CACH,KAAK,CAAC,IADH,EAEd,aAFc,CAEA;AACd,QAAA,aAAa,EAAE;AADD,OAFA,CAAhB;AAKA,MAAA,OAAO,CAAC,WAAR,CAAmB,MAAA,CAAA,MAAA,CAAA,EAAA,EACf,KADe,EACV;AACR,QAAA,IAAI,EAAE;AADE,OADU,CAAnB;AAIA,WAAK,QAAL,CAAc,OAAd;AACA,KAXD;AAYA;;AAED,EAAA,SAAS,GAAA;AACR,WAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACI,MAAM,SAAN,EADJ,EACqB;AACpB,MAAA,KAAK,EAAE,KAAK,OAAL,CAAa,KADA;AAEpB,MAAA,WAAW,EAAE,KAAK,OAAL,CAAa,WAFN;AAGpB,MAAA,MAAM,EAAE,CAAC,CAAC,SAAF,CAAY,KAAK,MAAjB,EAAyB,KAAK,IAAG;AACxC,eAAO,KAAK,CAAC,SAAN,EAAP;AACA,OAFO;AAHY,KADrB,CAAA;AAQA;;AAED,EAAA,gBAAgB,GAAA;AACf,WAAO,KAAK,cAAZ;AACA;;AAED,EAAA,YAAY,CAAC,KAAA,GAAiB,IAAlB,EAAsB;AACjC,SAAK,cAAL,GAAsB,KAAtB;AACA;;AAED,EAAA,MAAM,GAAA;AACL,QAAI,KAAK,MAAT,EAAiB;AAChB,WAAK,MAAL,CAAY,WAAZ,CAAwB,IAAxB;AACA;;AACD,UAAM,MAAN;AACA;;AAED,EAAA,QAAQ,CAAC,KAAD,EAAqB;AAC5B,IAAA,KAAK,CAAC,SAAN,CAAgB,IAAhB;AACA,SAAK,MAAL,CAAY,KAAK,CAAC,KAAN,EAAZ,IAA6B,KAA7B;AACA;;AAED,EAAA,oBAAoB,GAAA;AACnB,WAAO,CAAC,CAAC,OAAF,CAAU,KAAK,MAAf,EAAuB,KAAK,IAAG;AACrC,aAAO,KAAK,CAAC,oBAAN,EAAP;AACA,KAFM,CAAP;AAGA;;AAED,EAAA,SAAS,GAAA;AACR,WAAO,KAAK,MAAZ;AACA;;AAED,EAAA,QAAQ,CAAC,EAAD,EAAW;AAClB,WAAO,KAAK,MAAL,CAAY,EAAZ,CAAP;AACA;;AAED,EAAA,WAAW,CAAC,EAAD,EAA2B;AACrC,UAAM,GAAG,GAAG,OAAO,EAAP,KAAc,QAAd,GAAyB,EAAzB,GAA8B,EAAE,CAAC,KAAH,EAA1C;;AACA,QAAI,KAAK,MAAL,CAAY,GAAZ,CAAJ,EAAsB;AACrB,aAAO,KAAK,MAAL,CAAY,GAAZ,CAAP;AACA,aAAO,IAAP;AACA;;AACD,WAAO,KAAP;AACA;;AArFsG;;AAAxG,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst BaseModel_1 = require(\"../../core-models/BaseModel\");\nconst _ = require(\"lodash\");\nclass LayerModel extends BaseModel_1.BaseModel {\n    constructor(options = {}) {\n        super(options);\n        this.models = {};\n        this.repaintEnabled = true;\n    }\n    deserialize(event) {\n        super.deserialize(event);\n        this.options.isSvg = !!event.data.isSvg;\n        this.options.transformed = !!event.data.transformed;\n        _.forEach(event.data.models, model => {\n            const modelOb = this.getChildModelFactoryBank(event.engine)\n                .getFactory(model.type)\n                .generateModel({\n                initialConfig: model\n            });\n            modelOb.deserialize(Object.assign({}, event, { data: model }));\n            this.addModel(modelOb);\n        });\n    }\n    serialize() {\n        return Object.assign({}, super.serialize(), { isSvg: this.options.isSvg, transformed: this.options.transformed, models: _.mapValues(this.models, model => {\n                return model.serialize();\n            }) });\n    }\n    isRepaintEnabled() {\n        return this.repaintEnabled;\n    }\n    allowRepaint(allow = true) {\n        this.repaintEnabled = allow;\n    }\n    remove() {\n        if (this.parent) {\n            this.parent.removeLayer(this);\n        }\n        super.remove();\n    }\n    addModel(model) {\n        model.setParent(this);\n        this.models[model.getID()] = model;\n    }\n    getSelectionEntities() {\n        return _.flatMap(this.models, model => {\n            return model.getSelectionEntities();\n        });\n    }\n    getModels() {\n        return this.models;\n    }\n    getModel(id) {\n        return this.models[id];\n    }\n    removeModel(id) {\n        const _id = typeof id === 'string' ? id : id.getID();\n        if (this.models[_id]) {\n            delete this.models[_id];\n            return true;\n        }\n        return false;\n    }\n}\nexports.LayerModel = LayerModel;\n//# sourceMappingURL=LayerModel.js.map"]},"metadata":{},"sourceType":"script"}