{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _ = require(\"lodash\");\n\nconst BaseEntity_1 = require(\"../../core-models/BaseEntity\");\n\nclass CanvasModel extends BaseEntity_1.BaseEntity {\n  constructor(options = {}) {\n    super(Object.assign({\n      zoom: 100,\n      gridSize: 0,\n      offsetX: 0,\n      offsetY: 0\n    }, options));\n    this.layers = [];\n  }\n\n  getSelectionEntities() {\n    return _.flatMap(this.layers, layer => {\n      return layer.getSelectionEntities();\n    });\n  }\n\n  getSelectedEntities() {\n    return _.filter(this.getSelectionEntities(), ob => {\n      return ob.isSelected();\n    });\n  }\n\n  clearSelection() {\n    _.forEach(this.getSelectedEntities(), element => {\n      element.setSelected(false);\n    });\n  }\n\n  getModels() {\n    return _.flatMap(this.layers, layer => {\n      return _.values(layer.getModels());\n    });\n  }\n\n  addLayer(layer) {\n    layer.setParent(this);\n    layer.registerListener({\n      entityRemoved: event => {}\n    });\n    this.layers.push(layer);\n  }\n\n  removeLayer(layer) {\n    const index = this.layers.indexOf(layer);\n\n    if (index !== -1) {\n      this.layers.splice(index, 1);\n      return true;\n    }\n\n    return false;\n  }\n\n  getLayers() {\n    return this.layers;\n  }\n\n  setGridSize(size = 0) {\n    this.options.gridSize = size;\n    this.fireEvent({\n      size: size\n    }, 'gridUpdated');\n  }\n\n  getGridPosition(pos) {\n    if (this.options.gridSize === 0) {\n      return pos;\n    }\n\n    return this.options.gridSize * Math.floor((pos + this.options.gridSize / 2) / this.options.gridSize);\n  }\n\n  deserializeModel(data, engine) {\n    const models = {};\n    const promises = {};\n    const resolvers = {};\n    const event = {\n      data: data,\n      engine: engine,\n      registerModel: model => {\n        models[model.getID()] = model;\n\n        if (resolvers[model.getID()]) {\n          resolvers[model.getID()](model);\n        }\n      },\n\n      getModel(id) {\n        if (models[id]) {\n          return Promise.resolve(models[id]);\n        }\n\n        if (!promises[id]) {\n          promises[id] = new Promise(resolve => {\n            resolvers[id] = resolve;\n          });\n        }\n\n        return promises[id];\n      }\n\n    };\n    this.deserialize(event);\n  }\n\n  deserialize(event) {\n    super.deserialize(event);\n    this.options.offsetX = event.data.offsetX;\n    this.options.offsetY = event.data.offsetY;\n    this.options.zoom = event.data.zoom;\n    this.options.gridSize = event.data.gridSize;\n\n    _.forEach(event.data.layers, layer => {\n      const layerOb = event.engine.getFactoryForLayer(layer.type).generateModel({\n        initialConfig: layer\n      });\n      layerOb.deserialize(Object.assign({}, event, {\n        data: layer\n      }));\n      this.addLayer(layerOb);\n    });\n  }\n\n  serialize() {\n    return Object.assign({}, super.serialize(), {\n      offsetX: this.options.offsetX,\n      offsetY: this.options.offsetY,\n      zoom: this.options.zoom,\n      gridSize: this.options.gridSize,\n      layers: _.map(this.layers, layer => {\n        return layer.serialize();\n      })\n    });\n  }\n\n  setZoomLevel(zoom) {\n    this.options.zoom = zoom;\n    this.fireEvent({\n      zoom\n    }, 'zoomUpdated');\n  }\n\n  setOffset(offsetX, offsetY) {\n    this.options.offsetX = offsetX;\n    this.options.offsetY = offsetY;\n    this.fireEvent({\n      offsetX,\n      offsetY\n    }, 'offsetUpdated');\n  }\n\n  setOffsetX(offsetX) {\n    this.setOffset(offsetX, this.options.offsetY);\n  }\n\n  setOffsetY(offsetY) {\n    this.setOffset(this.options.offsetX, offsetY);\n  }\n\n  getOffsetY() {\n    return this.options.offsetY;\n  }\n\n  getOffsetX() {\n    return this.options.offsetX;\n  }\n\n  getZoomLevel() {\n    return this.options.zoom;\n  }\n\n}\n\nexports.CanvasModel = CanvasModel;","map":{"version":3,"sources":["../../../../src/entities/canvas/CanvasModel.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst BaseEntity_1 = require(\"../../core-models/BaseEntity\");\nclass CanvasModel extends BaseEntity_1.BaseEntity {\n    constructor(options = {}) {\n        super(Object.assign({ zoom: 100, gridSize: 0, offsetX: 0, offsetY: 0 }, options));\n        this.layers = [];\n    }\n    getSelectionEntities() {\n        return _.flatMap(this.layers, layer => {\n            return layer.getSelectionEntities();\n        });\n    }\n    getSelectedEntities() {\n        return _.filter(this.getSelectionEntities(), ob => {\n            return ob.isSelected();\n        });\n    }\n    clearSelection() {\n        _.forEach(this.getSelectedEntities(), element => {\n            element.setSelected(false);\n        });\n    }\n    getModels() {\n        return _.flatMap(this.layers, layer => {\n            return _.values(layer.getModels());\n        });\n    }\n    addLayer(layer) {\n        layer.setParent(this);\n        layer.registerListener({\n            entityRemoved: (event) => { }\n        });\n        this.layers.push(layer);\n    }\n    removeLayer(layer) {\n        const index = this.layers.indexOf(layer);\n        if (index !== -1) {\n            this.layers.splice(index, 1);\n            return true;\n        }\n        return false;\n    }\n    getLayers() {\n        return this.layers;\n    }\n    setGridSize(size = 0) {\n        this.options.gridSize = size;\n        this.fireEvent({ size: size }, 'gridUpdated');\n    }\n    getGridPosition(pos) {\n        if (this.options.gridSize === 0) {\n            return pos;\n        }\n        return this.options.gridSize * Math.floor((pos + this.options.gridSize / 2) / this.options.gridSize);\n    }\n    deserializeModel(data, engine) {\n        const models = {};\n        const promises = {};\n        const resolvers = {};\n        const event = {\n            data: data,\n            engine: engine,\n            registerModel: (model) => {\n                models[model.getID()] = model;\n                if (resolvers[model.getID()]) {\n                    resolvers[model.getID()](model);\n                }\n            },\n            getModel(id) {\n                if (models[id]) {\n                    return Promise.resolve(models[id]);\n                }\n                if (!promises[id]) {\n                    promises[id] = new Promise(resolve => {\n                        resolvers[id] = resolve;\n                    });\n                }\n                return promises[id];\n            }\n        };\n        this.deserialize(event);\n    }\n    deserialize(event) {\n        super.deserialize(event);\n        this.options.offsetX = event.data.offsetX;\n        this.options.offsetY = event.data.offsetY;\n        this.options.zoom = event.data.zoom;\n        this.options.gridSize = event.data.gridSize;\n        _.forEach(event.data.layers, layer => {\n            const layerOb = event.engine.getFactoryForLayer(layer.type).generateModel({\n                initialConfig: layer\n            });\n            layerOb.deserialize(Object.assign({}, event, { data: layer }));\n            this.addLayer(layerOb);\n        });\n    }\n    serialize() {\n        return Object.assign({}, super.serialize(), { offsetX: this.options.offsetX, offsetY: this.options.offsetY, zoom: this.options.zoom, gridSize: this.options.gridSize, layers: _.map(this.layers, layer => {\n                return layer.serialize();\n            }) });\n    }\n    setZoomLevel(zoom) {\n        this.options.zoom = zoom;\n        this.fireEvent({ zoom }, 'zoomUpdated');\n    }\n    setOffset(offsetX, offsetY) {\n        this.options.offsetX = offsetX;\n        this.options.offsetY = offsetY;\n        this.fireEvent({ offsetX, offsetY }, 'offsetUpdated');\n    }\n    setOffsetX(offsetX) {\n        this.setOffset(offsetX, this.options.offsetY);\n    }\n    setOffsetY(offsetY) {\n        this.setOffset(this.options.offsetX, offsetY);\n    }\n    getOffsetY() {\n        return this.options.offsetY;\n    }\n    getOffsetX() {\n        return this.options.offsetX;\n    }\n    getZoomLevel() {\n        return this.options.zoom;\n    }\n}\nexports.CanvasModel = CanvasModel;\n//# sourceMappingURL=CanvasModel.js.map"]},"metadata":{},"sourceType":"script"}