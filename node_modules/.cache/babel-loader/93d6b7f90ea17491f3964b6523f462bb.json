{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst Action_1 = require(\"./Action\");\n\nconst _ = require(\"lodash\");\n\nclass ActionEventBus {\n  constructor(engine) {\n    this.actions = {};\n    this.engine = engine;\n    this.keys = {};\n  }\n\n  getKeys() {\n    return _.keys(this.keys);\n  }\n\n  registerAction(action) {\n    action.setEngine(this.engine);\n    this.actions[action.id] = action;\n    return () => {\n      this.deregisterAction(action);\n    };\n  }\n\n  deregisterAction(action) {\n    action.setEngine(null);\n    delete this.actions[action.id];\n  }\n\n  getActionsForType(type) {\n    return _.filter(this.actions, action => {\n      return action.options.type === type;\n    });\n  }\n\n  getModelForEvent(actionEvent) {\n    if (actionEvent.model) {\n      return actionEvent.model;\n    }\n\n    return this.engine.getMouseElement(actionEvent.event);\n  }\n\n  getActionsForEvent(actionEvent) {\n    const {\n      event\n    } = actionEvent;\n\n    if (event.type === 'mousedown') {\n      return this.getActionsForType(Action_1.InputType.MOUSE_DOWN);\n    } else if (event.type === 'mouseup') {\n      return this.getActionsForType(Action_1.InputType.MOUSE_UP);\n    } else if (event.type === 'keydown') {\n      // store the recorded key\n      this.keys[event.key.toLowerCase()] = true;\n      return this.getActionsForType(Action_1.InputType.KEY_DOWN);\n    } else if (event.type === 'keyup') {\n      // delete the recorded key\n      delete this.keys[event.key.toLowerCase()];\n      return this.getActionsForType(Action_1.InputType.KEY_UP);\n    } else if (event.type === 'mousemove') {\n      return this.getActionsForType(Action_1.InputType.MOUSE_MOVE);\n    } else if (event.type === 'wheel') {\n      return this.getActionsForType(Action_1.InputType.MOUSE_WHEEL);\n    }\n\n    return [];\n  }\n\n  fireAction(actionEvent) {\n    const actions = this.getActionsForEvent(actionEvent);\n\n    for (let action of actions) {\n      action.options.fire(actionEvent);\n    }\n  }\n\n}\n\nexports.ActionEventBus = ActionEventBus;","map":{"version":3,"sources":["../../../src/core-actions/ActionEventBus.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Action_1 = require(\"./Action\");\nconst _ = require(\"lodash\");\nclass ActionEventBus {\n    constructor(engine) {\n        this.actions = {};\n        this.engine = engine;\n        this.keys = {};\n    }\n    getKeys() {\n        return _.keys(this.keys);\n    }\n    registerAction(action) {\n        action.setEngine(this.engine);\n        this.actions[action.id] = action;\n        return () => {\n            this.deregisterAction(action);\n        };\n    }\n    deregisterAction(action) {\n        action.setEngine(null);\n        delete this.actions[action.id];\n    }\n    getActionsForType(type) {\n        return _.filter(this.actions, action => {\n            return action.options.type === type;\n        });\n    }\n    getModelForEvent(actionEvent) {\n        if (actionEvent.model) {\n            return actionEvent.model;\n        }\n        return this.engine.getMouseElement(actionEvent.event);\n    }\n    getActionsForEvent(actionEvent) {\n        const { event } = actionEvent;\n        if (event.type === 'mousedown') {\n            return this.getActionsForType(Action_1.InputType.MOUSE_DOWN);\n        }\n        else if (event.type === 'mouseup') {\n            return this.getActionsForType(Action_1.InputType.MOUSE_UP);\n        }\n        else if (event.type === 'keydown') {\n            // store the recorded key\n            this.keys[event.key.toLowerCase()] = true;\n            return this.getActionsForType(Action_1.InputType.KEY_DOWN);\n        }\n        else if (event.type === 'keyup') {\n            // delete the recorded key\n            delete this.keys[event.key.toLowerCase()];\n            return this.getActionsForType(Action_1.InputType.KEY_UP);\n        }\n        else if (event.type === 'mousemove') {\n            return this.getActionsForType(Action_1.InputType.MOUSE_MOVE);\n        }\n        else if (event.type === 'wheel') {\n            return this.getActionsForType(Action_1.InputType.MOUSE_WHEEL);\n        }\n        return [];\n    }\n    fireAction(actionEvent) {\n        const actions = this.getActionsForEvent(actionEvent);\n        for (let action of actions) {\n            action.options.fire(actionEvent);\n        }\n    }\n}\nexports.ActionEventBus = ActionEventBus;\n//# sourceMappingURL=ActionEventBus.js.map"]},"metadata":{},"sourceType":"script"}