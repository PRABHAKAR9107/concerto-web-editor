{"ast":null,"code":"var _jsxFileName = \"/home/kanav/gsoc_/concerto-web-editor/src/components/DDArea.js\";\nimport React, { Component } from 'react';\nimport \"./Style.css\";\nimport { DefaultNodeModel, DiagramEngine, DefaultNodeFactory, DefaultLinkFactory, DefaultPortModel } from '@projectstorm/react-diagrams';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport './graph/srd.css';\nimport { Application } from './Application';\n/*\n\tDiagramWidget,\n\tDiagramEngine,\n\tDefaultNodeFactory,\n\tDefaultLinkFactory,\n\tDefaultNodeModel,\n    DefaultPortModel\n\n*/\n\nexport default class DDArea extends Component {\n  constructor(props) {\n    super(props);\n    this.engine = new DiagramEngine();\n    this.engine.getNodeFactories().registerFactory(new DefaultNodeFactory());\n    this.engine.getLabelFactories().registerFactory(new DefaultLinkFactory());\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"diagram-layer\",\n      onDrop: event => {\n        var data = JSON.parse(event.dataTransfer.getData('storm-diagram-node')); //var nodesCount = Lodash.keys(this.engine.getDiagramModel().getNodes()).length; //this is used to get the number of nodes\n\n        var node = null; //alert(data.name);\n\n        node = new DefaultNodeModel(data.name, data.color);\n        node.addPort(new DefaultPortModel(true, 'in-1', 'In'));\n        node.addPort(new DefaultPortModel(false, 'out-1', 'Out'));\n        var point = this.props.app.getDiagramEngine().getRelativeMousePoint(event);\n        node.setPosition(point);\n        this.props.app.getDiagramEngine().getModel().addNode(node);\n        this.forceUpdate();\n      }\n      /* onDoubleClick={event=>{\n           //!------------- SERIALIZING ------------------\n           const str=JSON.stringify(this.engine.getDiagramModel().serializeDiagram())\n           console.log(str);\n            //!------------- DESERIALIZING ----------------\n      //we need this to help the system know what models to create form the JSON\n      //this.engine.registerInstanceFactory(new DefaultNodeInstanceFactory());\n      //this.engine.registerInstanceFactory(new DefaultPortInstanceFactory());\n      //this.engine.registerInstanceFactory(new LinkInstanceFactory());\n      //deserialize the model\n      //var model = new DiagramModel();\n      //model.deSerializeDiagram(JSON.parse(str), this.engine);\n      //this.engine.setDiagramModel(model);\n       }}\n      onDragOver={event => {\n      event.preventDefault();\n      }}*/\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(CanvasWidget, {\n      className: \"srd-demo-canvas\",\n      engine: this.props.app.getDiagramEngine(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }));\n  }\n\n}\nDDArea.displayName = \"DDArea\";\nDDArea.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"DDArea\"\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/DDArea.js\"] = {\n    name: \"DDArea\",\n    docgenInfo: DDArea.__docgenInfo,\n    path: \"src/components/DDArea.js\"\n  };\n}","map":{"version":3,"sources":["/home/kanav/gsoc_/concerto-web-editor/src/components/DDArea.js"],"names":["React","Component","DefaultNodeModel","DiagramEngine","DefaultNodeFactory","DefaultLinkFactory","DefaultPortModel","CanvasWidget","Application","DDArea","constructor","props","engine","getNodeFactories","registerFactory","getLabelFactories","render","event","data","JSON","parse","dataTransfer","getData","node","name","color","addPort","point","app","getDiagramEngine","getRelativeMousePoint","setPosition","getModel","addNode","forceUpdate"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,aAAP;AACA,SAASC,gBAAT,EAA2BC,aAA3B,EAA0CC,kBAA1C,EAA8DC,kBAA9D,EAAiFC,gBAAjF,QAAyG,8BAAzG;AACA,SAASC,YAAT,QAA6B,iCAA7B;AACA,OAAO,iBAAP;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA;;;;;;;;;;AAcA,eAAe,MAAMC,MAAN,SAAqBR,SAArB,CAA+B;AAC1CS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACN,SAAKC,MAAL,GAAc,IAAIT,aAAJ,EAAd;AACA,SAAKS,MAAL,CAAYC,gBAAZ,GAA+BC,eAA/B,CAA+C,IAAIV,kBAAJ,EAA/C;AACM,SAAKQ,MAAL,CAAYG,iBAAZ,GAAgCD,eAAhC,CAAgD,IAAIT,kBAAJ,EAAhD;AAEN;;AACEW,EAAAA,MAAM,GAAG;AACL,WACI;AACP,MAAA,SAAS,EAAC,eADH;AAEP,MAAA,MAAM,EAAEC,KAAK,IAAI;AAChB,YAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACI,YAAN,CAAmBC,OAAnB,CAA2B,oBAA3B,CAAX,CAAX,CADgB,CAEhB;;AACA,YAAIC,IAAI,GAAG,IAAX,CAHgB,CAIhB;;AAEAA,QAAAA,IAAI,GAAG,IAAIrB,gBAAJ,CAAqBgB,IAAI,CAACM,IAA1B,EAAgCN,IAAI,CAACO,KAArC,CAAP;AACkBF,QAAAA,IAAI,CAACG,OAAL,CAAa,IAAIpB,gBAAJ,CAAqB,IAArB,EAA2B,MAA3B,EAAmC,IAAnC,CAAb;AACAiB,QAAAA,IAAI,CAACG,OAAL,CAAa,IAAIpB,gBAAJ,CAAqB,KAArB,EAA4B,OAA5B,EAAqC,KAArC,CAAb;AAElB,YAAIqB,KAAK,GAAC,KAAKhB,KAAL,CAAWiB,GAAX,CAAeC,gBAAf,GAAkCC,qBAAlC,CAAwDb,KAAxD,CAAV;AACAM,QAAAA,IAAI,CAACQ,WAAL,CAAiBJ,KAAjB;AACA,aAAKhB,KAAL,CAAWiB,GAAX,CACGC,gBADH,GAEGG,QAFH,GAGGC,OAHH,CAGWV,IAHX;AAIkB,aAAKW,WAAL;AAEH;AACF;;;;;;;;;;;;;;;;;AArBP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA0CP,oBAAC,YAAD;AAAc,MAAA,SAAS,EAAC,iBAAxB;AAA0C,MAAA,MAAM,EAAE,KAAKvB,KAAL,CAAWiB,GAAX,CAAeC,gBAAf,EAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1CO,CADJ;AA8CH;;AAvDyC;AAAzBpB,M","sourcesContent":["import React, { Component } from 'react';\nimport \"./Style.css\";\nimport { DefaultNodeModel, DiagramEngine, DefaultNodeFactory, DefaultLinkFactory,DefaultPortModel } from '@projectstorm/react-diagrams';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport './graph/srd.css';\nimport { Application } from './Application';\n\n/*\n\tDiagramWidget,\n\tDiagramEngine,\n\tDefaultNodeFactory,\n\tDefaultLinkFactory,\n\tDefaultNodeModel,\n    DefaultPortModel\n\n*/\n\nexport interface BodyWidgetProps {\n\tapp: Application;\n}\n\nexport default class DDArea extends Component {\n    constructor(props) {\n        super(props);\n\t\tthis.engine = new DiagramEngine();\n\t\tthis.engine.getNodeFactories().registerFactory(new DefaultNodeFactory());\n        this.engine.getLabelFactories().registerFactory(new DefaultLinkFactory());\n        \n\t}\n    render() {\n        return (\n            <div\n\t\t\t\t\tclassName=\"diagram-layer\"\n\t\t\t\t\tonDrop={event => {\n\t\t\t\t\t\tvar data = JSON.parse(event.dataTransfer.getData('storm-diagram-node'));\n\t\t\t\t\t\t//var nodesCount = Lodash.keys(this.engine.getDiagramModel().getNodes()).length; //this is used to get the number of nodes\n\t\t\t\t\t\tvar node = null;\n\t\t\t\t\t\t//alert(data.name);\n\t\t\t\t\t\t\n\t\t\t\t\t\tnode = new DefaultNodeModel(data.name, data.color);\n                        node.addPort(new DefaultPortModel(true, 'in-1', 'In'));\n                        node.addPort(new DefaultPortModel(false, 'out-1', 'Out'));\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar point=this.props.app.getDiagramEngine().getRelativeMousePoint(event);\n\t\t\t\t\t\tnode.setPosition(point);\n\t\t\t\t\t\tthis.props.app\n\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t.getModel()\n\t\t\t\t\t\t\t\t.addNode(node);\n                        this.forceUpdate();\n                        \n                    }}\n                   /* onDoubleClick={event=>{\n                        //!------------- SERIALIZING ------------------\n                        const str=JSON.stringify(this.engine.getDiagramModel().serializeDiagram())\n                        console.log(str);\n\n                        //!------------- DESERIALIZING ----------------\n\t\t                //we need this to help the system know what models to create form the JSON\n\t\t                //this.engine.registerInstanceFactory(new DefaultNodeInstanceFactory());\n\t\t                //this.engine.registerInstanceFactory(new DefaultPortInstanceFactory());\n\t\t                //this.engine.registerInstanceFactory(new LinkInstanceFactory());\n\n\t\t                //deserialize the model\n\t\t                //var model = new DiagramModel();\n\t\t                //model.deSerializeDiagram(JSON.parse(str), this.engine);\n\t\t                //this.engine.setDiagramModel(model);\n                    }}\n\n\t\t\t\t\tonDragOver={event => {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t}}*/\n\t\t\t\t>\n\t\t\t\t\t<CanvasWidget className=\"srd-demo-canvas\" engine={this.props.app.getDiagramEngine()} />\n\t\t\t\t</div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}