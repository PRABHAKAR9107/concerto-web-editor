{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst react_diagrams_core_1 = require(\"@projectstorm/react-diagrams-core\");\n\nconst DefaultLinkModel_1 = require(\"../link/DefaultLinkModel\");\n\nclass DefaultPortModel extends react_diagrams_core_1.PortModel {\n  constructor(options, name, label) {\n    if (!!name) {\n      options = {\n        in: !!options,\n        name: name,\n        label: label\n      };\n    }\n\n    options = options;\n    super(Object.assign({\n      label: options.label || options.name,\n      alignment: options.in ? react_diagrams_core_1.PortModelAlignment.LEFT : react_diagrams_core_1.PortModelAlignment.RIGHT,\n      type: 'default'\n    }, options));\n  }\n\n  deserialize(event) {\n    super.deserialize(event);\n    this.options.in = event.data.in;\n    this.options.label = event.data.label;\n  }\n\n  serialize() {\n    return Object.assign({}, super.serialize(), {\n      in: this.options.in,\n      label: this.options.label\n    });\n  }\n\n  link(port, factory) {\n    let link = this.createLinkModel(factory);\n    link.setSourcePort(this);\n    link.setTargetPort(port);\n    return link;\n  }\n\n  canLinkToPort(port) {\n    if (port instanceof DefaultPortModel) {\n      return this.options.in !== port.getOptions().in;\n    }\n\n    return true;\n  }\n\n  createLinkModel(factory) {\n    let link = super.createLinkModel();\n\n    if (!link && factory) {\n      return factory.generateModel({});\n    }\n\n    return link || new DefaultLinkModel_1.DefaultLinkModel();\n  }\n\n}\n\nexports.DefaultPortModel = DefaultPortModel;","map":{"version":3,"sources":["../../../src/port/DefaultPortModel.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,qBAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;;AAOA,MAAA,kBAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AAYA,MAAa,gBAAb,SAAsC,qBAAA,CAAA,SAAtC,CAAyE;AAGxE,EAAA,WAAA,CAAY,OAAZ,EAAwD,IAAxD,EAAuE,KAAvE,EAAqF;AACpF,QAAI,CAAC,CAAC,IAAN,EAAY;AACX,MAAA,OAAO,GAAG;AACT,QAAA,EAAE,EAAE,CAAC,CAAC,OADG;AAET,QAAA,IAAI,EAAE,IAFG;AAGT,QAAA,KAAK,EAAE;AAHE,OAAV;AAKA;;AACD,IAAA,OAAO,GAAG,OAAV;AACA,UAAK,MAAA,CAAA,MAAA,CAAA;AACJ,MAAA,KAAK,EAAE,OAAO,CAAC,KAAR,IAAiB,OAAO,CAAC,IAD5B;AAEJ,MAAA,SAAS,EAAE,OAAO,CAAC,EAAR,GAAa,qBAAA,CAAA,kBAAA,CAAmB,IAAhC,GAAuC,qBAAA,CAAA,kBAAA,CAAmB,KAFjE;AAGJ,MAAA,IAAI,EAAE;AAHF,KAAA,EAID,OAJC,CAAL;AAMA;;AAED,EAAA,WAAW,CAAC,KAAD,EAA8B;AACxC,UAAM,WAAN,CAAkB,KAAlB;AACA,SAAK,OAAL,CAAa,EAAb,GAAkB,KAAK,CAAC,IAAN,CAAW,EAA7B;AACA,SAAK,OAAL,CAAa,KAAb,GAAqB,KAAK,CAAC,IAAN,CAAW,KAAhC;AACA;;AAED,EAAA,SAAS,GAAA;AACR,WAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACI,MAAM,SAAN,EADJ,EACqB;AACpB,MAAA,EAAE,EAAE,KAAK,OAAL,CAAa,EADG;AAEpB,MAAA,KAAK,EAAE,KAAK,OAAL,CAAa;AAFA,KADrB,CAAA;AAKA;;AAED,EAAA,IAAI,CAAsB,IAAtB,EAAuC,OAAvC,EAAwE;AAC3E,QAAI,IAAI,GAAG,KAAK,eAAL,CAAqB,OAArB,CAAX;AACA,IAAA,IAAI,CAAC,aAAL,CAAmB,IAAnB;AACA,IAAA,IAAI,CAAC,aAAL,CAAmB,IAAnB;AACA,WAAO,IAAP;AACA;;AAED,EAAA,aAAa,CAAC,IAAD,EAAgB;AAC5B,QAAI,IAAI,YAAY,gBAApB,EAAsC;AACrC,aAAO,KAAK,OAAL,CAAa,EAAb,KAAoB,IAAI,CAAC,UAAL,GAAkB,EAA7C;AACA;;AACD,WAAO,IAAP;AACA;;AAED,EAAA,eAAe,CAAC,OAAD,EAA0C;AACxD,QAAI,IAAI,GAAG,MAAM,eAAN,EAAX;;AACA,QAAI,CAAC,IAAD,IAAS,OAAb,EAAsB;AACrB,aAAO,OAAO,CAAC,aAAR,CAAsB,EAAtB,CAAP;AACA;;AACD,WAAO,IAAI,IAAI,IAAI,kBAAA,CAAA,gBAAJ,EAAf;AACA;;AAtDuE;;AAAzE,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_diagrams_core_1 = require(\"@projectstorm/react-diagrams-core\");\nconst DefaultLinkModel_1 = require(\"../link/DefaultLinkModel\");\nclass DefaultPortModel extends react_diagrams_core_1.PortModel {\n    constructor(options, name, label) {\n        if (!!name) {\n            options = {\n                in: !!options,\n                name: name,\n                label: label\n            };\n        }\n        options = options;\n        super(Object.assign({ label: options.label || options.name, alignment: options.in ? react_diagrams_core_1.PortModelAlignment.LEFT : react_diagrams_core_1.PortModelAlignment.RIGHT, type: 'default' }, options));\n    }\n    deserialize(event) {\n        super.deserialize(event);\n        this.options.in = event.data.in;\n        this.options.label = event.data.label;\n    }\n    serialize() {\n        return Object.assign({}, super.serialize(), { in: this.options.in, label: this.options.label });\n    }\n    link(port, factory) {\n        let link = this.createLinkModel(factory);\n        link.setSourcePort(this);\n        link.setTargetPort(port);\n        return link;\n    }\n    canLinkToPort(port) {\n        if (port instanceof DefaultPortModel) {\n            return this.options.in !== port.getOptions().in;\n        }\n        return true;\n    }\n    createLinkModel(factory) {\n        let link = super.createLinkModel();\n        if (!link && factory) {\n            return factory.generateModel({});\n        }\n        return link || new DefaultLinkModel_1.DefaultLinkModel();\n    }\n}\nexports.DefaultPortModel = DefaultPortModel;\n//# sourceMappingURL=DefaultPortModel.js.map"]},"metadata":{},"sourceType":"script"}