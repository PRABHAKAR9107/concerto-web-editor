{"ast":null,"code":"var _jsxFileName = \"/home/kanav/gsoc_/concerto-web-editor/src/components/main_area_component/components/BodyWidget.js\";\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { Application } from '../Application';\nimport { DefaultNodeModel } from '@projectstorm/react-diagrams';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport './style.css';\nimport { AdvancedPortModel } from '../custom-link/Arrow';\nimport { JSCustomNodeModel } from '../custom-node-js/JSCustomNodeModel';\nexport class BodyWidget extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      onDrop: event => {\n        var data = JSON.parse(event.dataTransfer.getData('storm-diagram-node'));\n        var node = null;\n\n        switch (data.name) {\n          case 'Concept':\n            {\n              var ports = [//Ports will act as the field\n              {\n                text: \"String color\",\n                color: \"RGB(20, 20, 40)\",\n                isIn: true\n              }, {\n                text: \"String On\",\n                color: \"RGB(20, 20, 40)\",\n                isIn: true\n              }, {\n                text: \"String Stop\",\n                color: \"RGB(20, 20, 40)\",\n                isIn: true\n              }, //add a field 'type' like if type is string different color and datetime then different color\n              {\n                text: \"String Delay\",\n                color: \"grey\",\n                isIn: true\n              }, {\n                text: \"String Offset\",\n                color: \"grey\",\n                isIn: true\n              }, {\n                text: \"String Amplitude\",\n                color: \"grey\",\n                isIn: true\n              }, {\n                text: \"String Pitch\",\n                color: \"RGB(192, 255, 0)\",\n                isIn: true\n              }, {\n                text: \"String Space\",\n                color: \"RGB(192, 255, 0)\",\n                isIn: true\n              }, {\n                text: \"String Space\",\n                color: \"RGB(192, 255, 0)\",\n                isIn: true\n              }];\n              break;\n            }\n\n          case 'Participant':\n            {\n              var ports = [//Ports will act as the field\n              {\n                text: \"String color\",\n                color: \"RGB(20, 20, 40)\",\n                isIn: true\n              }, {\n                text: \"String On\",\n                color: \"RGB(20, 20, 40)\",\n                isIn: true\n              }, {\n                text: \"String Stop\",\n                color: \"RGB(20, 20, 40)\",\n                isIn: true\n              }, //add a field 'type' like if type is string different color and datetime then different color\n              {\n                text: \"String Delay\",\n                color: \"grey\",\n                isIn: true\n              }, {\n                text: \"String Offset\",\n                color: \"grey\",\n                isIn: true\n              }, {\n                text: \"String Amplitude\",\n                color: \"grey\",\n                isIn: true\n              }, {\n                text: \"String Pitch\",\n                color: \"RGB(192, 255, 0)\",\n                isIn: true\n              }, {\n                text: \"String Space\",\n                color: \"RGB(192, 255, 0)\",\n                isIn: true\n              }, {\n                text: \"String Space\",\n                color: \"RGB(192, 255, 0)\",\n                isIn: true\n              }];\n              break;\n            }\n\n          case 'Transaction':\n            {\n              var ports = [//Ports will act as the field\n              {\n                text: \"String color\",\n                color: \"RGB(20, 20, 40)\",\n                isIn: true\n              }, {\n                text: \"String On\",\n                color: \"RGB(20, 20, 40)\",\n                isIn: true\n              }, {\n                text: \"String Stop\",\n                color: \"RGB(20, 20, 40)\",\n                isIn: true\n              }, //add a field 'type' like if type is string different color and datetime then different color\n              {\n                text: \"String Delay\",\n                color: \"grey\",\n                isIn: true\n              }, {\n                text: \"String Offset\",\n                color: \"grey\",\n                isIn: true\n              }, {\n                text: \"String Amplitude\",\n                color: \"grey\",\n                isIn: true\n              }, {\n                text: \"String Pitch\",\n                color: \"RGB(192, 255, 0)\",\n                isIn: true\n              }, {\n                text: \"String Space\",\n                color: \"RGB(192, 255, 0)\",\n                isIn: true\n              }, {\n                text: \"String Space\",\n                color: \"RGB(192, 255, 0)\",\n                isIn: true\n              }];\n              break;\n            }\n\n          case 'Event':\n            {\n              var ports = [//Ports will act as the field\n              {\n                text: \"String color\",\n                color: \"RGB(20, 20, 40)\",\n                isIn: true\n              }, {\n                text: \"String On\",\n                color: \"RGB(20, 20, 40)\",\n                isIn: true\n              }, {\n                text: \"String Stop\",\n                color: \"RGB(20, 20, 40)\",\n                isIn: true\n              }, //add a field 'type' like if type is string different color and datetime then different color\n              {\n                text: \"String Delay\",\n                color: \"grey\",\n                isIn: true\n              }, {\n                text: \"String Offset\",\n                color: \"grey\",\n                isIn: true\n              }, {\n                text: \"String Amplitude\",\n                color: \"grey\",\n                isIn: true\n              }, {\n                text: \"String Pitch\",\n                color: \"RGB(192, 255, 0)\",\n                isIn: true\n              }, {\n                text: \"String Space\",\n                color: \"RGB(192, 255, 0)\",\n                isIn: true\n              }, {\n                text: \"String Space\",\n                color: \"RGB(192, 255, 0)\",\n                isIn: true\n              }];\n              break;\n            }\n\n          case 'Enumerable':\n            {\n              var ports = [//Ports will act as the field\n              {\n                text: \"String color\",\n                color: \"RGB(20, 20, 40)\",\n                isIn: true\n              }, {\n                text: \"String On\",\n                color: \"RGB(20, 20, 40)\",\n                isIn: true\n              }, {\n                text: \"String Stop\",\n                color: \"RGB(20, 20, 40)\",\n                isIn: true\n              }, //add a field 'type' like if type is string different color and datetime then different color\n              {\n                text: \"String Delay\",\n                color: \"grey\",\n                isIn: true\n              }, {\n                text: \"String Offset\",\n                color: \"grey\",\n                isIn: true\n              }, {\n                text: \"String Amplitude\",\n                color: \"grey\",\n                isIn: true\n              }, {\n                text: \"String Pitch\",\n                color: \"RGB(192, 255, 0)\",\n                isIn: true\n              }, {\n                text: \"String Space\",\n                color: \"RGB(192, 255, 0)\",\n                isIn: true\n              }, {\n                text: \"String Space\",\n                color: \"RGB(192, 255, 0)\",\n                isIn: true\n              }];\n              break;\n            }\n\n          case 'Asset':\n            {\n              var ports = [//Ports will act as the field\n              {\n                text: \"String color\",\n                color: \"RGB(20, 20, 40)\",\n                isIn: true\n              }, {\n                text: \"String On\",\n                color: \"RGB(20, 20, 40)\",\n                isIn: true\n              }, {\n                text: \"String Stop\",\n                color: \"RGB(20, 20, 40)\",\n                isIn: true\n              }, //add a field 'type' like if type is string different color and datetime then different color\n              {\n                text: \"String Delay\",\n                color: \"grey\",\n                isIn: true\n              }, {\n                text: \"String Offset\",\n                color: \"grey\",\n                isIn: true\n              }, {\n                text: \"String Amplitude\",\n                color: \"grey\",\n                isIn: true\n              }, {\n                text: \"String Pitch\",\n                color: \"RGB(192, 255, 0)\",\n                isIn: true\n              }, {\n                text: \"String Space\",\n                color: \"RGB(192, 255, 0)\",\n                isIn: true\n              }, {\n                text: \"String Space\",\n                color: \"RGB(192, 255, 0)\",\n                isIn: true\n              }];\n              break;\n            }\n        }\n\n        node = new JSCustomNodeModel({\n          name: data.name,\n          color: data.color,\n          ports\n        });\n        node.addPort(new AdvancedPortModel(true, 'in'));\n        var point = this.props.app.getDiagramEngine().getRelativeMousePoint(event);\n        node.setPosition(point);\n        this.props.app.getDiagramEngine().getModel().addNode(node);\n        this.forceUpdate();\n      },\n      onDragOver: event => {\n        event.preventDefault();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(CanvasWidget, {\n      className: \"srd-demo-canvas\",\n      engine: this.props.app.getDiagramEngine(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }));\n  }\n\n}\nBodyWidget.displayName = \"BodyWidget\";\nBodyWidget.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"BodyWidget\",\n  \"props\": {\n    \"app\": {\n      \"required\": true,\n      \"flowType\": {\n        \"name\": \"Application\"\n      },\n      \"description\": \"\"\n    }\n  }\n};\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/main_area_component/components/BodyWidget.js\"] = {\n    name: \"BodyWidget\",\n    docgenInfo: BodyWidget.__docgenInfo,\n    path: \"src/components/main_area_component/components/BodyWidget.js\"\n  };\n}","map":{"version":3,"sources":["/home/kanav/gsoc_/concerto-web-editor/src/components/main_area_component/components/BodyWidget.js"],"names":["React","_","Application","DefaultNodeModel","CanvasWidget","AdvancedPortModel","JSCustomNodeModel","BodyWidget","Component","render","event","data","JSON","parse","dataTransfer","getData","node","name","ports","text","color","isIn","addPort","point","props","app","getDiagramEngine","getRelativeMousePoint","setPosition","getModel","addNode","forceUpdate","preventDefault"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Application } from '../Application';\nimport { DefaultNodeModel } from '@projectstorm/react-diagrams';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport './style.css';\nimport { AdvancedPortModel } from '../custom-link/Arrow';\nimport { JSCustomNodeModel } from '../custom-node-js/JSCustomNodeModel';\nexport interface BodyWidgetProps {\n\tapp: Application;\n}\n\nexport class BodyWidget extends React.Component<BodyWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t\t\t<div\n\t\t\t\t\t\tonDrop={event => {\n\t\t\t\t\t\t\tvar data = JSON.parse(event.dataTransfer.getData('storm-diagram-node'));\n\n\t\t\t\t\t\t\tvar node= null;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tswitch(data.name){\n\t\t\t\t\t\t\t\tcase 'Concept':\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar ports = [                                                  //Ports will act as the field\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String color\", color: \"RGB(20, 20, 40)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String On\", color: \"RGB(20, 20, 40)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Stop\", color: \"RGB(20, 20, 40)\", isIn: true },               //add a field 'type' like if type is string different color and datetime then different color\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Delay\", color: \"grey\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Offset\", color: \"grey\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Amplitude\", color: \"grey\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Pitch\", color: \"RGB(192, 255, 0)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Space\", color: \"RGB(192, 255, 0)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Space\", color: \"RGB(192, 255, 0)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tcase 'Participant':\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar ports = [                                                  //Ports will act as the field\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String color\", color: \"RGB(20, 20, 40)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String On\", color: \"RGB(20, 20, 40)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Stop\", color: \"RGB(20, 20, 40)\", isIn: true },               //add a field 'type' like if type is string different color and datetime then different color\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Delay\", color: \"grey\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Offset\", color: \"grey\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Amplitude\", color: \"grey\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Pitch\", color: \"RGB(192, 255, 0)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Space\", color: \"RGB(192, 255, 0)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Space\", color: \"RGB(192, 255, 0)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcase 'Transaction':\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar ports = [                                                  //Ports will act as the field\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String color\", color: \"RGB(20, 20, 40)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String On\", color: \"RGB(20, 20, 40)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Stop\", color: \"RGB(20, 20, 40)\", isIn: true },               //add a field 'type' like if type is string different color and datetime then different color\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Delay\", color: \"grey\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Offset\", color: \"grey\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Amplitude\", color: \"grey\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Pitch\", color: \"RGB(192, 255, 0)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Space\", color: \"RGB(192, 255, 0)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Space\", color: \"RGB(192, 255, 0)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcase 'Event':\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar ports = [                                                  //Ports will act as the field\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String color\", color: \"RGB(20, 20, 40)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String On\", color: \"RGB(20, 20, 40)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Stop\", color: \"RGB(20, 20, 40)\", isIn: true },               //add a field 'type' like if type is string different color and datetime then different color\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Delay\", color: \"grey\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Offset\", color: \"grey\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Amplitude\", color: \"grey\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Pitch\", color: \"RGB(192, 255, 0)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Space\", color: \"RGB(192, 255, 0)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Space\", color: \"RGB(192, 255, 0)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcase 'Enumerable':\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar ports = [                                                  //Ports will act as the field\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String color\", color: \"RGB(20, 20, 40)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String On\", color: \"RGB(20, 20, 40)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Stop\", color: \"RGB(20, 20, 40)\", isIn: true },               //add a field 'type' like if type is string different color and datetime then different color\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Delay\", color: \"grey\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Offset\", color: \"grey\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Amplitude\", color: \"grey\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Pitch\", color: \"RGB(192, 255, 0)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Space\", color: \"RGB(192, 255, 0)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Space\", color: \"RGB(192, 255, 0)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcase 'Asset':\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar ports = [                                                  //Ports will act as the field\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String color\", color: \"RGB(20, 20, 40)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String On\", color: \"RGB(20, 20, 40)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Stop\", color: \"RGB(20, 20, 40)\", isIn: true },               //add a field 'type' like if type is string different color and datetime then different color\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Delay\", color: \"grey\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Offset\", color: \"grey\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Amplitude\", color: \"grey\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Pitch\", color: \"RGB(192, 255, 0)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Space\", color: \"RGB(192, 255, 0)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t\t{ text: \"String Space\", color: \"RGB(192, 255, 0)\", isIn: true },\n\t\t\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tnode = new JSCustomNodeModel({ name:data.name, color: data.color, ports });\n\t\t\t\t\t\t\tnode.addPort(new AdvancedPortModel(true, 'in'));\n\t\t\t\t\t\t\tvar point = this.props.app.getDiagramEngine().getRelativeMousePoint(event);\n\t\t\t\t\t\t\tnode.setPosition(point);\n\t\t\t\t\t\t\tthis.props.app\n\t\t\t\t\t\t\t\t.getDiagramEngine()\n\t\t\t\t\t\t\t\t.getModel()\n\t\t\t\t\t\t\t\t.addNode(node);\n\t\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonDragOver={event => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t<CanvasWidget className=\"srd-demo-canvas\" engine={this.props.app.getDiagramEngine()} />\n\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t\n\t\t);\n\t}\n}"]},"metadata":{},"sourceType":"module"}