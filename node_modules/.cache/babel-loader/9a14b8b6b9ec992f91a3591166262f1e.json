{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = require(\"react\");\n\nconst styled_1 = require(\"@emotion/styled\");\n\nconst core_1 = require(\"@emotion/core\");\n\nvar S;\n\n(function (S) {\n  const shared = core_1.css`\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tposition: absolute;\n\t\tpointer-events: none;\n\t\ttransform-origin: 0 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: visible;\n\t`;\n  S.DivLayer = styled_1.default.div`\n\t\t${shared}\n\t`;\n  S.SvgLayer = styled_1.default.svg`\n\t\t${shared}\n\t`;\n})(S || (S = {}));\n\nclass TransformLayerWidget extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  getTransform() {\n    const model = this.props.layer.getParent();\n    return `\n\t\t\ttranslate(\n\t\t\t\t${model.getOffsetX()}px,\n\t\t\t\t${model.getOffsetY()}px)\n\t\t\tscale(\n\t\t\t\t${model.getZoomLevel() / 100.0}\n\t\t\t)\n  \t`;\n  }\n\n  getTransformStyle() {\n    if (this.props.layer.getOptions().transformed) {\n      return {\n        transform: this.getTransform()\n      };\n    }\n\n    return {};\n  }\n\n  render() {\n    if (this.props.layer.getOptions().isSvg) {\n      return React.createElement(S.SvgLayer, {\n        style: this.getTransformStyle()\n      }, this.props.children);\n    }\n\n    return React.createElement(S.DivLayer, {\n      style: this.getTransformStyle()\n    }, this.props.children);\n  }\n\n}\n\nexports.TransformLayerWidget = TransformLayerWidget;","map":{"version":3,"sources":["../../../../src/entities/layer/TransformLayerWidget.tsx"],"names":[],"mappings":";;;;;;AAAA,MAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAQA,IAAU,CAAV;;AAAA,CAAA,UAAU,CAAV,EAAW;AACV,QAAM,MAAM,GAAG,MAAA,CAAA,GAAG;;;;;;;;;;;EAAlB;AAaa,EAAA,CAAA,CAAA,QAAA,GAAW,QAAA,CAAA,OAAA,CAAO,GAAG;IAC/B,MAAM;EADI;AAIA,EAAA,CAAA,CAAA,QAAA,GAAW,QAAA,CAAA,OAAA,CAAO,GAAG;IAC/B,MAAM;EADI;AAGb,CArBD,EAAU,CAAC,KAAD,CAAC,GAAA,EAAA,CAAX;;AAuBA,MAAa,oBAAb,SAA0C,KAAK,CAAC,SAAhD,CAAoF;AACnF,EAAA,WAAA,CAAY,KAAZ,EAA4C;AAC3C,UAAM,KAAN;AACA,SAAK,KAAL,GAAa,EAAb;AACA;;AAED,EAAA,YAAY,GAAA;AACX,UAAM,KAAK,GAAG,KAAK,KAAL,CAAW,KAAX,CAAiB,SAAjB,EAAd;AACA,WAAO;;MAEH,KAAK,CAAC,UAAN,EAAkB;MAClB,KAAK,CAAC,UAAN,EAAkB;;MAElB,KAAK,CAAC,YAAN,KAAuB,KAAK;;IALhC;AAQA;;AAED,EAAA,iBAAiB,GAAA;AAChB,QAAI,KAAK,KAAL,CAAW,KAAX,CAAiB,UAAjB,GAA8B,WAAlC,EAA+C;AAC9C,aAAO;AACN,QAAA,SAAS,EAAE,KAAK,YAAL;AADL,OAAP;AAGA;;AACD,WAAO,EAAP;AACA;;AAED,EAAA,MAAM,GAAA;AACL,QAAI,KAAK,KAAL,CAAW,KAAX,CAAiB,UAAjB,GAA8B,KAAlC,EAAyC;AACxC,aAAO,KAAA,CAAA,aAAA,CAAC,CAAC,CAAC,QAAH,EAAW;AAAC,QAAA,KAAK,EAAE,KAAK,iBAAL;AAAR,OAAX,EAA8C,KAAK,KAAL,CAAW,QAAzD,CAAP;AACA;;AACD,WAAO,KAAA,CAAA,aAAA,CAAC,CAAC,CAAC,QAAH,EAAW;AAAC,MAAA,KAAK,EAAE,KAAK,iBAAL;AAAR,KAAX,EAA8C,KAAK,KAAL,CAAW,QAAzD,CAAP;AACA;;AAhCkF;;AAApF,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst React = require(\"react\");\nconst styled_1 = require(\"@emotion/styled\");\nconst core_1 = require(\"@emotion/core\");\nvar S;\n(function (S) {\n    const shared = core_1.css `\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tposition: absolute;\n\t\tpointer-events: none;\n\t\ttransform-origin: 0 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow: visible;\n\t`;\n    S.DivLayer = styled_1.default.div `\n\t\t${shared}\n\t`;\n    S.SvgLayer = styled_1.default.svg `\n\t\t${shared}\n\t`;\n})(S || (S = {}));\nclass TransformLayerWidget extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n    getTransform() {\n        const model = this.props.layer.getParent();\n        return `\n\t\t\ttranslate(\n\t\t\t\t${model.getOffsetX()}px,\n\t\t\t\t${model.getOffsetY()}px)\n\t\t\tscale(\n\t\t\t\t${model.getZoomLevel() / 100.0}\n\t\t\t)\n  \t`;\n    }\n    getTransformStyle() {\n        if (this.props.layer.getOptions().transformed) {\n            return {\n                transform: this.getTransform()\n            };\n        }\n        return {};\n    }\n    render() {\n        if (this.props.layer.getOptions().isSvg) {\n            return React.createElement(S.SvgLayer, { style: this.getTransformStyle() }, this.props.children);\n        }\n        return React.createElement(S.DivLayer, { style: this.getTransformStyle() }, this.props.children);\n    }\n}\nexports.TransformLayerWidget = TransformLayerWidget;\n//# sourceMappingURL=TransformLayerWidget.js.map"]},"metadata":{},"sourceType":"script"}