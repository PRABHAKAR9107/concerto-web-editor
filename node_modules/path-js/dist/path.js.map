{"version":3,"file":null,"sources":["../src/path.js"],"sourcesContent":["export default function Path(d) {\n\tif (!(this instanceof Path)) {\n\t\treturn new Path(d);\n\t}\n\n\tif (Array.isArray(d)) {\n\t\tthis.points = d;\n\t} else {\n\t\tthis.points = d.trim()\n\t\t\t.split(/\\s*(?=[A-Z])/i)\n\t\t\t.map((pointString) => {\n\t\t\t\treturn pointString.trim()\n\t\t\t\t// These two replaces are to simplify the split regex\n\t\t\t\t\t.replace(/([^, ])-/g, '$1,-')\n\t\t\t\t\t.replace(/([a-z])(?![,])/gi, '$1 ')\n\t\t\t\t\t.split(/[\\s,]+/)\n\t\t\t\t\t.map((coord, i) => (i === 0 ? coord : Number(coord)));\n\t\t\t})\n\t\t\t.map((pointArray, i, allPoints) => {\n\t\t\t\t// This is done in a separate map so that lastPoint is parsed point\n\t\t\t\tconst command = pointArray[0];\n\n\t\t\t\tif (i === 0 || command.toUpperCase() === command) {\n\t\t\t\t\treturn pointArray;\n\t\t\t\t}\n\n\t\t\t\tconst prev = allPoints[i - 1];\n\n\t\t\t\tpointArray[0] = pointArray[0].toUpperCase();\n\n\t\t\t\tpointArray.slice(1).forEach((num, i) => {\n\t\t\t\t\tpointArray[i + 1] += prev[prev.length - (i % 2 === 0 ? 2 : 1)];\n\t\t\t\t});\n\n\t\t\t\treturn pointArray;\n\t\t\t});\n\n\t\tthis._originalPath = d;\n\t}\n}\n\nPath.prototype.reverse = function reversePath() {\n\t// convert all curves to C\n\tconst points = this.points.map((num, i) => {\n\t\tif (num[0] === 'M' || num[0] === 'L' || num[0] === 'C') {\n\t\t\treturn num.slice();\n\t\t}\n\n\t\tif (num[0] === 'S') {\n\t\t\treturn sToC(num, this.points[i - 1]);\n\t\t}\n\n\t\tthrow new Error('Reversing paths with that in is not yet supported, sorry');\n\t});\n\n\t// Reverse\n\tconst reversedPoints = [\n\t\t['M', ...points[points.length - 1].splice(-2, 2)]\n\t];\n\n\t// Don't hit 0: that'll just equal 'M'\n\tfor (let i = points.length - 1; i >= 1; i--) {\n\t\t// reverse arguments\n\t\tconst oldPoint = points[i];\n\t\tconst newPoint = [oldPoint[0]];\n\n\t\tfor (let j = oldPoint.length - 2; j > 0; j -= 2) {\n\t\t\tnewPoint.push(...oldPoint.slice(j, j + 2));\n\t\t}\n\n\t\t// grab coordinates from prev\n\t\tnewPoint.push(...points[i - 1].splice(-2, 2));\n\n\t\treversedPoints.push(newPoint);\n\t}\n\n\treturn new Path(reversedPoints);\n};\n\nPath.prototype.d = function getPathString(options) {\n\toptions = Object.assign({\n\t\ttype: 'relative',\n\t}, options);\n\n\treturn this.points\n\t\t.map((point, i, allPoints) => {\n\t\t\tif (i === 0 || options.type === 'absolute') {\n\t\t\t\treturn point[0] + point.slice(1).map(toImpreciseString).join(',');\n\t\t\t}\n\n\t\t\tconst prev = allPoints[i - 1];\n\n\t\t\treturn point[0].toLowerCase() + point.slice(1).map((num, j) => {\n\t\t\t\t\treturn toImpreciseString(num - prev[prev.length - (j % 2 === 0 ? 2 : 1)]);\n\t\t\t\t}).join(',');\n\t\t})\n\t\t.join('');\n};\n\nfunction toImpreciseString(num) {\n\treturn num.toFixed(1).replace('.0', '');\n}\n\nPath.prototype.toString = Path.prototype.d;\n\nPath.scale = function initPathScale(pathStrings, options) {\n\toptions = Object.assign({\n\t\tloop: false, // start from 0 when loop gets above 1?\n\t}, options);\n\n\tconst paths = pathStrings.map((str) => str instanceof Path ? str : new Path(str));\n\n\t// Check that what we're trying to do is actually possible with this lib\n\tpaths.slice(1).forEach((path) => {\n\t\tif (path.points.length !== paths[0].points.length) {\n\t\t\tthrow new Error('Both paths have to be the same length, sorry');\n\t\t}\n\n\t\tpath.points.forEach(([command], i) => {\n\t\t\tif (!mixable(command, paths[0].points[i][0])) {\n\t\t\t\tthrow new Error('Command types have to match, sorry');\n\t\t\t}\n\t\t});\n\t});\n\n\tif (options.loop) {\n\t\tpaths.push(paths[0]);\n\t}\n\n\tconst sectionSize = 1 / (paths.length - 1);\n\n\treturn function pathScale(x) {\n\t\tif (options.loop) {\n\t\t\tx %= 1;\n\t\t}\n\n\t\t// Calculate which two paths to mix, and how much to actually mix them by\n\t\tconst index = Math.floor(x / sectionSize);\n\t\tconst realX = (x % sectionSize) / sectionSize;\n\n\t\t// If x lands on a path, just return the path\n\t\tif (realX < Number.EPSILON || index + 1 === paths.length) {\n\t\t\treturn paths[index];\n\t\t}\n\n\t\treturn Path.mix(paths[index], paths[index + 1], realX);\n\t};\n};\n\nPath.mix = function mixPaths(a, b, x = 0.5) {\n\tif (!(a instanceof Path)) {\n\t\treturn Path.mix(new Path(a), b, x);\n\t}\n\n\tif (!(b instanceof Path)) {\n\t\treturn Path.mix(a, new Path(b), x);\n\t}\n\n\tif (a.points.length !== b.points.length) {\n\t\tthrow new Error('Both paths have to be the same length, sorry');\n\t}\n\n\t// Mix the two lines by mixing the individual points together\n\tconst newPoints = a.points.map((aPoint, i) => mixPoints(a, b, i, x));\n\n\treturn new Path(newPoints);\n};\n\nPath.reverse = function reversePath(path) {\n\treturn new Path(path).reverse().d();\n};\n\nfunction mixPoints(a, b, i, x) {\n\tlet aPoints = a.points[i];\n\tlet bPoints = b.points[i];\n\n\tif (aPoints[0] === 'S' && bPoints[0] === 'C') {\n\t\taPoints = sToC(aPoints, a.points[i - 1]);\n\t} else if (bPoints[0] === 'S' && aPoints[0] === 'C') {\n\t\tbPoints = sToC(bPoints, b.points[i - 1]);\n\t}\n\n\tif (aPoints[0] === bPoints[0]) {\n\t\tconst newPoints = aPoints.slice(1).map((num, j) => num * (1 - x) + bPoints[j + 1] * x);\n\t\treturn [aPoints[0], ...newPoints];\n\t}\n\n\tthrow new Error('Mixing those command types isn\\'t supported, sorry');\n}\n\nfunction sToC(points, prev) {\n\tlet x1, y1;\n\n\tif (prev[0] === 'C' || prev[0] === 'S') {\n\t\tx1 = prev[prev.length - 2] * 2 - prev[prev.length - 4];\n\t\ty1 = prev[prev.length - 1] * 2 - prev[prev.length - 3];\n\t} else {\n\t\tx1 = prev[prev.length - 1];\n\t\ty1 = prev[prev.length - 2];\n\t}\n\n\treturn ['C', x1, y1, ...points.slice(1)];\n}\n\nfunction mixable(a, b) {\n\tif (a === b) {\n\t\treturn true;\n\t}\n\n\tif (a === 'C' && b === 'S') {\n\t\treturn true;\n\t}\n\n\tif (a === 'S' && b === 'C') {\n\t\treturn true;\n\t}\n\n\treturn false;\n}"],"names":["Path","d","Array","isArray","points","trim","split","map","pointString","replace","coord","i","Number","pointArray","allPoints","command","toUpperCase","prev","slice","forEach","num","length","_originalPath","prototype","reverse","reversePath","sToC","Error","reversedPoints","splice","oldPoint","newPoint","j","push","getPathString","options","Object","assign","point","type","toImpreciseString","join","toLowerCase","toFixed","toString","scale","initPathScale","pathStrings","paths","str","path","mixable","loop","sectionSize","pathScale","x","index","Math","floor","realX","EPSILON","mix","mixPaths","a","b","newPoints","aPoint","mixPoints","aPoints","bPoints","x1","y1"],"mappings":"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"}